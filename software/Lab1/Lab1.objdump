
Lab1.elf:     file format elf32-littlenios2
Lab1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010f5c memsz 0x00010f5c flags r-x
    LOAD off    0x00011f7c vaddr 0x00810f7c paddr 0x00812cb4 align 2**12
         filesz 0x00001d38 memsz 0x00001d38 flags rw-
    LOAD off    0x000149ec vaddr 0x008149ec paddr 0x008149ec align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001071c  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000061c  00810960  00810960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d38  00810f7c  00812cb4  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  008149ec  008149ec  000149ec  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  00814b50  00814b50  00013cb4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013cb4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fa0  00000000  00000000  00013cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024c5d  00000000  00000000  00014c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000097d8  00000000  00000000  000398d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bd32  00000000  00000000  000430ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002424  00000000  00000000  0004ede0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ca2  00000000  00000000  00051204  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016df9  00000000  00000000  00054ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006bca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000017d8  00000000  00000000  0006bd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00070b52  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070b55  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070b61  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070b62  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00070b63  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070b67  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070b6b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00070b6f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00070b7a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00070b85  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00070b90  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  00070b93  2**0
                  CONTENTS, READONLY
 29 .jdi          00004e0d  00000000  00000000  00070bb6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fff9  00000000  00000000  000759c3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00810960 l    d  .rodata	00000000 .rodata
00810f7c l    d  .rwdata	00000000 .rwdata
008149ec l    d  .bss	00000000 .bss
00814b50 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab1_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
008149ec l     O .bss	00000004 background_count
008002ec l     F .text	00000060 stimulus_in_ISR
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
008109fa l     O .rodata	00000010 zeroes.4255
0080255c l     F .text	000000bc __sbprintf
00810a0a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080276c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00804328 l     F .text	00000008 __fp_lock
00804330 l     F .text	00000008 __fp_unlock
00804344 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00810f7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
008113c0 l     O .rwdata	00000020 lc_ctype_charset
008113a0 l     O .rwdata	00000020 lc_message_charset
008113e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00810a3c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00806cc8 l     F .text	000000fc __sprint_r.part.0
00810b70 l     O .rodata	00000010 blanks.4199
00810b60 l     O .rodata	00000010 zeroes.4200
008080d0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080a158 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080c884 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c9a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c9d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080cad0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080cbc4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080cca8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ce84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00812c9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d0e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080d228 l     F .text	00000038 alt_dev_reg
008119c8 l     O .rwdata	00001060 jtag_uart_0
00812a28 l     O .rwdata	00000120 lcd_display
00812b48 l     O .rwdata	000000c4 uart
00812c0c l     O .rwdata	00000030 audio_i2c_config
00812c3c l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080d560 l     F .text	00000208 altera_avalon_jtag_uart_irq
0080d768 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00812ca0 l     O .rwdata	00000004 colstart
0080dd88 l     F .text	000000b4 lcd_write_command
0080de3c l     F .text	000000d4 lcd_write_data
0080df10 l     F .text	000000cc lcd_clear_screen
0080dfdc l     F .text	000001e8 lcd_repaint_screen
0080e1c4 l     F .text	000000c8 lcd_scroll_up
0080e28c l     F .text	000002a0 lcd_handle_escape
0080ea14 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080ec58 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080ef00 l     F .text	0000009c altera_avalon_uart_irq
0080ef9c l     F .text	000000e0 altera_avalon_uart_rxirq
0080f07c l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080f214 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080f440 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080f7c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f99c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080fc84 l     F .text	00000050 alt_get_errno
0080fcd4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00810df9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00814a24 g     O .bss	00000004 alt_instruction_exception_handler
00806810 g     F .text	00000074 _mprec_log10
008068fc g     F .text	0000008c __any_on
00808afc g     F .text	00000054 _isatty_r
00810a48 g     O .rodata	00000028 __mprec_tinytens
0080cdcc g     F .text	00000078 alt_main
00814a50 g     O .bss	00000100 alt_irq
00808b50 g     F .text	0000005c _lseek_r
00812cb4 g       *ABS*	00000000 __flash_rwdata_start
0080b3ec g     F .text	00000084 .hidden __eqdf2
00814b50 g       *ABS*	00000000 __alt_heap_start
008005ac g     F .text	0000003c printf
00809420 g     F .text	0000009c _wcrtomb_r
00806b28 g     F .text	0000005c __sseek
00804678 g     F .text	00000010 __sinit
008092cc g     F .text	00000138 __swbuf_r
00804c64 g     F .text	0000007c _setlocale_r
008044e0 g     F .text	00000068 __sfmoreglue
0080ce64 g     F .text	00000020 __malloc_unlock
00808bac g     F .text	0000015c memmove
00804660 g     F .text	00000018 _cleanup
008059e8 g     F .text	000000a8 _Balloc
0080b470 g     F .text	000000e0 .hidden __gtdf2
008100c4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008085e4 g     F .text	00000058 _fstat_r
00814a08 g     O .bss	00000004 errno
00806aa4 g     F .text	00000008 __seofread
00814a10 g     O .bss	00000004 alt_argv
0081ac6c g       *ABS*	00000000 _gp
00810094 g     F .text	00000030 usleep
00811848 g     O .rwdata	00000180 alt_fd_list
0081023c g     F .text	00000090 alt_find_dev
0080578c g     F .text	00000138 memcpy
00800290 g     F .text	0000005c background
00804338 g     F .text	0000000c _cleanup_r
0080c6ac g     F .text	000000d0 .hidden __floatsidf
0080fa5c g     F .text	00000078 alt_io_redirect
0080b550 g     F .text	000000e0 .hidden __ltdf2
00810960 g       *ABS*	00000000 __DTOR_END__
00810520 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00806988 g     F .text	00000074 __fpclassifyd
0080676c g     F .text	000000a4 __ratio
008080ac g     F .text	00000024 __vfiprintf_internal
0080d964 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00800580 g     F .text	0000002c _printf_r
0080a274 g     F .text	00000008 .hidden __udivsi3
0080cb20 g     F .text	000000a4 isatty
00810a98 g     O .rodata	000000c8 __mprec_tens
00804ce0 g     F .text	0000000c __locale_charset
00810494 g     F .text	0000008c alt_icache_flush
00814a04 g     O .bss	00000004 __malloc_top_pad
00812c74 g     O .rwdata	00000004 __mb_cur_max
00804d10 g     F .text	0000000c _localeconv_r
0080863c g     F .text	000004c0 __sfvwrite_r
00805df4 g     F .text	0000003c __i2b
008069fc g     F .text	00000054 _sbrk_r
00808d08 g     F .text	0000005c _read_r
00812c94 g     O .rwdata	00000004 alt_max_fd
00808300 g     F .text	000000f0 _fclose_r
008042f8 g     F .text	00000030 fflush
00814a00 g     O .bss	00000004 __malloc_max_sbrked_mem
0080fad4 g     F .text	000001b0 alt_irq_register
0080a284 g     F .text	0000089c .hidden __adddf3
00806514 g     F .text	0000011c __b2d
00809bc8 g     F .text	00000590 .hidden __umoddi3
0080ccf8 g     F .text	000000d4 lseek
00812c6c g     O .rwdata	00000004 _global_impure_ptr
00808d64 g     F .text	00000568 _realloc_r
00814b50 g       *ABS*	00000000 __bss_end
0080ff90 g     F .text	00000104 alt_tick
00809608 g     F .text	000005c0 .hidden __udivdi3
00808404 g     F .text	00000184 _fputwc_r
00810a70 g     O .rodata	00000028 __mprec_bigtens
00805bd8 g     F .text	00000104 __s2b
0080c77c g     F .text	000000a4 .hidden __floatunsidf
008062bc g     F .text	00000060 __mcmp
0080ee60 g     F .text	000000a0 altera_avalon_uart_init
00804698 g     F .text	00000018 __fp_lock_all
0080fef8 g     F .text	00000098 alt_alarm_stop
00814a18 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
00811820 g     O .rwdata	00000028 alt_dev_null
0080f77c g     F .text	00000044 alt_dcache_flush_all
00805cdc g     F .text	00000068 __hi0bits
0080c624 g     F .text	00000088 .hidden __fixdfsi
00812cb4 g       *ABS*	00000000 __ram_rwdata_end
00812c8c g     O .rwdata	00000008 alt_dev_list
0080d130 g     F .text	000000f8 write
00810f7c g       *ABS*	00000000 __ram_rodata_end
0080ca20 g     F .text	000000b0 fstat
0080b550 g     F .text	000000e0 .hidden __ledf2
0080602c g     F .text	00000140 __pow5mult
00806ddc g     F .text	000012d0 ___vfiprintf_internal_r
008149f8 g     O .bss	00000004 __nlocale_changed
0080a27c g     F .text	00000008 .hidden __umodsi3
00814b50 g       *ABS*	00000000 end
0080e52c g     F .text	000004e8 altera_avalon_lcd_16207_write
0080f490 g     F .text	000001ac altera_avalon_uart_write
0080d4a8 g     F .text	000000b8 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00810960 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080ecd0 g     F .text	00000080 alt_avalon_timer_sc_init
0080edb0 g     F .text	00000060 altera_avalon_uart_write_fd
0080c820 g     F .text	00000064 .hidden __clzsi2
0080ee10 g     F .text	00000050 altera_avalon_uart_close_fd
0080db70 g     F .text	00000218 altera_avalon_jtag_uart_write
00804688 g     F .text	00000004 __sfp_lock_acquire
008056a4 g     F .text	000000e8 memchr
008005e8 g     F .text	00001f50 ___vfprintf_internal_r
008047ec g     F .text	000002f0 _free_r
00804cec g     F .text	00000010 __locale_mb_cur_max
00810798 g     F .text	00000194 __call_exitprocs
008149f4 g     O .bss	00000004 __mlocale_changed
00812c78 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00814a1c g     O .bss	00000004 _alt_tick_rate
0080616c g     F .text	00000150 __lshift
00814a20 g     O .bss	00000004 _alt_nticks
0080ced4 g     F .text	000000fc read
0080d294 g     F .text	000000b0 alt_sys_init
00810684 g     F .text	00000114 __register_exitproc
00805e30 g     F .text	000001fc __multiply
0080d810 g     F .text	00000068 altera_avalon_jtag_uart_close
00810f7c g       *ABS*	00000000 __ram_rwdata_start
00810960 g       *ABS*	00000000 __ram_rodata_start
00814a28 g     O .bss	00000028 __malloc_current_mallinfo
00806630 g     F .text	0000013c __d2b
0080d344 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008103e0 g     F .text	000000b4 alt_get_fd
008100e4 g     F .text	00000158 alt_busy_sleep
008081e8 g     F .text	00000054 _close_r
00810608 g     F .text	0000007c memcmp
0080d404 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00814b50 g       *ABS*	00000000 __alt_stack_base
0080d454 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802618 g     F .text	00000154 __swsetup_r
0080ab20 g     F .text	000008cc .hidden __divdf3
00804548 g     F .text	00000118 __sfp
00806884 g     F .text	00000078 __copybits
00811418 g     O .rwdata	00000408 __malloc_av_
00804694 g     F .text	00000004 __sinit_lock_release
0080b630 g     F .text	00000724 .hidden __muldf3
00806a50 g     F .text	00000054 __sread
008102cc g     F .text	00000114 alt_find_file
0080f810 g     F .text	000000a4 alt_dev_llist_insert
0080ce44 g     F .text	00000020 __malloc_lock
0080d030 g     F .text	000000b0 sbrk
0080429c g     F .text	0000005c _fflush_r
0080823c g     F .text	000000c4 _calloc_r
008149ec g       *ABS*	00000000 __bss_start
008058c4 g     F .text	00000124 memset
0080034c g     F .text	00000234 main
00814a14 g     O .bss	00000004 alt_envp
008149fc g     O .bss	00000004 __malloc_max_total_mem
0080d3a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809404 g     F .text	0000001c __swbuf
0080eac0 g     F .text	00000138 altera_avalon_lcd_16207_init
00806b84 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008083f0 g     F .text	00000014 fclose
0080296c g     F .text	00001728 _dtoa_r
00804efc g     F .text	000007a8 _malloc_r
0080957c g     F .text	00000030 __ascii_wctomb
00812c98 g     O .rwdata	00000004 alt_errno
00804adc g     F .text	000000c4 _fwalk
0080a1c4 g     F .text	00000054 .hidden __divsi3
008046c8 g     F .text	00000124 _malloc_trim_r
00810960 g       *ABS*	00000000 __CTOR_END__
00806b8c g     F .text	000000a4 strcmp
00810960 g       *ABS*	00000000 __flash_rodata_start
00810960 g       *ABS*	00000000 __DTOR_LIST__
0080b3ec g     F .text	00000084 .hidden __nedf2
0080d260 g     F .text	00000034 alt_irq_init
0080cfd0 g     F .text	00000060 alt_release_fd
00810b80 g     O .rodata	00000100 .hidden __clz_tab
008149f0 g     O .bss	00000004 _PathLocale
008105bc g     F .text	00000014 atexit
0080818c g     F .text	0000005c _write_r
00804d1c g     F .text	0000001c setlocale
00812c70 g     O .rwdata	00000004 _impure_ptr
00814a0c g     O .bss	00000004 alt_argc
00804094 g     F .text	00000208 __sflush_r
0080f910 g     F .text	0000005c _do_dtors
00804d08 g     F .text	00000008 __locale_cjk_lang
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
008064b4 g     F .text	00000060 __ulp
008046b0 g     F .text	00000018 __fp_unlock_all
0080ebf8 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00812c84 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804d38 g     F .text	0000000c localeconv
00812cb4 g       *ABS*	00000000 _edata
0080ed50 g     F .text	00000060 altera_avalon_uart_read_fd
00814b50 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080d878 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00806aac g     F .text	0000007c __swrite
00812c7c g     O .rwdata	00000004 __malloc_trim_threshold
00804cfc g     F .text	0000000c __locale_msgcharset
008105d0 g     F .text	00000038 exit
00804ba0 g     F .text	000000c4 _fwalk_reent
0080631c g     F .text	00000198 __mdiff
0080a218 g     F .text	0000005c .hidden __modsi3
00812cb0 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080468c g     F .text	00000004 __sfp_lock_release
00810cf8 g     O .rodata	00000101 _ctype_
0080f1c0 g     F .text	00000054 altera_avalon_uart_close
0081092c g     F .text	00000034 _exit
0080f63c g     F .text	00000140 alt_alarm_start
00804d44 g     F .text	000001b8 __smakebuf_r
00806c30 g     F .text	00000098 strlen
0080fda0 g     F .text	00000158 open
0080b470 g     F .text	000000e0 .hidden __gedf2
00812c80 g     O .rwdata	00000004 __wctomb
00806dc4 g     F .text	00000018 __sprint_r
0080f96c g     F .text	00000030 alt_icache_flush_all
00812ca4 g     O .rwdata	00000004 alt_priority_mask
00802538 g     F .text	00000024 __vfprintf_internal
0080f264 g     F .text	000001dc altera_avalon_uart_read
008095ac g     F .text	0000005c _wctomb_r
0080bd54 g     F .text	000008d0 .hidden __subdf3
00805d44 g     F .text	000000b0 __lo0bits
00812ca8 g     O .rwdata	00000008 alt_alarm_list
0080f8b4 g     F .text	0000005c _do_ctors
008094bc g     F .text	000000c0 wcrtomb
0080c8d4 g     F .text	000000d0 close
0080cc28 g     F .text	00000080 alt_load
00808588 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
00804690 g     F .text	00000004 __sinit_lock_acquire
00805ab8 g     F .text	00000120 __multadd
00805a90 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	10929404 	addi	r2,r2,19024
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10929404 	addi	r2,r2,19024
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76e17 	ldw	r2,-25160(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76e17 	ldw	r2,-25160(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6ab1b14 	ori	gp,gp,44140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10927b14 	ori	r2,r2,18924

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18d2d414 	ori	r3,r3,19280

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080cc280 	call	80cc28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080cdcc0 	call	80cdcc <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <background>:

//#define interrupt
#define polling

int background()
{
  800290:	defffb04 	addi	sp,sp,-20
  800294:	df000415 	stw	fp,16(sp)
  800298:	df000404 	addi	fp,sp,16
	int j;
	int x = 0;
  80029c:	e03ffe15 	stw	zero,-8(fp)
	int grainsize = 4;
  8002a0:	00800104 	movi	r2,4
  8002a4:	e0bfff15 	stw	r2,-4(fp)
	int g_taskProcessed = 0;
  8002a8:	e03ffd15 	stw	zero,-12(fp)
	for (j = 0; j < grainsize; j++)
  8002ac:	e03ffc15 	stw	zero,-16(fp)
  8002b0:	00000606 	br	8002cc <background+0x3c>
	{
		g_taskProcessed++;
  8002b4:	e0bffd17 	ldw	r2,-12(fp)
  8002b8:	10800044 	addi	r2,r2,1
  8002bc:	e0bffd15 	stw	r2,-12(fp)
{
	int j;
	int x = 0;
	int grainsize = 4;
	int g_taskProcessed = 0;
	for (j = 0; j < grainsize; j++)
  8002c0:	e0bffc17 	ldw	r2,-16(fp)
  8002c4:	10800044 	addi	r2,r2,1
  8002c8:	e0bffc15 	stw	r2,-16(fp)
  8002cc:	e0fffc17 	ldw	r3,-16(fp)
  8002d0:	e0bfff17 	ldw	r2,-4(fp)
  8002d4:	18bff716 	blt	r3,r2,8002b4 <__alt_data_end+0xff8002b4>
	{
		g_taskProcessed++;
	}
	return x;
  8002d8:	e0bffe17 	ldw	r2,-8(fp)
}
  8002dc:	e037883a 	mov	sp,fp
  8002e0:	df000017 	ldw	fp,0(sp)
  8002e4:	dec00104 	addi	sp,sp,4
  8002e8:	f800283a 	ret

008002ec <stimulus_in_ISR>:

static void stimulus_in_ISR(void *context, alt_u32 id)
{
  8002ec:	defffd04 	addi	sp,sp,-12
  8002f0:	df000215 	stw	fp,8(sp)
  8002f4:	df000204 	addi	fp,sp,8
  8002f8:	e13ffe15 	stw	r4,-8(fp)
  8002fc:	e17fff15 	stw	r5,-4(fp)
	// Return to Response Out here
	background_count += 1;
  800300:	d0a76017 	ldw	r2,-25216(gp)
  800304:	10800044 	addi	r2,r2,1
  800308:	d0a76015 	stw	r2,-25216(gp)
	IOWR(RESPONSE_OUT_BASE, 0, 1);
  80030c:	00c00044 	movi	r3,1
  800310:	00804034 	movhi	r2,256
  800314:	10843004 	addi	r2,r2,4288
  800318:	10c00035 	stwio	r3,0(r2)
	IOWR(RESPONSE_OUT_BASE, 0, 0);
  80031c:	0007883a 	mov	r3,zero
  800320:	00804034 	movhi	r2,256
  800324:	10843004 	addi	r2,r2,4288
  800328:	10c00035 	stwio	r3,0(r2)
	// clear our interrupt bit here
	IOWR(STIMULUS_IN_BASE, 3, 0x0);
  80032c:	0007883a 	mov	r3,zero
  800330:	00804034 	movhi	r2,256
  800334:	10843704 	addi	r2,r2,4316
  800338:	10c00035 	stwio	r3,0(r2)
}
  80033c:	e037883a 	mov	sp,fp
  800340:	df000017 	ldw	fp,0(sp)
  800344:	dec00104 	addi	sp,sp,4
  800348:	f800283a 	ret

0080034c <main>:

int main()
{
  80034c:	defff604 	addi	sp,sp,-40
  800350:	dfc00915 	stw	ra,36(sp)
  800354:	df000815 	stw	fp,32(sp)
  800358:	df000804 	addi	fp,sp,32
#ifdef interrupt
	alt_irq_register(STIMULUS_IN_IRQ, (void *)0, stimulus_in_ISR);

	IOWR(STIMULUS_IN_BASE, 2, 0x1);
#endif
	IOWR(RESPONSE_OUT_BASE, 4, 1);
  80035c:	00c00044 	movi	r3,1
  800360:	00804034 	movhi	r2,256
  800364:	10843404 	addi	r2,r2,4304
  800368:	10c00035 	stwio	r3,0(r2)
	IOWR(RESPONSE_OUT_BASE, 5, 1);
  80036c:	00c00044 	movi	r3,1
  800370:	00804034 	movhi	r2,256
  800374:	10843504 	addi	r2,r2,4308
  800378:	10c00035 	stwio	r3,0(r2)
	int avg_latency, missed, multi;

	// max period 0xffff
	int period = 1000;
  80037c:	0080fa04 	movi	r2,1000
  800380:	e0bffb15 	stw	r2,-20(fp)
	int pulse_width = period / 2;
  800384:	e0bffb17 	ldw	r2,-20(fp)
  800388:	1006d7fa 	srli	r3,r2,31
  80038c:	1885883a 	add	r2,r3,r2
  800390:	1005d07a 	srai	r2,r2,1
  800394:	e0bffc15 	stw	r2,-16(fp)
	IOWR(EGM_BASE, 2, period);
  800398:	00804034 	movhi	r2,256
  80039c:	10840204 	addi	r2,r2,4104
  8003a0:	e0fffb17 	ldw	r3,-20(fp)
  8003a4:	10c00035 	stwio	r3,0(r2)
	IOWR(EGM_BASE, 3, pulse_width);
  8003a8:	00804034 	movhi	r2,256
  8003ac:	10840304 	addi	r2,r2,4108
  8003b0:	e0fffc17 	ldw	r3,-16(fp)
  8003b4:	10c00035 	stwio	r3,0(r2)
	{
		background();
	}
#endif
#ifdef polling
	int character_timing = -1;
  8003b8:	00bfffc4 	movi	r2,-1
  8003bc:	e0bff915 	stw	r2,-28(fp)
	int i;
	IOWR(EGM_BASE, 0, 1);
  8003c0:	00c00044 	movi	r3,1
  8003c4:	00804034 	movhi	r2,256
  8003c8:	10840004 	addi	r2,r2,4096
  8003cc:	10c00035 	stwio	r3,0(r2)
	while (IORD(STIMULUS_IN_BASE, 0) == 0)
  8003d0:	0001883a 	nop
  8003d4:	00804034 	movhi	r2,256
  8003d8:	10843404 	addi	r2,r2,4304
  8003dc:	10800037 	ldwio	r2,0(r2)
  8003e0:	103ffc26 	beq	r2,zero,8003d4 <__alt_data_end+0xff8003d4>
	{
	}
	IOWR(RESPONSE_OUT_BASE, 0, 1);
  8003e4:	00c00044 	movi	r3,1
  8003e8:	00804034 	movhi	r2,256
  8003ec:	10843004 	addi	r2,r2,4288
  8003f0:	10c00035 	stwio	r3,0(r2)
	IOWR(RESPONSE_OUT_BASE, 0, 0);
  8003f4:	0007883a 	mov	r3,zero
  8003f8:	00804034 	movhi	r2,256
  8003fc:	10843004 	addi	r2,r2,4288
  800400:	10c00035 	stwio	r3,0(r2)
	while (IORD(EGM_BASE, 1))
  800404:	00003706 	br	8004e4 <main+0x198>
	{
		if (character_timing < 0)
  800408:	e0bff917 	ldw	r2,-28(fp)
  80040c:	1000180e 	bge	r2,zero,800470 <main+0x124>
		{
			while (IORD(STIMULUS_IN_BASE, 0) == 0)
  800410:	00000406 	br	800424 <main+0xd8>
			{
				background();
  800414:	08002900 	call	800290 <background>
				background_count += 1;
  800418:	d0a76017 	ldw	r2,-25216(gp)
  80041c:	10800044 	addi	r2,r2,1
  800420:	d0a76015 	stw	r2,-25216(gp)
	IOWR(RESPONSE_OUT_BASE, 0, 0);
	while (IORD(EGM_BASE, 1))
	{
		if (character_timing < 0)
		{
			while (IORD(STIMULUS_IN_BASE, 0) == 0)
  800424:	00804034 	movhi	r2,256
  800428:	10843404 	addi	r2,r2,4304
  80042c:	10800037 	ldwio	r2,0(r2)
  800430:	103ff826 	beq	r2,zero,800414 <__alt_data_end+0xff800414>
			{
				background();
				background_count += 1;
			}
			character_timing = background_count - 1;
  800434:	d0a76017 	ldw	r2,-25216(gp)
  800438:	10bfffc4 	addi	r2,r2,-1
  80043c:	e0bff915 	stw	r2,-28(fp)
			IOWR(STIMULUS_IN_BASE, 0, 0x00);
  800440:	0007883a 	mov	r3,zero
  800444:	00804034 	movhi	r2,256
  800448:	10843404 	addi	r2,r2,4304
  80044c:	10c00035 	stwio	r3,0(r2)
			IOWR(RESPONSE_OUT_BASE, 0, 1);
  800450:	00c00044 	movi	r3,1
  800454:	00804034 	movhi	r2,256
  800458:	10843004 	addi	r2,r2,4288
  80045c:	10c00035 	stwio	r3,0(r2)
			IOWR(RESPONSE_OUT_BASE, 0, 0);
  800460:	0007883a 	mov	r3,zero
  800464:	00804034 	movhi	r2,256
  800468:	10843004 	addi	r2,r2,4288
  80046c:	10c00035 	stwio	r3,0(r2)
		}
		for (i = 0; i < character_timing; i++)
  800470:	e03ffa15 	stw	zero,-24(fp)
  800474:	00000706 	br	800494 <main+0x148>
		{
			background();
  800478:	08002900 	call	800290 <background>
			background_count += 1;
  80047c:	d0a76017 	ldw	r2,-25216(gp)
  800480:	10800044 	addi	r2,r2,1
  800484:	d0a76015 	stw	r2,-25216(gp)
			character_timing = background_count - 1;
			IOWR(STIMULUS_IN_BASE, 0, 0x00);
			IOWR(RESPONSE_OUT_BASE, 0, 1);
			IOWR(RESPONSE_OUT_BASE, 0, 0);
		}
		for (i = 0; i < character_timing; i++)
  800488:	e0bffa17 	ldw	r2,-24(fp)
  80048c:	10800044 	addi	r2,r2,1
  800490:	e0bffa15 	stw	r2,-24(fp)
  800494:	e0fffa17 	ldw	r3,-24(fp)
  800498:	e0bff917 	ldw	r2,-28(fp)
  80049c:	18bff616 	blt	r3,r2,800478 <__alt_data_end+0xff800478>
		{
			background();
			background_count += 1;
		}
		if (IORD(STIMULUS_IN_BASE, 0) == 1)
  8004a0:	00804034 	movhi	r2,256
  8004a4:	10843404 	addi	r2,r2,4304
  8004a8:	10800037 	ldwio	r2,0(r2)
  8004ac:	10800058 	cmpnei	r2,r2,1
  8004b0:	10000c1e 	bne	r2,zero,8004e4 <main+0x198>
		{
			IOWR(STIMULUS_IN_BASE, 0, 0x00);
  8004b4:	0007883a 	mov	r3,zero
  8004b8:	00804034 	movhi	r2,256
  8004bc:	10843404 	addi	r2,r2,4304
  8004c0:	10c00035 	stwio	r3,0(r2)
			IOWR(RESPONSE_OUT_BASE, 0, 1);
  8004c4:	00c00044 	movi	r3,1
  8004c8:	00804034 	movhi	r2,256
  8004cc:	10843004 	addi	r2,r2,4288
  8004d0:	10c00035 	stwio	r3,0(r2)
			IOWR(RESPONSE_OUT_BASE, 0, 0);
  8004d4:	0007883a 	mov	r3,zero
  8004d8:	00804034 	movhi	r2,256
  8004dc:	10843004 	addi	r2,r2,4288
  8004e0:	10c00035 	stwio	r3,0(r2)
	while (IORD(STIMULUS_IN_BASE, 0) == 0)
	{
	}
	IOWR(RESPONSE_OUT_BASE, 0, 1);
	IOWR(RESPONSE_OUT_BASE, 0, 0);
	while (IORD(EGM_BASE, 1))
  8004e4:	00804034 	movhi	r2,256
  8004e8:	10840104 	addi	r2,r2,4100
  8004ec:	10800037 	ldwio	r2,0(r2)
  8004f0:	103fc51e 	bne	r2,zero,800408 <__alt_data_end+0xff800408>
			IOWR(STIMULUS_IN_BASE, 0, 0x00);
			IOWR(RESPONSE_OUT_BASE, 0, 1);
			IOWR(RESPONSE_OUT_BASE, 0, 0);
		}
	}
	printf("character count %d \n", character_timing);
  8004f4:	01002074 	movhi	r4,129
  8004f8:	21025804 	addi	r4,r4,2400
  8004fc:	e17ff917 	ldw	r5,-28(fp)
  800500:	08005ac0 	call	8005ac <printf>
	 *
	 * Remember that our data needs to be:
	 * Output results for each test run:
	 * (PERIOD, PULSE WIDTH, BG TASK CALLS RUN, AVG LATENCY, MISSED and MULTI PULSES (separated by commas))
	 */
	avg_latency = IORD(EGM_BASE, 4);
  800504:	00804034 	movhi	r2,256
  800508:	10840404 	addi	r2,r2,4112
  80050c:	10800037 	ldwio	r2,0(r2)
  800510:	e0bffd15 	stw	r2,-12(fp)
	missed = IORD(EGM_BASE, 5);
  800514:	00804034 	movhi	r2,256
  800518:	10840504 	addi	r2,r2,4116
  80051c:	10800037 	ldwio	r2,0(r2)
  800520:	e0bffe15 	stw	r2,-8(fp)
	multi = IORD(EGM_BASE, 6);
  800524:	00804034 	movhi	r2,256
  800528:	10840604 	addi	r2,r2,4120
  80052c:	10800037 	ldwio	r2,0(r2)
  800530:	e0bfff15 	stw	r2,-4(fp)

	IOWR(EGM_BASE, 0, 0);
  800534:	0007883a 	mov	r3,zero
  800538:	00804034 	movhi	r2,256
  80053c:	10840004 	addi	r2,r2,4096
  800540:	10c00035 	stwio	r3,0(r2)

	printf("done program %d with avg_latency: %d, missed: %d, multi: %d \n", background_count, avg_latency, missed, multi);
  800544:	d0e76017 	ldw	r3,-25216(gp)
  800548:	e0bfff17 	ldw	r2,-4(fp)
  80054c:	d8800015 	stw	r2,0(sp)
  800550:	01002074 	movhi	r4,129
  800554:	21025e04 	addi	r4,r4,2424
  800558:	180b883a 	mov	r5,r3
  80055c:	e1bffd17 	ldw	r6,-12(fp)
  800560:	e1fffe17 	ldw	r7,-8(fp)
  800564:	08005ac0 	call	8005ac <printf>
	return 0;
  800568:	0005883a 	mov	r2,zero
}
  80056c:	e037883a 	mov	sp,fp
  800570:	dfc00117 	ldw	ra,4(sp)
  800574:	df000017 	ldw	fp,0(sp)
  800578:	dec00204 	addi	sp,sp,8
  80057c:	f800283a 	ret

00800580 <_printf_r>:
  800580:	defffd04 	addi	sp,sp,-12
  800584:	dfc00015 	stw	ra,0(sp)
  800588:	d9800115 	stw	r6,4(sp)
  80058c:	d9c00215 	stw	r7,8(sp)
  800590:	280d883a 	mov	r6,r5
  800594:	21400217 	ldw	r5,8(r4)
  800598:	d9c00104 	addi	r7,sp,4
  80059c:	08005e80 	call	8005e8 <___vfprintf_internal_r>
  8005a0:	dfc00017 	ldw	ra,0(sp)
  8005a4:	dec00304 	addi	sp,sp,12
  8005a8:	f800283a 	ret

008005ac <printf>:
  8005ac:	defffc04 	addi	sp,sp,-16
  8005b0:	dfc00015 	stw	ra,0(sp)
  8005b4:	d9400115 	stw	r5,4(sp)
  8005b8:	d9800215 	stw	r6,8(sp)
  8005bc:	d9c00315 	stw	r7,12(sp)
  8005c0:	00802074 	movhi	r2,129
  8005c4:	108b1c04 	addi	r2,r2,11376
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	200b883a 	mov	r5,r4
  8005d0:	d9800104 	addi	r6,sp,4
  8005d4:	11000217 	ldw	r4,8(r2)
  8005d8:	08025380 	call	802538 <__vfprintf_internal>
  8005dc:	dfc00017 	ldw	ra,0(sp)
  8005e0:	dec00404 	addi	sp,sp,16
  8005e4:	f800283a 	ret

008005e8 <___vfprintf_internal_r>:
  8005e8:	deffb604 	addi	sp,sp,-296
  8005ec:	dfc04915 	stw	ra,292(sp)
  8005f0:	ddc04715 	stw	r23,284(sp)
  8005f4:	dd804615 	stw	r22,280(sp)
  8005f8:	282f883a 	mov	r23,r5
  8005fc:	202d883a 	mov	r22,r4
  800600:	d9802a15 	stw	r6,168(sp)
  800604:	d9c02d15 	stw	r7,180(sp)
  800608:	df004815 	stw	fp,288(sp)
  80060c:	dd404515 	stw	r21,276(sp)
  800610:	dd004415 	stw	r20,272(sp)
  800614:	dcc04315 	stw	r19,268(sp)
  800618:	dc804215 	stw	r18,264(sp)
  80061c:	dc404115 	stw	r17,260(sp)
  800620:	dc004015 	stw	r16,256(sp)
  800624:	0804d100 	call	804d10 <_localeconv_r>
  800628:	10800017 	ldw	r2,0(r2)
  80062c:	1009883a 	mov	r4,r2
  800630:	d8803515 	stw	r2,212(sp)
  800634:	0806c300 	call	806c30 <strlen>
  800638:	d8803815 	stw	r2,224(sp)
  80063c:	b0000226 	beq	r22,zero,800648 <___vfprintf_internal_r+0x60>
  800640:	b0800e17 	ldw	r2,56(r22)
  800644:	1000e126 	beq	r2,zero,8009cc <___vfprintf_internal_r+0x3e4>
  800648:	b880030b 	ldhu	r2,12(r23)
  80064c:	10c8000c 	andi	r3,r2,8192
  800650:	1800061e 	bne	r3,zero,80066c <___vfprintf_internal_r+0x84>
  800654:	b9001917 	ldw	r4,100(r23)
  800658:	00f7ffc4 	movi	r3,-8193
  80065c:	10880014 	ori	r2,r2,8192
  800660:	20c6703a 	and	r3,r4,r3
  800664:	b880030d 	sth	r2,12(r23)
  800668:	b8c01915 	stw	r3,100(r23)
  80066c:	10c0020c 	andi	r3,r2,8
  800670:	1800a726 	beq	r3,zero,800910 <___vfprintf_internal_r+0x328>
  800674:	b8c00417 	ldw	r3,16(r23)
  800678:	1800a526 	beq	r3,zero,800910 <___vfprintf_internal_r+0x328>
  80067c:	1080068c 	andi	r2,r2,26
  800680:	00c00284 	movi	r3,10
  800684:	10c0aa26 	beq	r2,r3,800930 <___vfprintf_internal_r+0x348>
  800688:	dac01e04 	addi	r11,sp,120
  80068c:	db001dc4 	addi	r12,sp,119
  800690:	d8800404 	addi	r2,sp,16
  800694:	05002074 	movhi	r20,129
  800698:	dac02815 	stw	r11,160(sp)
  80069c:	5b17c83a 	sub	r11,r11,r12
  8006a0:	a5027e84 	addi	r20,r20,2554
  8006a4:	db002915 	stw	r12,164(sp)
  8006a8:	d8801e15 	stw	r2,120(sp)
  8006ac:	d8002015 	stw	zero,128(sp)
  8006b0:	d8001f15 	stw	zero,124(sp)
  8006b4:	d8003315 	stw	zero,204(sp)
  8006b8:	d8003715 	stw	zero,220(sp)
  8006bc:	d8003915 	stw	zero,228(sp)
  8006c0:	1011883a 	mov	r8,r2
  8006c4:	d8003b15 	stw	zero,236(sp)
  8006c8:	d8003a15 	stw	zero,232(sp)
  8006cc:	d8002f15 	stw	zero,188(sp)
  8006d0:	dac03c15 	stw	r11,240(sp)
  8006d4:	db002a17 	ldw	r12,168(sp)
  8006d8:	60800007 	ldb	r2,0(r12)
  8006dc:	1000be26 	beq	r2,zero,8009d8 <___vfprintf_internal_r+0x3f0>
  8006e0:	00c00944 	movi	r3,37
  8006e4:	10c0bc26 	beq	r2,r3,8009d8 <___vfprintf_internal_r+0x3f0>
  8006e8:	6021883a 	mov	r16,r12
  8006ec:	00000106 	br	8006f4 <___vfprintf_internal_r+0x10c>
  8006f0:	10c08426 	beq	r2,r3,800904 <___vfprintf_internal_r+0x31c>
  8006f4:	84000044 	addi	r16,r16,1
  8006f8:	80800007 	ldb	r2,0(r16)
  8006fc:	103ffc1e 	bne	r2,zero,8006f0 <__alt_data_end+0xff8006f0>
  800700:	dac02a17 	ldw	r11,168(sp)
  800704:	82e3c83a 	sub	r17,r16,r11
  800708:	88000f26 	beq	r17,zero,800748 <___vfprintf_internal_r+0x160>
  80070c:	d8c02017 	ldw	r3,128(sp)
  800710:	d8801f17 	ldw	r2,124(sp)
  800714:	dac02a17 	ldw	r11,168(sp)
  800718:	1c47883a 	add	r3,r3,r17
  80071c:	10800044 	addi	r2,r2,1
  800720:	d8c02015 	stw	r3,128(sp)
  800724:	42c00015 	stw	r11,0(r8)
  800728:	44400115 	stw	r17,4(r8)
  80072c:	d8801f15 	stw	r2,124(sp)
  800730:	00c001c4 	movi	r3,7
  800734:	18809316 	blt	r3,r2,800984 <___vfprintf_internal_r+0x39c>
  800738:	42000204 	addi	r8,r8,8
  80073c:	db002f17 	ldw	r12,188(sp)
  800740:	6459883a 	add	r12,r12,r17
  800744:	db002f15 	stw	r12,188(sp)
  800748:	80800007 	ldb	r2,0(r16)
  80074c:	10009426 	beq	r2,zero,8009a0 <___vfprintf_internal_r+0x3b8>
  800750:	80800044 	addi	r2,r16,1
  800754:	84000047 	ldb	r16,1(r16)
  800758:	d8002785 	stb	zero,158(sp)
  80075c:	000d883a 	mov	r6,zero
  800760:	027fffc4 	movi	r9,-1
  800764:	d8002e15 	stw	zero,184(sp)
  800768:	0023883a 	mov	r17,zero
  80076c:	01001604 	movi	r4,88
  800770:	01400244 	movi	r5,9
  800774:	02800a84 	movi	r10,42
  800778:	01c01b04 	movi	r7,108
  80077c:	10c00044 	addi	r3,r2,1
  800780:	80bff804 	addi	r2,r16,-32
  800784:	2082cd36 	bltu	r4,r2,8012bc <___vfprintf_internal_r+0xcd4>
  800788:	100490ba 	slli	r2,r2,2
  80078c:	02c02034 	movhi	r11,128
  800790:	5ac1e804 	addi	r11,r11,1952
  800794:	12c5883a 	add	r2,r2,r11
  800798:	10800017 	ldw	r2,0(r2)
  80079c:	1000683a 	jmp	r2
  8007a0:	008010d4 	movui	r2,67
  8007a4:	008012bc 	xorhi	r2,zero,74
  8007a8:	008012bc 	xorhi	r2,zero,74
  8007ac:	00801224 	muli	r2,zero,72
  8007b0:	008012bc 	xorhi	r2,zero,74
  8007b4:	008012bc 	xorhi	r2,zero,74
  8007b8:	008012bc 	xorhi	r2,zero,74
  8007bc:	008012bc 	xorhi	r2,zero,74
  8007c0:	008012bc 	xorhi	r2,zero,74
  8007c4:	008012bc 	xorhi	r2,zero,74
  8007c8:	008010f4 	movhi	r2,67
  8007cc:	00801120 	cmpeqi	r2,zero,68
  8007d0:	008012bc 	xorhi	r2,zero,74
  8007d4:	008009e0 	cmpeqi	r2,zero,39
  8007d8:	008009f0 	cmpltui	r2,zero,39
  8007dc:	008012bc 	xorhi	r2,zero,74
  8007e0:	00800a30 	cmpltui	r2,zero,40
  8007e4:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  8007e8:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  8007ec:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  8007f0:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  8007f4:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  8007f8:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  8007fc:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  800800:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  800804:	00800a40 	call	800a4 <__alt_mem_sdram_0-0x77ff5c>
  800808:	008012bc 	xorhi	r2,zero,74
  80080c:	008012bc 	xorhi	r2,zero,74
  800810:	008012bc 	xorhi	r2,zero,74
  800814:	008012bc 	xorhi	r2,zero,74
  800818:	008012bc 	xorhi	r2,zero,74
  80081c:	008012bc 	xorhi	r2,zero,74
  800820:	008012bc 	xorhi	r2,zero,74
  800824:	008012bc 	xorhi	r2,zero,74
  800828:	008012bc 	xorhi	r2,zero,74
  80082c:	008012bc 	xorhi	r2,zero,74
  800830:	00800a74 	movhi	r2,41
  800834:	00800ee4 	muli	r2,zero,59
  800838:	008012bc 	xorhi	r2,zero,74
  80083c:	00800ee4 	muli	r2,zero,59
  800840:	008012bc 	xorhi	r2,zero,74
  800844:	008012bc 	xorhi	r2,zero,74
  800848:	008012bc 	xorhi	r2,zero,74
  80084c:	008012bc 	xorhi	r2,zero,74
  800850:	00800fd0 	cmplti	r2,zero,63
  800854:	008012bc 	xorhi	r2,zero,74
  800858:	008012bc 	xorhi	r2,zero,74
  80085c:	00800e78 	rdprs	r2,zero,57
  800860:	008012bc 	xorhi	r2,zero,74
  800864:	008012bc 	xorhi	r2,zero,74
  800868:	008012bc 	xorhi	r2,zero,74
  80086c:	008012bc 	xorhi	r2,zero,74
  800870:	008012bc 	xorhi	r2,zero,74
  800874:	00800eb4 	movhi	r2,58
  800878:	008012bc 	xorhi	r2,zero,74
  80087c:	008012bc 	xorhi	r2,zero,74
  800880:	00801078 	rdprs	r2,zero,65
  800884:	008012bc 	xorhi	r2,zero,74
  800888:	008012bc 	xorhi	r2,zero,74
  80088c:	008012bc 	xorhi	r2,zero,74
  800890:	008012bc 	xorhi	r2,zero,74
  800894:	008012bc 	xorhi	r2,zero,74
  800898:	008012bc 	xorhi	r2,zero,74
  80089c:	008012bc 	xorhi	r2,zero,74
  8008a0:	008012bc 	xorhi	r2,zero,74
  8008a4:	008012bc 	xorhi	r2,zero,74
  8008a8:	008012bc 	xorhi	r2,zero,74
  8008ac:	00801130 	cmpltui	r2,zero,68
  8008b0:	00800fe0 	cmpeqi	r2,zero,63
  8008b4:	00800ee4 	muli	r2,zero,59
  8008b8:	00800ee4 	muli	r2,zero,59
  8008bc:	00800ee4 	muli	r2,zero,59
  8008c0:	00801020 	cmpeqi	r2,zero,64
  8008c4:	00800fe0 	cmpeqi	r2,zero,63
  8008c8:	008012bc 	xorhi	r2,zero,74
  8008cc:	008012bc 	xorhi	r2,zero,74
  8008d0:	00801030 	cmpltui	r2,zero,64
  8008d4:	008012bc 	xorhi	r2,zero,74
  8008d8:	00801044 	movi	r2,65
  8008dc:	00801280 	call	80128 <__alt_mem_sdram_0-0x77fed8>
  8008e0:	00800f88 	cmpgei	r2,zero,62
  8008e4:	00801234 	movhi	r2,72
  8008e8:	008012bc 	xorhi	r2,zero,74
  8008ec:	00801170 	cmpltui	r2,zero,69
  8008f0:	008012bc 	xorhi	r2,zero,74
  8008f4:	00801244 	movi	r2,73
  8008f8:	008012bc 	xorhi	r2,zero,74
  8008fc:	008012bc 	xorhi	r2,zero,74
  800900:	008011e4 	muli	r2,zero,71
  800904:	db002a17 	ldw	r12,168(sp)
  800908:	8323c83a 	sub	r17,r16,r12
  80090c:	003f7e06 	br	800708 <__alt_data_end+0xff800708>
  800910:	b009883a 	mov	r4,r22
  800914:	b80b883a 	mov	r5,r23
  800918:	08026180 	call	802618 <__swsetup_r>
  80091c:	10000c1e 	bne	r2,zero,800950 <___vfprintf_internal_r+0x368>
  800920:	b880030b 	ldhu	r2,12(r23)
  800924:	00c00284 	movi	r3,10
  800928:	1080068c 	andi	r2,r2,26
  80092c:	10ff561e 	bne	r2,r3,800688 <__alt_data_end+0xff800688>
  800930:	b880038f 	ldh	r2,14(r23)
  800934:	103f5416 	blt	r2,zero,800688 <__alt_data_end+0xff800688>
  800938:	d9802a17 	ldw	r6,168(sp)
  80093c:	d9c02d17 	ldw	r7,180(sp)
  800940:	b009883a 	mov	r4,r22
  800944:	b80b883a 	mov	r5,r23
  800948:	080255c0 	call	80255c <__sbprintf>
  80094c:	00000106 	br	800954 <___vfprintf_internal_r+0x36c>
  800950:	00bfffc4 	movi	r2,-1
  800954:	dfc04917 	ldw	ra,292(sp)
  800958:	df004817 	ldw	fp,288(sp)
  80095c:	ddc04717 	ldw	r23,284(sp)
  800960:	dd804617 	ldw	r22,280(sp)
  800964:	dd404517 	ldw	r21,276(sp)
  800968:	dd004417 	ldw	r20,272(sp)
  80096c:	dcc04317 	ldw	r19,268(sp)
  800970:	dc804217 	ldw	r18,264(sp)
  800974:	dc404117 	ldw	r17,260(sp)
  800978:	dc004017 	ldw	r16,256(sp)
  80097c:	dec04a04 	addi	sp,sp,296
  800980:	f800283a 	ret
  800984:	b009883a 	mov	r4,r22
  800988:	b80b883a 	mov	r5,r23
  80098c:	d9801e04 	addi	r6,sp,120
  800990:	0806dc40 	call	806dc4 <__sprint_r>
  800994:	1000081e 	bne	r2,zero,8009b8 <___vfprintf_internal_r+0x3d0>
  800998:	da000404 	addi	r8,sp,16
  80099c:	003f6706 	br	80073c <__alt_data_end+0xff80073c>
  8009a0:	d8802017 	ldw	r2,128(sp)
  8009a4:	10000426 	beq	r2,zero,8009b8 <___vfprintf_internal_r+0x3d0>
  8009a8:	b009883a 	mov	r4,r22
  8009ac:	b80b883a 	mov	r5,r23
  8009b0:	d9801e04 	addi	r6,sp,120
  8009b4:	0806dc40 	call	806dc4 <__sprint_r>
  8009b8:	b880030b 	ldhu	r2,12(r23)
  8009bc:	1080100c 	andi	r2,r2,64
  8009c0:	103fe31e 	bne	r2,zero,800950 <__alt_data_end+0xff800950>
  8009c4:	d8802f17 	ldw	r2,188(sp)
  8009c8:	003fe206 	br	800954 <__alt_data_end+0xff800954>
  8009cc:	b009883a 	mov	r4,r22
  8009d0:	08046780 	call	804678 <__sinit>
  8009d4:	003f1c06 	br	800648 <__alt_data_end+0xff800648>
  8009d8:	dc002a17 	ldw	r16,168(sp)
  8009dc:	003f5a06 	br	800748 <__alt_data_end+0xff800748>
  8009e0:	1805883a 	mov	r2,r3
  8009e4:	8c400114 	ori	r17,r17,4
  8009e8:	1c000007 	ldb	r16,0(r3)
  8009ec:	003f6306 	br	80077c <__alt_data_end+0xff80077c>
  8009f0:	1c000007 	ldb	r16,0(r3)
  8009f4:	18800044 	addi	r2,r3,1
  8009f8:	8286ad26 	beq	r16,r10,8024b0 <___vfprintf_internal_r+0x1ec8>
  8009fc:	82fff404 	addi	r11,r16,-48
  800a00:	1007883a 	mov	r3,r2
  800a04:	0013883a 	mov	r9,zero
  800a08:	2aff5d36 	bltu	r5,r11,800780 <__alt_data_end+0xff800780>
  800a0c:	1c000007 	ldb	r16,0(r3)
  800a10:	4a4002a4 	muli	r9,r9,10
  800a14:	18c00044 	addi	r3,r3,1
  800a18:	5a53883a 	add	r9,r11,r9
  800a1c:	82fff404 	addi	r11,r16,-48
  800a20:	2afffa2e 	bgeu	r5,r11,800a0c <__alt_data_end+0xff800a0c>
  800a24:	483f560e 	bge	r9,zero,800780 <__alt_data_end+0xff800780>
  800a28:	027fffc4 	movi	r9,-1
  800a2c:	003f5406 	br	800780 <__alt_data_end+0xff800780>
  800a30:	8c402014 	ori	r17,r17,128
  800a34:	1805883a 	mov	r2,r3
  800a38:	1c000007 	ldb	r16,0(r3)
  800a3c:	003f4f06 	br	80077c <__alt_data_end+0xff80077c>
  800a40:	1805883a 	mov	r2,r3
  800a44:	d8002e15 	stw	zero,184(sp)
  800a48:	82fff404 	addi	r11,r16,-48
  800a4c:	0019883a 	mov	r12,zero
  800a50:	14000007 	ldb	r16,0(r2)
  800a54:	630002a4 	muli	r12,r12,10
  800a58:	18c00044 	addi	r3,r3,1
  800a5c:	1805883a 	mov	r2,r3
  800a60:	62d9883a 	add	r12,r12,r11
  800a64:	82fff404 	addi	r11,r16,-48
  800a68:	2afff92e 	bgeu	r5,r11,800a50 <__alt_data_end+0xff800a50>
  800a6c:	db002e15 	stw	r12,184(sp)
  800a70:	003f4306 	br	800780 <__alt_data_end+0xff800780>
  800a74:	8c400414 	ori	r17,r17,16
  800a78:	d8c02a15 	stw	r3,168(sp)
  800a7c:	d9802785 	stb	r6,158(sp)
  800a80:	8880080c 	andi	r2,r17,32
  800a84:	d8c02d17 	ldw	r3,180(sp)
  800a88:	10015a26 	beq	r2,zero,800ff4 <___vfprintf_internal_r+0xa0c>
  800a8c:	db002d17 	ldw	r12,180(sp)
  800a90:	18800117 	ldw	r2,4(r3)
  800a94:	1cc00017 	ldw	r19,0(r3)
  800a98:	63000204 	addi	r12,r12,8
  800a9c:	db002d15 	stw	r12,180(sp)
  800aa0:	1039883a 	mov	fp,r2
  800aa4:	10044516 	blt	r2,zero,801bbc <___vfprintf_internal_r+0x15d4>
  800aa8:	dd402783 	ldbu	r21,158(sp)
  800aac:	da403215 	stw	r9,200(sp)
  800ab0:	00800044 	movi	r2,1
  800ab4:	9f06b03a 	or	r3,r19,fp
  800ab8:	48000216 	blt	r9,zero,800ac4 <___vfprintf_internal_r+0x4dc>
  800abc:	013fdfc4 	movi	r4,-129
  800ac0:	8922703a 	and	r17,r17,r4
  800ac4:	1802071e 	bne	r3,zero,8012e4 <___vfprintf_internal_r+0xcfc>
  800ac8:	4802fa26 	beq	r9,zero,8016b4 <___vfprintf_internal_r+0x10cc>
  800acc:	10803fcc 	andi	r2,r2,255
  800ad0:	00c00044 	movi	r3,1
  800ad4:	10c22926 	beq	r2,r3,80137c <___vfprintf_internal_r+0xd94>
  800ad8:	00c00084 	movi	r3,2
  800adc:	10c31726 	beq	r2,r3,80173c <___vfprintf_internal_r+0x1154>
  800ae0:	d8c01e04 	addi	r3,sp,120
  800ae4:	9808d0fa 	srli	r4,r19,3
  800ae8:	e00a977a 	slli	r5,fp,29
  800aec:	e038d0fa 	srli	fp,fp,3
  800af0:	9cc001cc 	andi	r19,r19,7
  800af4:	98800c04 	addi	r2,r19,48
  800af8:	18ffffc4 	addi	r3,r3,-1
  800afc:	2926b03a 	or	r19,r5,r4
  800b00:	18800005 	stb	r2,0(r3)
  800b04:	9f08b03a 	or	r4,r19,fp
  800b08:	203ff61e 	bne	r4,zero,800ae4 <__alt_data_end+0xff800ae4>
  800b0c:	8900004c 	andi	r4,r17,1
  800b10:	d8c03115 	stw	r3,196(sp)
  800b14:	2003931e 	bne	r4,zero,801964 <___vfprintf_internal_r+0x137c>
  800b18:	dac02817 	ldw	r11,160(sp)
  800b1c:	58e5c83a 	sub	r18,r11,r3
  800b20:	9005883a 	mov	r2,r18
  800b24:	9240010e 	bge	r18,r9,800b2c <___vfprintf_internal_r+0x544>
  800b28:	4805883a 	mov	r2,r9
  800b2c:	d8802b15 	stw	r2,172(sp)
  800b30:	d8003415 	stw	zero,208(sp)
  800b34:	a8803fcc 	andi	r2,r21,255
  800b38:	1080201c 	xori	r2,r2,128
  800b3c:	10bfe004 	addi	r2,r2,-128
  800b40:	10000326 	beq	r2,zero,800b50 <___vfprintf_internal_r+0x568>
  800b44:	db002b17 	ldw	r12,172(sp)
  800b48:	63000044 	addi	r12,r12,1
  800b4c:	db002b15 	stw	r12,172(sp)
  800b50:	88c0008c 	andi	r3,r17,2
  800b54:	d8c02c15 	stw	r3,176(sp)
  800b58:	18000326 	beq	r3,zero,800b68 <___vfprintf_internal_r+0x580>
  800b5c:	dac02b17 	ldw	r11,172(sp)
  800b60:	5ac00084 	addi	r11,r11,2
  800b64:	dac02b15 	stw	r11,172(sp)
  800b68:	8b00210c 	andi	r12,r17,132
  800b6c:	db003015 	stw	r12,192(sp)
  800b70:	6001da1e 	bne	r12,zero,8012dc <___vfprintf_internal_r+0xcf4>
  800b74:	dac02e17 	ldw	r11,184(sp)
  800b78:	db002b17 	ldw	r12,172(sp)
  800b7c:	5b39c83a 	sub	fp,r11,r12
  800b80:	0701d60e 	bge	zero,fp,8012dc <___vfprintf_internal_r+0xcf4>
  800b84:	02400404 	movi	r9,16
  800b88:	d8c02017 	ldw	r3,128(sp)
  800b8c:	d8801f17 	ldw	r2,124(sp)
  800b90:	4f053c0e 	bge	r9,fp,802084 <___vfprintf_internal_r+0x1a9c>
  800b94:	01402074 	movhi	r5,129
  800b98:	29428284 	addi	r5,r5,2570
  800b9c:	d9403615 	stw	r5,216(sp)
  800ba0:	482b883a 	mov	r21,r9
  800ba4:	04c001c4 	movi	r19,7
  800ba8:	00000306 	br	800bb8 <___vfprintf_internal_r+0x5d0>
  800bac:	e73ffc04 	addi	fp,fp,-16
  800bb0:	42000204 	addi	r8,r8,8
  800bb4:	af00130e 	bge	r21,fp,800c04 <___vfprintf_internal_r+0x61c>
  800bb8:	02c02074 	movhi	r11,129
  800bbc:	18c00404 	addi	r3,r3,16
  800bc0:	10800044 	addi	r2,r2,1
  800bc4:	5ac28284 	addi	r11,r11,2570
  800bc8:	42c00015 	stw	r11,0(r8)
  800bcc:	45400115 	stw	r21,4(r8)
  800bd0:	d8c02015 	stw	r3,128(sp)
  800bd4:	d8801f15 	stw	r2,124(sp)
  800bd8:	98bff40e 	bge	r19,r2,800bac <__alt_data_end+0xff800bac>
  800bdc:	b009883a 	mov	r4,r22
  800be0:	b80b883a 	mov	r5,r23
  800be4:	d9801e04 	addi	r6,sp,120
  800be8:	0806dc40 	call	806dc4 <__sprint_r>
  800bec:	103f721e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  800bf0:	e73ffc04 	addi	fp,fp,-16
  800bf4:	d8c02017 	ldw	r3,128(sp)
  800bf8:	d8801f17 	ldw	r2,124(sp)
  800bfc:	da000404 	addi	r8,sp,16
  800c00:	af3fed16 	blt	r21,fp,800bb8 <__alt_data_end+0xff800bb8>
  800c04:	db003617 	ldw	r12,216(sp)
  800c08:	e0c7883a 	add	r3,fp,r3
  800c0c:	10800044 	addi	r2,r2,1
  800c10:	43000015 	stw	r12,0(r8)
  800c14:	47000115 	stw	fp,4(r8)
  800c18:	d8c02015 	stw	r3,128(sp)
  800c1c:	d8801f15 	stw	r2,124(sp)
  800c20:	010001c4 	movi	r4,7
  800c24:	20830e16 	blt	r4,r2,801860 <___vfprintf_internal_r+0x1278>
  800c28:	d8802787 	ldb	r2,158(sp)
  800c2c:	42000204 	addi	r8,r8,8
  800c30:	10000c26 	beq	r2,zero,800c64 <___vfprintf_internal_r+0x67c>
  800c34:	d8801f17 	ldw	r2,124(sp)
  800c38:	d9002784 	addi	r4,sp,158
  800c3c:	18c00044 	addi	r3,r3,1
  800c40:	10800044 	addi	r2,r2,1
  800c44:	41000015 	stw	r4,0(r8)
  800c48:	01000044 	movi	r4,1
  800c4c:	41000115 	stw	r4,4(r8)
  800c50:	d8c02015 	stw	r3,128(sp)
  800c54:	d8801f15 	stw	r2,124(sp)
  800c58:	010001c4 	movi	r4,7
  800c5c:	2082a716 	blt	r4,r2,8016fc <___vfprintf_internal_r+0x1114>
  800c60:	42000204 	addi	r8,r8,8
  800c64:	dac02c17 	ldw	r11,176(sp)
  800c68:	58000c26 	beq	r11,zero,800c9c <___vfprintf_internal_r+0x6b4>
  800c6c:	d8801f17 	ldw	r2,124(sp)
  800c70:	d9002704 	addi	r4,sp,156
  800c74:	18c00084 	addi	r3,r3,2
  800c78:	10800044 	addi	r2,r2,1
  800c7c:	41000015 	stw	r4,0(r8)
  800c80:	01000084 	movi	r4,2
  800c84:	41000115 	stw	r4,4(r8)
  800c88:	d8c02015 	stw	r3,128(sp)
  800c8c:	d8801f15 	stw	r2,124(sp)
  800c90:	010001c4 	movi	r4,7
  800c94:	2082a116 	blt	r4,r2,80171c <___vfprintf_internal_r+0x1134>
  800c98:	42000204 	addi	r8,r8,8
  800c9c:	db003017 	ldw	r12,192(sp)
  800ca0:	00802004 	movi	r2,128
  800ca4:	60820326 	beq	r12,r2,8014b4 <___vfprintf_internal_r+0xecc>
  800ca8:	db003217 	ldw	r12,200(sp)
  800cac:	64abc83a 	sub	r21,r12,r18
  800cb0:	0540260e 	bge	zero,r21,800d4c <___vfprintf_internal_r+0x764>
  800cb4:	07000404 	movi	fp,16
  800cb8:	d8801f17 	ldw	r2,124(sp)
  800cbc:	e544570e 	bge	fp,r21,801e1c <___vfprintf_internal_r+0x1834>
  800cc0:	01402074 	movhi	r5,129
  800cc4:	29427e84 	addi	r5,r5,2554
  800cc8:	d9402c15 	stw	r5,176(sp)
  800ccc:	04c001c4 	movi	r19,7
  800cd0:	00000306 	br	800ce0 <___vfprintf_internal_r+0x6f8>
  800cd4:	ad7ffc04 	addi	r21,r21,-16
  800cd8:	42000204 	addi	r8,r8,8
  800cdc:	e540110e 	bge	fp,r21,800d24 <___vfprintf_internal_r+0x73c>
  800ce0:	18c00404 	addi	r3,r3,16
  800ce4:	10800044 	addi	r2,r2,1
  800ce8:	45000015 	stw	r20,0(r8)
  800cec:	47000115 	stw	fp,4(r8)
  800cf0:	d8c02015 	stw	r3,128(sp)
  800cf4:	d8801f15 	stw	r2,124(sp)
  800cf8:	98bff60e 	bge	r19,r2,800cd4 <__alt_data_end+0xff800cd4>
  800cfc:	b009883a 	mov	r4,r22
  800d00:	b80b883a 	mov	r5,r23
  800d04:	d9801e04 	addi	r6,sp,120
  800d08:	0806dc40 	call	806dc4 <__sprint_r>
  800d0c:	103f2a1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  800d10:	ad7ffc04 	addi	r21,r21,-16
  800d14:	d8c02017 	ldw	r3,128(sp)
  800d18:	d8801f17 	ldw	r2,124(sp)
  800d1c:	da000404 	addi	r8,sp,16
  800d20:	e57fef16 	blt	fp,r21,800ce0 <__alt_data_end+0xff800ce0>
  800d24:	dac02c17 	ldw	r11,176(sp)
  800d28:	1d47883a 	add	r3,r3,r21
  800d2c:	10800044 	addi	r2,r2,1
  800d30:	42c00015 	stw	r11,0(r8)
  800d34:	45400115 	stw	r21,4(r8)
  800d38:	d8c02015 	stw	r3,128(sp)
  800d3c:	d8801f15 	stw	r2,124(sp)
  800d40:	010001c4 	movi	r4,7
  800d44:	20826516 	blt	r4,r2,8016dc <___vfprintf_internal_r+0x10f4>
  800d48:	42000204 	addi	r8,r8,8
  800d4c:	8880400c 	andi	r2,r17,256
  800d50:	1001901e 	bne	r2,zero,801394 <___vfprintf_internal_r+0xdac>
  800d54:	d8801f17 	ldw	r2,124(sp)
  800d58:	db003117 	ldw	r12,196(sp)
  800d5c:	1c87883a 	add	r3,r3,r18
  800d60:	10800044 	addi	r2,r2,1
  800d64:	43000015 	stw	r12,0(r8)
  800d68:	44800115 	stw	r18,4(r8)
  800d6c:	d8c02015 	stw	r3,128(sp)
  800d70:	d8801f15 	stw	r2,124(sp)
  800d74:	010001c4 	movi	r4,7
  800d78:	20824016 	blt	r4,r2,80167c <___vfprintf_internal_r+0x1094>
  800d7c:	42000204 	addi	r8,r8,8
  800d80:	8c40010c 	andi	r17,r17,4
  800d84:	88003126 	beq	r17,zero,800e4c <___vfprintf_internal_r+0x864>
  800d88:	db002e17 	ldw	r12,184(sp)
  800d8c:	dac02b17 	ldw	r11,172(sp)
  800d90:	62e1c83a 	sub	r16,r12,r11
  800d94:	04002d0e 	bge	zero,r16,800e4c <___vfprintf_internal_r+0x864>
  800d98:	04400404 	movi	r17,16
  800d9c:	d8801f17 	ldw	r2,124(sp)
  800da0:	8c05150e 	bge	r17,r16,8021f8 <___vfprintf_internal_r+0x1c10>
  800da4:	01002074 	movhi	r4,129
  800da8:	21028284 	addi	r4,r4,2570
  800dac:	d9003615 	stw	r4,216(sp)
  800db0:	048001c4 	movi	r18,7
  800db4:	00000306 	br	800dc4 <___vfprintf_internal_r+0x7dc>
  800db8:	843ffc04 	addi	r16,r16,-16
  800dbc:	42000204 	addi	r8,r8,8
  800dc0:	8c00130e 	bge	r17,r16,800e10 <___vfprintf_internal_r+0x828>
  800dc4:	01402074 	movhi	r5,129
  800dc8:	18c00404 	addi	r3,r3,16
  800dcc:	10800044 	addi	r2,r2,1
  800dd0:	29428284 	addi	r5,r5,2570
  800dd4:	41400015 	stw	r5,0(r8)
  800dd8:	44400115 	stw	r17,4(r8)
  800ddc:	d8c02015 	stw	r3,128(sp)
  800de0:	d8801f15 	stw	r2,124(sp)
  800de4:	90bff40e 	bge	r18,r2,800db8 <__alt_data_end+0xff800db8>
  800de8:	b009883a 	mov	r4,r22
  800dec:	b80b883a 	mov	r5,r23
  800df0:	d9801e04 	addi	r6,sp,120
  800df4:	0806dc40 	call	806dc4 <__sprint_r>
  800df8:	103eef1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  800dfc:	843ffc04 	addi	r16,r16,-16
  800e00:	d8c02017 	ldw	r3,128(sp)
  800e04:	d8801f17 	ldw	r2,124(sp)
  800e08:	da000404 	addi	r8,sp,16
  800e0c:	8c3fed16 	blt	r17,r16,800dc4 <__alt_data_end+0xff800dc4>
  800e10:	dac03617 	ldw	r11,216(sp)
  800e14:	1c07883a 	add	r3,r3,r16
  800e18:	10800044 	addi	r2,r2,1
  800e1c:	42c00015 	stw	r11,0(r8)
  800e20:	44000115 	stw	r16,4(r8)
  800e24:	d8c02015 	stw	r3,128(sp)
  800e28:	d8801f15 	stw	r2,124(sp)
  800e2c:	010001c4 	movi	r4,7
  800e30:	2080060e 	bge	r4,r2,800e4c <___vfprintf_internal_r+0x864>
  800e34:	b009883a 	mov	r4,r22
  800e38:	b80b883a 	mov	r5,r23
  800e3c:	d9801e04 	addi	r6,sp,120
  800e40:	0806dc40 	call	806dc4 <__sprint_r>
  800e44:	103edc1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  800e48:	d8c02017 	ldw	r3,128(sp)
  800e4c:	d8802b17 	ldw	r2,172(sp)
  800e50:	db002e17 	ldw	r12,184(sp)
  800e54:	1300010e 	bge	r2,r12,800e5c <___vfprintf_internal_r+0x874>
  800e58:	6005883a 	mov	r2,r12
  800e5c:	dac02f17 	ldw	r11,188(sp)
  800e60:	5897883a 	add	r11,r11,r2
  800e64:	dac02f15 	stw	r11,188(sp)
  800e68:	18020c1e 	bne	r3,zero,80169c <___vfprintf_internal_r+0x10b4>
  800e6c:	d8001f15 	stw	zero,124(sp)
  800e70:	da000404 	addi	r8,sp,16
  800e74:	003e1706 	br	8006d4 <__alt_data_end+0xff8006d4>
  800e78:	8c400414 	ori	r17,r17,16
  800e7c:	d8c02a15 	stw	r3,168(sp)
  800e80:	8880080c 	andi	r2,r17,32
  800e84:	10010126 	beq	r2,zero,80128c <___vfprintf_internal_r+0xca4>
  800e88:	db002d17 	ldw	r12,180(sp)
  800e8c:	0005883a 	mov	r2,zero
  800e90:	64c00017 	ldw	r19,0(r12)
  800e94:	67000117 	ldw	fp,4(r12)
  800e98:	63000204 	addi	r12,r12,8
  800e9c:	db002d15 	stw	r12,180(sp)
  800ea0:	9f06b03a 	or	r3,r19,fp
  800ea4:	d8002785 	stb	zero,158(sp)
  800ea8:	da403215 	stw	r9,200(sp)
  800eac:	002b883a 	mov	r21,zero
  800eb0:	003f0106 	br	800ab8 <__alt_data_end+0xff800ab8>
  800eb4:	8c400414 	ori	r17,r17,16
  800eb8:	d8c02a15 	stw	r3,168(sp)
  800ebc:	8880080c 	andi	r2,r17,32
  800ec0:	1000e326 	beq	r2,zero,801250 <___vfprintf_internal_r+0xc68>
  800ec4:	dac02d17 	ldw	r11,180(sp)
  800ec8:	00800044 	movi	r2,1
  800ecc:	5cc00017 	ldw	r19,0(r11)
  800ed0:	5f000117 	ldw	fp,4(r11)
  800ed4:	5ac00204 	addi	r11,r11,8
  800ed8:	dac02d15 	stw	r11,180(sp)
  800edc:	9f06b03a 	or	r3,r19,fp
  800ee0:	003ff006 	br	800ea4 <__alt_data_end+0xff800ea4>
  800ee4:	db002d17 	ldw	r12,180(sp)
  800ee8:	dac02d17 	ldw	r11,180(sp)
  800eec:	d8c02a15 	stw	r3,168(sp)
  800ef0:	63000017 	ldw	r12,0(r12)
  800ef4:	5ac00117 	ldw	r11,4(r11)
  800ef8:	d9802785 	stb	r6,158(sp)
  800efc:	6009883a 	mov	r4,r12
  800f00:	580b883a 	mov	r5,r11
  800f04:	db003715 	stw	r12,220(sp)
  800f08:	da003f15 	stw	r8,252(sp)
  800f0c:	da403e15 	stw	r9,248(sp)
  800f10:	dac03915 	stw	r11,228(sp)
  800f14:	08069880 	call	806988 <__fpclassifyd>
  800f18:	db002d17 	ldw	r12,180(sp)
  800f1c:	04800044 	movi	r18,1
  800f20:	da003f17 	ldw	r8,252(sp)
  800f24:	64c00204 	addi	r19,r12,8
  800f28:	da403e17 	ldw	r9,248(sp)
  800f2c:	d9003717 	ldw	r4,220(sp)
  800f30:	d9403917 	ldw	r5,228(sp)
  800f34:	14832b1e 	bne	r2,r18,801be4 <___vfprintf_internal_r+0x15fc>
  800f38:	000d883a 	mov	r6,zero
  800f3c:	000f883a 	mov	r7,zero
  800f40:	080b5500 	call	80b550 <__ledf2>
  800f44:	da003f17 	ldw	r8,252(sp)
  800f48:	1004b716 	blt	r2,zero,802228 <___vfprintf_internal_r+0x1c40>
  800f4c:	dd402783 	ldbu	r21,158(sp)
  800f50:	008011c4 	movi	r2,71
  800f54:	14040e0e 	bge	r2,r16,801f90 <___vfprintf_internal_r+0x19a8>
  800f58:	00c02074 	movhi	r3,129
  800f5c:	18c26f04 	addi	r3,r3,2492
  800f60:	d8c03115 	stw	r3,196(sp)
  800f64:	02c000c4 	movi	r11,3
  800f68:	00bfdfc4 	movi	r2,-129
  800f6c:	dac02b15 	stw	r11,172(sp)
  800f70:	88a2703a 	and	r17,r17,r2
  800f74:	dcc02d15 	stw	r19,180(sp)
  800f78:	5825883a 	mov	r18,r11
  800f7c:	d8003215 	stw	zero,200(sp)
  800f80:	d8003415 	stw	zero,208(sp)
  800f84:	003eeb06 	br	800b34 <__alt_data_end+0xff800b34>
  800f88:	db002d17 	ldw	r12,180(sp)
  800f8c:	00800c04 	movi	r2,48
  800f90:	d8802705 	stb	r2,156(sp)
  800f94:	64c00017 	ldw	r19,0(r12)
  800f98:	00801e04 	movi	r2,120
  800f9c:	d8802745 	stb	r2,157(sp)
  800fa0:	00802074 	movhi	r2,129
  800fa4:	10827704 	addi	r2,r2,2524
  800fa8:	63000104 	addi	r12,r12,4
  800fac:	d8c02a15 	stw	r3,168(sp)
  800fb0:	d8803b15 	stw	r2,236(sp)
  800fb4:	0039883a 	mov	fp,zero
  800fb8:	8c400094 	ori	r17,r17,2
  800fbc:	db002d15 	stw	r12,180(sp)
  800fc0:	00800084 	movi	r2,2
  800fc4:	04001e04 	movi	r16,120
  800fc8:	9807883a 	mov	r3,r19
  800fcc:	003fb506 	br	800ea4 <__alt_data_end+0xff800ea4>
  800fd0:	8c400214 	ori	r17,r17,8
  800fd4:	1805883a 	mov	r2,r3
  800fd8:	1c000007 	ldb	r16,0(r3)
  800fdc:	003de706 	br	80077c <__alt_data_end+0xff80077c>
  800fe0:	d8c02a15 	stw	r3,168(sp)
  800fe4:	d9802785 	stb	r6,158(sp)
  800fe8:	8880080c 	andi	r2,r17,32
  800fec:	d8c02d17 	ldw	r3,180(sp)
  800ff0:	103ea61e 	bne	r2,zero,800a8c <__alt_data_end+0xff800a8c>
  800ff4:	8880040c 	andi	r2,r17,16
  800ff8:	1002221e 	bne	r2,zero,801884 <___vfprintf_internal_r+0x129c>
  800ffc:	8880100c 	andi	r2,r17,64
  801000:	10022026 	beq	r2,zero,801884 <___vfprintf_internal_r+0x129c>
  801004:	1cc0000f 	ldh	r19,0(r3)
  801008:	db002d17 	ldw	r12,180(sp)
  80100c:	9839d7fa 	srai	fp,r19,31
  801010:	63000104 	addi	r12,r12,4
  801014:	db002d15 	stw	r12,180(sp)
  801018:	e005883a 	mov	r2,fp
  80101c:	003ea106 	br	800aa4 <__alt_data_end+0xff800aa4>
  801020:	8c401014 	ori	r17,r17,64
  801024:	1805883a 	mov	r2,r3
  801028:	1c000007 	ldb	r16,0(r3)
  80102c:	003dd306 	br	80077c <__alt_data_end+0xff80077c>
  801030:	1c000007 	ldb	r16,0(r3)
  801034:	81c3e926 	beq	r16,r7,801fdc <___vfprintf_internal_r+0x19f4>
  801038:	8c400414 	ori	r17,r17,16
  80103c:	1805883a 	mov	r2,r3
  801040:	003dce06 	br	80077c <__alt_data_end+0xff80077c>
  801044:	d8c02a15 	stw	r3,168(sp)
  801048:	d9802785 	stb	r6,158(sp)
  80104c:	8880080c 	andi	r2,r17,32
  801050:	10034726 	beq	r2,zero,801d70 <___vfprintf_internal_r+0x1788>
  801054:	db002d17 	ldw	r12,180(sp)
  801058:	dac02f17 	ldw	r11,188(sp)
  80105c:	60800017 	ldw	r2,0(r12)
  801060:	5807d7fa 	srai	r3,r11,31
  801064:	63000104 	addi	r12,r12,4
  801068:	db002d15 	stw	r12,180(sp)
  80106c:	12c00015 	stw	r11,0(r2)
  801070:	10c00115 	stw	r3,4(r2)
  801074:	003d9706 	br	8006d4 <__alt_data_end+0xff8006d4>
  801078:	03002074 	movhi	r12,129
  80107c:	63027204 	addi	r12,r12,2504
  801080:	d8c02a15 	stw	r3,168(sp)
  801084:	d9802785 	stb	r6,158(sp)
  801088:	db003b15 	stw	r12,236(sp)
  80108c:	88c0080c 	andi	r3,r17,32
  801090:	d8802d17 	ldw	r2,180(sp)
  801094:	18005b26 	beq	r3,zero,801204 <___vfprintf_internal_r+0xc1c>
  801098:	dac02d17 	ldw	r11,180(sp)
  80109c:	14c00017 	ldw	r19,0(r2)
  8010a0:	17000117 	ldw	fp,4(r2)
  8010a4:	5ac00204 	addi	r11,r11,8
  8010a8:	dac02d15 	stw	r11,180(sp)
  8010ac:	8880004c 	andi	r2,r17,1
  8010b0:	10022926 	beq	r2,zero,801958 <___vfprintf_internal_r+0x1370>
  8010b4:	9f06b03a 	or	r3,r19,fp
  8010b8:	18032b26 	beq	r3,zero,801d68 <___vfprintf_internal_r+0x1780>
  8010bc:	00800c04 	movi	r2,48
  8010c0:	d8802705 	stb	r2,156(sp)
  8010c4:	dc002745 	stb	r16,157(sp)
  8010c8:	8c400094 	ori	r17,r17,2
  8010cc:	00800084 	movi	r2,2
  8010d0:	003f7406 	br	800ea4 <__alt_data_end+0xff800ea4>
  8010d4:	30803fcc 	andi	r2,r6,255
  8010d8:	1080201c 	xori	r2,r2,128
  8010dc:	10bfe004 	addi	r2,r2,-128
  8010e0:	1003351e 	bne	r2,zero,801db8 <___vfprintf_internal_r+0x17d0>
  8010e4:	1805883a 	mov	r2,r3
  8010e8:	01800804 	movi	r6,32
  8010ec:	1c000007 	ldb	r16,0(r3)
  8010f0:	003da206 	br	80077c <__alt_data_end+0xff80077c>
  8010f4:	dac02d17 	ldw	r11,180(sp)
  8010f8:	db002d17 	ldw	r12,180(sp)
  8010fc:	5ac00017 	ldw	r11,0(r11)
  801100:	dac02e15 	stw	r11,184(sp)
  801104:	62c00104 	addi	r11,r12,4
  801108:	db002e17 	ldw	r12,184(sp)
  80110c:	6003ad16 	blt	r12,zero,801fc4 <___vfprintf_internal_r+0x19dc>
  801110:	dac02d15 	stw	r11,180(sp)
  801114:	1805883a 	mov	r2,r3
  801118:	1c000007 	ldb	r16,0(r3)
  80111c:	003d9706 	br	80077c <__alt_data_end+0xff80077c>
  801120:	1805883a 	mov	r2,r3
  801124:	01800ac4 	movi	r6,43
  801128:	1c000007 	ldb	r16,0(r3)
  80112c:	003d9306 	br	80077c <__alt_data_end+0xff80077c>
  801130:	db002d17 	ldw	r12,180(sp)
  801134:	d8c02a15 	stw	r3,168(sp)
  801138:	00c00044 	movi	r3,1
  80113c:	60800017 	ldw	r2,0(r12)
  801140:	63000104 	addi	r12,r12,4
  801144:	d8c02b15 	stw	r3,172(sp)
  801148:	d8002785 	stb	zero,158(sp)
  80114c:	d8801405 	stb	r2,80(sp)
  801150:	db002d15 	stw	r12,180(sp)
  801154:	dac01404 	addi	r11,sp,80
  801158:	1825883a 	mov	r18,r3
  80115c:	d8003215 	stw	zero,200(sp)
  801160:	d8003415 	stw	zero,208(sp)
  801164:	dac03115 	stw	r11,196(sp)
  801168:	0005883a 	mov	r2,zero
  80116c:	003e7806 	br	800b50 <__alt_data_end+0xff800b50>
  801170:	dac02d17 	ldw	r11,180(sp)
  801174:	db002d17 	ldw	r12,180(sp)
  801178:	d8c02a15 	stw	r3,168(sp)
  80117c:	5ac00017 	ldw	r11,0(r11)
  801180:	d8002785 	stb	zero,158(sp)
  801184:	64c00104 	addi	r19,r12,4
  801188:	dac03115 	stw	r11,196(sp)
  80118c:	5803fe26 	beq	r11,zero,802188 <___vfprintf_internal_r+0x1ba0>
  801190:	d9003117 	ldw	r4,196(sp)
  801194:	4803b416 	blt	r9,zero,802068 <___vfprintf_internal_r+0x1a80>
  801198:	480d883a 	mov	r6,r9
  80119c:	000b883a 	mov	r5,zero
  8011a0:	da003f15 	stw	r8,252(sp)
  8011a4:	da403e15 	stw	r9,248(sp)
  8011a8:	08056a40 	call	8056a4 <memchr>
  8011ac:	da003f17 	ldw	r8,252(sp)
  8011b0:	da403e17 	ldw	r9,248(sp)
  8011b4:	10043026 	beq	r2,zero,802278 <___vfprintf_internal_r+0x1c90>
  8011b8:	d8c03117 	ldw	r3,196(sp)
  8011bc:	10e5c83a 	sub	r18,r2,r3
  8011c0:	4c836b16 	blt	r9,r18,801f70 <___vfprintf_internal_r+0x1988>
  8011c4:	9005883a 	mov	r2,r18
  8011c8:	9003ac16 	blt	r18,zero,80207c <___vfprintf_internal_r+0x1a94>
  8011cc:	dd402783 	ldbu	r21,158(sp)
  8011d0:	d8802b15 	stw	r2,172(sp)
  8011d4:	dcc02d15 	stw	r19,180(sp)
  8011d8:	d8003215 	stw	zero,200(sp)
  8011dc:	d8003415 	stw	zero,208(sp)
  8011e0:	003e5406 	br	800b34 <__alt_data_end+0xff800b34>
  8011e4:	00802074 	movhi	r2,129
  8011e8:	10827704 	addi	r2,r2,2524
  8011ec:	d8c02a15 	stw	r3,168(sp)
  8011f0:	d8803b15 	stw	r2,236(sp)
  8011f4:	d9802785 	stb	r6,158(sp)
  8011f8:	88c0080c 	andi	r3,r17,32
  8011fc:	d8802d17 	ldw	r2,180(sp)
  801200:	183fa51e 	bne	r3,zero,801098 <__alt_data_end+0xff801098>
  801204:	88c0040c 	andi	r3,r17,16
  801208:	1802ee26 	beq	r3,zero,801dc4 <___vfprintf_internal_r+0x17dc>
  80120c:	db002d17 	ldw	r12,180(sp)
  801210:	14c00017 	ldw	r19,0(r2)
  801214:	0039883a 	mov	fp,zero
  801218:	63000104 	addi	r12,r12,4
  80121c:	db002d15 	stw	r12,180(sp)
  801220:	003fa206 	br	8010ac <__alt_data_end+0xff8010ac>
  801224:	8c400054 	ori	r17,r17,1
  801228:	1805883a 	mov	r2,r3
  80122c:	1c000007 	ldb	r16,0(r3)
  801230:	003d5206 	br	80077c <__alt_data_end+0xff80077c>
  801234:	8c400814 	ori	r17,r17,32
  801238:	1805883a 	mov	r2,r3
  80123c:	1c000007 	ldb	r16,0(r3)
  801240:	003d4e06 	br	80077c <__alt_data_end+0xff80077c>
  801244:	d8c02a15 	stw	r3,168(sp)
  801248:	8880080c 	andi	r2,r17,32
  80124c:	103f1d1e 	bne	r2,zero,800ec4 <__alt_data_end+0xff800ec4>
  801250:	8880040c 	andi	r2,r17,16
  801254:	1001b81e 	bne	r2,zero,801938 <___vfprintf_internal_r+0x1350>
  801258:	8880100c 	andi	r2,r17,64
  80125c:	1001b626 	beq	r2,zero,801938 <___vfprintf_internal_r+0x1350>
  801260:	dac02d17 	ldw	r11,180(sp)
  801264:	0039883a 	mov	fp,zero
  801268:	00800044 	movi	r2,1
  80126c:	5cc0000b 	ldhu	r19,0(r11)
  801270:	5ac00104 	addi	r11,r11,4
  801274:	dac02d15 	stw	r11,180(sp)
  801278:	9807883a 	mov	r3,r19
  80127c:	003f0906 	br	800ea4 <__alt_data_end+0xff800ea4>
  801280:	d8c02a15 	stw	r3,168(sp)
  801284:	8880080c 	andi	r2,r17,32
  801288:	103eff1e 	bne	r2,zero,800e88 <__alt_data_end+0xff800e88>
  80128c:	8880040c 	andi	r2,r17,16
  801290:	1001a11e 	bne	r2,zero,801918 <___vfprintf_internal_r+0x1330>
  801294:	8880100c 	andi	r2,r17,64
  801298:	10019f26 	beq	r2,zero,801918 <___vfprintf_internal_r+0x1330>
  80129c:	db002d17 	ldw	r12,180(sp)
  8012a0:	0039883a 	mov	fp,zero
  8012a4:	0005883a 	mov	r2,zero
  8012a8:	64c0000b 	ldhu	r19,0(r12)
  8012ac:	63000104 	addi	r12,r12,4
  8012b0:	db002d15 	stw	r12,180(sp)
  8012b4:	9807883a 	mov	r3,r19
  8012b8:	003efa06 	br	800ea4 <__alt_data_end+0xff800ea4>
  8012bc:	d8c02a15 	stw	r3,168(sp)
  8012c0:	d9802785 	stb	r6,158(sp)
  8012c4:	803db626 	beq	r16,zero,8009a0 <__alt_data_end+0xff8009a0>
  8012c8:	00c00044 	movi	r3,1
  8012cc:	d8c02b15 	stw	r3,172(sp)
  8012d0:	dc001405 	stb	r16,80(sp)
  8012d4:	d8002785 	stb	zero,158(sp)
  8012d8:	003f9e06 	br	801154 <__alt_data_end+0xff801154>
  8012dc:	d8c02017 	ldw	r3,128(sp)
  8012e0:	003e5306 	br	800c30 <__alt_data_end+0xff800c30>
  8012e4:	10803fcc 	andi	r2,r2,255
  8012e8:	00c00044 	movi	r3,1
  8012ec:	10fdfa1e 	bne	r2,r3,800ad8 <__alt_data_end+0xff800ad8>
  8012f0:	e000021e 	bne	fp,zero,8012fc <___vfprintf_internal_r+0xd14>
  8012f4:	00800244 	movi	r2,9
  8012f8:	14c0202e 	bgeu	r2,r19,80137c <___vfprintf_internal_r+0xd94>
  8012fc:	dc002b15 	stw	r16,172(sp)
  801300:	dc402c15 	stw	r17,176(sp)
  801304:	9821883a 	mov	r16,r19
  801308:	e023883a 	mov	r17,fp
  80130c:	dc801e04 	addi	r18,sp,120
  801310:	4827883a 	mov	r19,r9
  801314:	4039883a 	mov	fp,r8
  801318:	8009883a 	mov	r4,r16
  80131c:	880b883a 	mov	r5,r17
  801320:	01800284 	movi	r6,10
  801324:	000f883a 	mov	r7,zero
  801328:	0809bc80 	call	809bc8 <__umoddi3>
  80132c:	10800c04 	addi	r2,r2,48
  801330:	94bfffc4 	addi	r18,r18,-1
  801334:	8009883a 	mov	r4,r16
  801338:	880b883a 	mov	r5,r17
  80133c:	01800284 	movi	r6,10
  801340:	000f883a 	mov	r7,zero
  801344:	90800005 	stb	r2,0(r18)
  801348:	08096080 	call	809608 <__udivdi3>
  80134c:	1021883a 	mov	r16,r2
  801350:	10c4b03a 	or	r2,r2,r3
  801354:	1823883a 	mov	r17,r3
  801358:	103fef1e 	bne	r2,zero,801318 <__alt_data_end+0xff801318>
  80135c:	dac02817 	ldw	r11,160(sp)
  801360:	dc803115 	stw	r18,196(sp)
  801364:	dc002b17 	ldw	r16,172(sp)
  801368:	dc402c17 	ldw	r17,176(sp)
  80136c:	9813883a 	mov	r9,r19
  801370:	e011883a 	mov	r8,fp
  801374:	5ca5c83a 	sub	r18,r11,r18
  801378:	003de906 	br	800b20 <__alt_data_end+0xff800b20>
  80137c:	9cc00c04 	addi	r19,r19,48
  801380:	d8c01dc4 	addi	r3,sp,119
  801384:	dcc01dc5 	stb	r19,119(sp)
  801388:	dc803c17 	ldw	r18,240(sp)
  80138c:	d8c03115 	stw	r3,196(sp)
  801390:	003de306 	br	800b20 <__alt_data_end+0xff800b20>
  801394:	00801944 	movi	r2,101
  801398:	1400710e 	bge	r2,r16,801560 <___vfprintf_internal_r+0xf78>
  80139c:	d9003717 	ldw	r4,220(sp)
  8013a0:	d9403917 	ldw	r5,228(sp)
  8013a4:	000d883a 	mov	r6,zero
  8013a8:	000f883a 	mov	r7,zero
  8013ac:	d8c03d15 	stw	r3,244(sp)
  8013b0:	da003f15 	stw	r8,252(sp)
  8013b4:	080b3ec0 	call	80b3ec <__eqdf2>
  8013b8:	d8c03d17 	ldw	r3,244(sp)
  8013bc:	da003f17 	ldw	r8,252(sp)
  8013c0:	1000ef1e 	bne	r2,zero,801780 <___vfprintf_internal_r+0x1198>
  8013c4:	d8801f17 	ldw	r2,124(sp)
  8013c8:	01002074 	movhi	r4,129
  8013cc:	21027e04 	addi	r4,r4,2552
  8013d0:	18c00044 	addi	r3,r3,1
  8013d4:	10800044 	addi	r2,r2,1
  8013d8:	41000015 	stw	r4,0(r8)
  8013dc:	01000044 	movi	r4,1
  8013e0:	41000115 	stw	r4,4(r8)
  8013e4:	d8c02015 	stw	r3,128(sp)
  8013e8:	d8801f15 	stw	r2,124(sp)
  8013ec:	010001c4 	movi	r4,7
  8013f0:	20828e16 	blt	r4,r2,801e2c <___vfprintf_internal_r+0x1844>
  8013f4:	42000204 	addi	r8,r8,8
  8013f8:	d8802617 	ldw	r2,152(sp)
  8013fc:	dac03317 	ldw	r11,204(sp)
  801400:	12c00216 	blt	r2,r11,80140c <___vfprintf_internal_r+0xe24>
  801404:	8880004c 	andi	r2,r17,1
  801408:	103e5d26 	beq	r2,zero,800d80 <__alt_data_end+0xff800d80>
  80140c:	db003817 	ldw	r12,224(sp)
  801410:	d8801f17 	ldw	r2,124(sp)
  801414:	dac03517 	ldw	r11,212(sp)
  801418:	1b07883a 	add	r3,r3,r12
  80141c:	10800044 	addi	r2,r2,1
  801420:	42c00015 	stw	r11,0(r8)
  801424:	43000115 	stw	r12,4(r8)
  801428:	d8c02015 	stw	r3,128(sp)
  80142c:	d8801f15 	stw	r2,124(sp)
  801430:	010001c4 	movi	r4,7
  801434:	2082ed16 	blt	r4,r2,801fec <___vfprintf_internal_r+0x1a04>
  801438:	42000204 	addi	r8,r8,8
  80143c:	db003317 	ldw	r12,204(sp)
  801440:	643fffc4 	addi	r16,r12,-1
  801444:	043e4e0e 	bge	zero,r16,800d80 <__alt_data_end+0xff800d80>
  801448:	04800404 	movi	r18,16
  80144c:	d8801f17 	ldw	r2,124(sp)
  801450:	94007e0e 	bge	r18,r16,80164c <___vfprintf_internal_r+0x1064>
  801454:	01402074 	movhi	r5,129
  801458:	29427e84 	addi	r5,r5,2554
  80145c:	d9402c15 	stw	r5,176(sp)
  801460:	054001c4 	movi	r21,7
  801464:	00000306 	br	801474 <___vfprintf_internal_r+0xe8c>
  801468:	42000204 	addi	r8,r8,8
  80146c:	843ffc04 	addi	r16,r16,-16
  801470:	9400790e 	bge	r18,r16,801658 <___vfprintf_internal_r+0x1070>
  801474:	18c00404 	addi	r3,r3,16
  801478:	10800044 	addi	r2,r2,1
  80147c:	45000015 	stw	r20,0(r8)
  801480:	44800115 	stw	r18,4(r8)
  801484:	d8c02015 	stw	r3,128(sp)
  801488:	d8801f15 	stw	r2,124(sp)
  80148c:	a8bff60e 	bge	r21,r2,801468 <__alt_data_end+0xff801468>
  801490:	b009883a 	mov	r4,r22
  801494:	b80b883a 	mov	r5,r23
  801498:	d9801e04 	addi	r6,sp,120
  80149c:	0806dc40 	call	806dc4 <__sprint_r>
  8014a0:	103d451e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  8014a4:	d8c02017 	ldw	r3,128(sp)
  8014a8:	d8801f17 	ldw	r2,124(sp)
  8014ac:	da000404 	addi	r8,sp,16
  8014b0:	003fee06 	br	80146c <__alt_data_end+0xff80146c>
  8014b4:	dac02e17 	ldw	r11,184(sp)
  8014b8:	db002b17 	ldw	r12,172(sp)
  8014bc:	5b2bc83a 	sub	r21,r11,r12
  8014c0:	057df90e 	bge	zero,r21,800ca8 <__alt_data_end+0xff800ca8>
  8014c4:	07000404 	movi	fp,16
  8014c8:	d8801f17 	ldw	r2,124(sp)
  8014cc:	e543640e 	bge	fp,r21,802260 <___vfprintf_internal_r+0x1c78>
  8014d0:	01402074 	movhi	r5,129
  8014d4:	29427e84 	addi	r5,r5,2554
  8014d8:	d9402c15 	stw	r5,176(sp)
  8014dc:	04c001c4 	movi	r19,7
  8014e0:	00000306 	br	8014f0 <___vfprintf_internal_r+0xf08>
  8014e4:	ad7ffc04 	addi	r21,r21,-16
  8014e8:	42000204 	addi	r8,r8,8
  8014ec:	e540110e 	bge	fp,r21,801534 <___vfprintf_internal_r+0xf4c>
  8014f0:	18c00404 	addi	r3,r3,16
  8014f4:	10800044 	addi	r2,r2,1
  8014f8:	45000015 	stw	r20,0(r8)
  8014fc:	47000115 	stw	fp,4(r8)
  801500:	d8c02015 	stw	r3,128(sp)
  801504:	d8801f15 	stw	r2,124(sp)
  801508:	98bff60e 	bge	r19,r2,8014e4 <__alt_data_end+0xff8014e4>
  80150c:	b009883a 	mov	r4,r22
  801510:	b80b883a 	mov	r5,r23
  801514:	d9801e04 	addi	r6,sp,120
  801518:	0806dc40 	call	806dc4 <__sprint_r>
  80151c:	103d261e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801520:	ad7ffc04 	addi	r21,r21,-16
  801524:	d8c02017 	ldw	r3,128(sp)
  801528:	d8801f17 	ldw	r2,124(sp)
  80152c:	da000404 	addi	r8,sp,16
  801530:	e57fef16 	blt	fp,r21,8014f0 <__alt_data_end+0xff8014f0>
  801534:	dac02c17 	ldw	r11,176(sp)
  801538:	1d47883a 	add	r3,r3,r21
  80153c:	10800044 	addi	r2,r2,1
  801540:	42c00015 	stw	r11,0(r8)
  801544:	45400115 	stw	r21,4(r8)
  801548:	d8c02015 	stw	r3,128(sp)
  80154c:	d8801f15 	stw	r2,124(sp)
  801550:	010001c4 	movi	r4,7
  801554:	20819116 	blt	r4,r2,801b9c <___vfprintf_internal_r+0x15b4>
  801558:	42000204 	addi	r8,r8,8
  80155c:	003dd206 	br	800ca8 <__alt_data_end+0xff800ca8>
  801560:	db003317 	ldw	r12,204(sp)
  801564:	00800044 	movi	r2,1
  801568:	18c00044 	addi	r3,r3,1
  80156c:	1301530e 	bge	r2,r12,801abc <___vfprintf_internal_r+0x14d4>
  801570:	dc001f17 	ldw	r16,124(sp)
  801574:	dac03117 	ldw	r11,196(sp)
  801578:	00800044 	movi	r2,1
  80157c:	84000044 	addi	r16,r16,1
  801580:	40800115 	stw	r2,4(r8)
  801584:	42c00015 	stw	r11,0(r8)
  801588:	d8c02015 	stw	r3,128(sp)
  80158c:	dc001f15 	stw	r16,124(sp)
  801590:	008001c4 	movi	r2,7
  801594:	14016b16 	blt	r2,r16,801b44 <___vfprintf_internal_r+0x155c>
  801598:	42000204 	addi	r8,r8,8
  80159c:	db003817 	ldw	r12,224(sp)
  8015a0:	dac03517 	ldw	r11,212(sp)
  8015a4:	84000044 	addi	r16,r16,1
  8015a8:	1b07883a 	add	r3,r3,r12
  8015ac:	42c00015 	stw	r11,0(r8)
  8015b0:	43000115 	stw	r12,4(r8)
  8015b4:	d8c02015 	stw	r3,128(sp)
  8015b8:	dc001f15 	stw	r16,124(sp)
  8015bc:	008001c4 	movi	r2,7
  8015c0:	14016916 	blt	r2,r16,801b68 <___vfprintf_internal_r+0x1580>
  8015c4:	44800204 	addi	r18,r8,8
  8015c8:	d9003717 	ldw	r4,220(sp)
  8015cc:	d9403917 	ldw	r5,228(sp)
  8015d0:	000d883a 	mov	r6,zero
  8015d4:	000f883a 	mov	r7,zero
  8015d8:	d8c03d15 	stw	r3,244(sp)
  8015dc:	080b3ec0 	call	80b3ec <__eqdf2>
  8015e0:	d8c03d17 	ldw	r3,244(sp)
  8015e4:	db003317 	ldw	r12,204(sp)
  8015e8:	1000ad26 	beq	r2,zero,8018a0 <___vfprintf_internal_r+0x12b8>
  8015ec:	dac03117 	ldw	r11,196(sp)
  8015f0:	60bfffc4 	addi	r2,r12,-1
  8015f4:	1887883a 	add	r3,r3,r2
  8015f8:	59000044 	addi	r4,r11,1
  8015fc:	84000044 	addi	r16,r16,1
  801600:	90800115 	stw	r2,4(r18)
  801604:	91000015 	stw	r4,0(r18)
  801608:	d8c02015 	stw	r3,128(sp)
  80160c:	dc001f15 	stw	r16,124(sp)
  801610:	008001c4 	movi	r2,7
  801614:	14014216 	blt	r2,r16,801b20 <___vfprintf_internal_r+0x1538>
  801618:	94800204 	addi	r18,r18,8
  80161c:	dac03a17 	ldw	r11,232(sp)
  801620:	dd4022c4 	addi	r21,sp,139
  801624:	84000044 	addi	r16,r16,1
  801628:	1ac7883a 	add	r3,r3,r11
  80162c:	95400015 	stw	r21,0(r18)
  801630:	92c00115 	stw	r11,4(r18)
  801634:	d8c02015 	stw	r3,128(sp)
  801638:	dc001f15 	stw	r16,124(sp)
  80163c:	008001c4 	movi	r2,7
  801640:	14000e16 	blt	r2,r16,80167c <___vfprintf_internal_r+0x1094>
  801644:	92000204 	addi	r8,r18,8
  801648:	003dcd06 	br	800d80 <__alt_data_end+0xff800d80>
  80164c:	01002074 	movhi	r4,129
  801650:	21027e84 	addi	r4,r4,2554
  801654:	d9002c15 	stw	r4,176(sp)
  801658:	dac02c17 	ldw	r11,176(sp)
  80165c:	1c07883a 	add	r3,r3,r16
  801660:	44000115 	stw	r16,4(r8)
  801664:	42c00015 	stw	r11,0(r8)
  801668:	10800044 	addi	r2,r2,1
  80166c:	d8c02015 	stw	r3,128(sp)
  801670:	d8801f15 	stw	r2,124(sp)
  801674:	010001c4 	movi	r4,7
  801678:	20bdc00e 	bge	r4,r2,800d7c <__alt_data_end+0xff800d7c>
  80167c:	b009883a 	mov	r4,r22
  801680:	b80b883a 	mov	r5,r23
  801684:	d9801e04 	addi	r6,sp,120
  801688:	0806dc40 	call	806dc4 <__sprint_r>
  80168c:	103cca1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801690:	d8c02017 	ldw	r3,128(sp)
  801694:	da000404 	addi	r8,sp,16
  801698:	003db906 	br	800d80 <__alt_data_end+0xff800d80>
  80169c:	b009883a 	mov	r4,r22
  8016a0:	b80b883a 	mov	r5,r23
  8016a4:	d9801e04 	addi	r6,sp,120
  8016a8:	0806dc40 	call	806dc4 <__sprint_r>
  8016ac:	103def26 	beq	r2,zero,800e6c <__alt_data_end+0xff800e6c>
  8016b0:	003cc106 	br	8009b8 <__alt_data_end+0xff8009b8>
  8016b4:	10803fcc 	andi	r2,r2,255
  8016b8:	1000651e 	bne	r2,zero,801850 <___vfprintf_internal_r+0x1268>
  8016bc:	8880004c 	andi	r2,r17,1
  8016c0:	10013226 	beq	r2,zero,801b8c <___vfprintf_internal_r+0x15a4>
  8016c4:	00800c04 	movi	r2,48
  8016c8:	d8c01dc4 	addi	r3,sp,119
  8016cc:	d8801dc5 	stb	r2,119(sp)
  8016d0:	dc803c17 	ldw	r18,240(sp)
  8016d4:	d8c03115 	stw	r3,196(sp)
  8016d8:	003d1106 	br	800b20 <__alt_data_end+0xff800b20>
  8016dc:	b009883a 	mov	r4,r22
  8016e0:	b80b883a 	mov	r5,r23
  8016e4:	d9801e04 	addi	r6,sp,120
  8016e8:	0806dc40 	call	806dc4 <__sprint_r>
  8016ec:	103cb21e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  8016f0:	d8c02017 	ldw	r3,128(sp)
  8016f4:	da000404 	addi	r8,sp,16
  8016f8:	003d9406 	br	800d4c <__alt_data_end+0xff800d4c>
  8016fc:	b009883a 	mov	r4,r22
  801700:	b80b883a 	mov	r5,r23
  801704:	d9801e04 	addi	r6,sp,120
  801708:	0806dc40 	call	806dc4 <__sprint_r>
  80170c:	103caa1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801710:	d8c02017 	ldw	r3,128(sp)
  801714:	da000404 	addi	r8,sp,16
  801718:	003d5206 	br	800c64 <__alt_data_end+0xff800c64>
  80171c:	b009883a 	mov	r4,r22
  801720:	b80b883a 	mov	r5,r23
  801724:	d9801e04 	addi	r6,sp,120
  801728:	0806dc40 	call	806dc4 <__sprint_r>
  80172c:	103ca21e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801730:	d8c02017 	ldw	r3,128(sp)
  801734:	da000404 	addi	r8,sp,16
  801738:	003d5806 	br	800c9c <__alt_data_end+0xff800c9c>
  80173c:	d9403b17 	ldw	r5,236(sp)
  801740:	d8c01e04 	addi	r3,sp,120
  801744:	988003cc 	andi	r2,r19,15
  801748:	e008973a 	slli	r4,fp,28
  80174c:	2885883a 	add	r2,r5,r2
  801750:	9826d13a 	srli	r19,r19,4
  801754:	10800003 	ldbu	r2,0(r2)
  801758:	e038d13a 	srli	fp,fp,4
  80175c:	18ffffc4 	addi	r3,r3,-1
  801760:	24e6b03a 	or	r19,r4,r19
  801764:	18800005 	stb	r2,0(r3)
  801768:	9f04b03a 	or	r2,r19,fp
  80176c:	103ff51e 	bne	r2,zero,801744 <__alt_data_end+0xff801744>
  801770:	db002817 	ldw	r12,160(sp)
  801774:	d8c03115 	stw	r3,196(sp)
  801778:	60e5c83a 	sub	r18,r12,r3
  80177c:	003ce806 	br	800b20 <__alt_data_end+0xff800b20>
  801780:	dc002617 	ldw	r16,152(sp)
  801784:	0401b10e 	bge	zero,r16,801e4c <___vfprintf_internal_r+0x1864>
  801788:	db003117 	ldw	r12,196(sp)
  80178c:	dac03317 	ldw	r11,204(sp)
  801790:	62e1883a 	add	r16,r12,r11
  801794:	db003417 	ldw	r12,208(sp)
  801798:	5825883a 	mov	r18,r11
  80179c:	62c0010e 	bge	r12,r11,8017a4 <___vfprintf_internal_r+0x11bc>
  8017a0:	6025883a 	mov	r18,r12
  8017a4:	04800b0e 	bge	zero,r18,8017d4 <___vfprintf_internal_r+0x11ec>
  8017a8:	d8801f17 	ldw	r2,124(sp)
  8017ac:	dac03117 	ldw	r11,196(sp)
  8017b0:	1c87883a 	add	r3,r3,r18
  8017b4:	10800044 	addi	r2,r2,1
  8017b8:	42c00015 	stw	r11,0(r8)
  8017bc:	44800115 	stw	r18,4(r8)
  8017c0:	d8c02015 	stw	r3,128(sp)
  8017c4:	d8801f15 	stw	r2,124(sp)
  8017c8:	010001c4 	movi	r4,7
  8017cc:	20824f16 	blt	r4,r2,80210c <___vfprintf_internal_r+0x1b24>
  8017d0:	42000204 	addi	r8,r8,8
  8017d4:	90024b16 	blt	r18,zero,802104 <___vfprintf_internal_r+0x1b1c>
  8017d8:	db003417 	ldw	r12,208(sp)
  8017dc:	64a5c83a 	sub	r18,r12,r18
  8017e0:	0480730e 	bge	zero,r18,8019b0 <___vfprintf_internal_r+0x13c8>
  8017e4:	05400404 	movi	r21,16
  8017e8:	d8801f17 	ldw	r2,124(sp)
  8017ec:	ac817d0e 	bge	r21,r18,801de4 <___vfprintf_internal_r+0x17fc>
  8017f0:	01402074 	movhi	r5,129
  8017f4:	29427e84 	addi	r5,r5,2554
  8017f8:	d9402c15 	stw	r5,176(sp)
  8017fc:	070001c4 	movi	fp,7
  801800:	00000306 	br	801810 <___vfprintf_internal_r+0x1228>
  801804:	42000204 	addi	r8,r8,8
  801808:	94bffc04 	addi	r18,r18,-16
  80180c:	ac81780e 	bge	r21,r18,801df0 <___vfprintf_internal_r+0x1808>
  801810:	18c00404 	addi	r3,r3,16
  801814:	10800044 	addi	r2,r2,1
  801818:	45000015 	stw	r20,0(r8)
  80181c:	45400115 	stw	r21,4(r8)
  801820:	d8c02015 	stw	r3,128(sp)
  801824:	d8801f15 	stw	r2,124(sp)
  801828:	e0bff60e 	bge	fp,r2,801804 <__alt_data_end+0xff801804>
  80182c:	b009883a 	mov	r4,r22
  801830:	b80b883a 	mov	r5,r23
  801834:	d9801e04 	addi	r6,sp,120
  801838:	0806dc40 	call	806dc4 <__sprint_r>
  80183c:	103c5e1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801840:	d8c02017 	ldw	r3,128(sp)
  801844:	d8801f17 	ldw	r2,124(sp)
  801848:	da000404 	addi	r8,sp,16
  80184c:	003fee06 	br	801808 <__alt_data_end+0xff801808>
  801850:	dac01e04 	addi	r11,sp,120
  801854:	0025883a 	mov	r18,zero
  801858:	dac03115 	stw	r11,196(sp)
  80185c:	003cb006 	br	800b20 <__alt_data_end+0xff800b20>
  801860:	b009883a 	mov	r4,r22
  801864:	b80b883a 	mov	r5,r23
  801868:	d9801e04 	addi	r6,sp,120
  80186c:	0806dc40 	call	806dc4 <__sprint_r>
  801870:	103c511e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801874:	d8c02017 	ldw	r3,128(sp)
  801878:	d8802787 	ldb	r2,158(sp)
  80187c:	da000404 	addi	r8,sp,16
  801880:	003ceb06 	br	800c30 <__alt_data_end+0xff800c30>
  801884:	1cc00017 	ldw	r19,0(r3)
  801888:	dac02d17 	ldw	r11,180(sp)
  80188c:	9839d7fa 	srai	fp,r19,31
  801890:	5ac00104 	addi	r11,r11,4
  801894:	dac02d15 	stw	r11,180(sp)
  801898:	e005883a 	mov	r2,fp
  80189c:	003c8106 	br	800aa4 <__alt_data_end+0xff800aa4>
  8018a0:	657fffc4 	addi	r21,r12,-1
  8018a4:	057f5d0e 	bge	zero,r21,80161c <__alt_data_end+0xff80161c>
  8018a8:	07000404 	movi	fp,16
  8018ac:	e540900e 	bge	fp,r21,801af0 <___vfprintf_internal_r+0x1508>
  8018b0:	01002074 	movhi	r4,129
  8018b4:	21027e84 	addi	r4,r4,2554
  8018b8:	d9002c15 	stw	r4,176(sp)
  8018bc:	01c001c4 	movi	r7,7
  8018c0:	00000306 	br	8018d0 <___vfprintf_internal_r+0x12e8>
  8018c4:	94800204 	addi	r18,r18,8
  8018c8:	ad7ffc04 	addi	r21,r21,-16
  8018cc:	e5408b0e 	bge	fp,r21,801afc <___vfprintf_internal_r+0x1514>
  8018d0:	18c00404 	addi	r3,r3,16
  8018d4:	84000044 	addi	r16,r16,1
  8018d8:	95000015 	stw	r20,0(r18)
  8018dc:	97000115 	stw	fp,4(r18)
  8018e0:	d8c02015 	stw	r3,128(sp)
  8018e4:	dc001f15 	stw	r16,124(sp)
  8018e8:	3c3ff60e 	bge	r7,r16,8018c4 <__alt_data_end+0xff8018c4>
  8018ec:	b009883a 	mov	r4,r22
  8018f0:	b80b883a 	mov	r5,r23
  8018f4:	d9801e04 	addi	r6,sp,120
  8018f8:	d9c03d15 	stw	r7,244(sp)
  8018fc:	0806dc40 	call	806dc4 <__sprint_r>
  801900:	d9c03d17 	ldw	r7,244(sp)
  801904:	103c2c1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801908:	d8c02017 	ldw	r3,128(sp)
  80190c:	dc001f17 	ldw	r16,124(sp)
  801910:	dc800404 	addi	r18,sp,16
  801914:	003fec06 	br	8018c8 <__alt_data_end+0xff8018c8>
  801918:	dac02d17 	ldw	r11,180(sp)
  80191c:	0039883a 	mov	fp,zero
  801920:	0005883a 	mov	r2,zero
  801924:	5cc00017 	ldw	r19,0(r11)
  801928:	5ac00104 	addi	r11,r11,4
  80192c:	dac02d15 	stw	r11,180(sp)
  801930:	9807883a 	mov	r3,r19
  801934:	003d5b06 	br	800ea4 <__alt_data_end+0xff800ea4>
  801938:	db002d17 	ldw	r12,180(sp)
  80193c:	0039883a 	mov	fp,zero
  801940:	00800044 	movi	r2,1
  801944:	64c00017 	ldw	r19,0(r12)
  801948:	63000104 	addi	r12,r12,4
  80194c:	db002d15 	stw	r12,180(sp)
  801950:	9807883a 	mov	r3,r19
  801954:	003d5306 	br	800ea4 <__alt_data_end+0xff800ea4>
  801958:	00800084 	movi	r2,2
  80195c:	9f06b03a 	or	r3,r19,fp
  801960:	003d5006 	br	800ea4 <__alt_data_end+0xff800ea4>
  801964:	10803fcc 	andi	r2,r2,255
  801968:	1080201c 	xori	r2,r2,128
  80196c:	10bfe004 	addi	r2,r2,-128
  801970:	01000c04 	movi	r4,48
  801974:	1101a526 	beq	r2,r4,80200c <___vfprintf_internal_r+0x1a24>
  801978:	dac03117 	ldw	r11,196(sp)
  80197c:	db002817 	ldw	r12,160(sp)
  801980:	193fffc5 	stb	r4,-1(r3)
  801984:	5affffc4 	addi	r11,r11,-1
  801988:	dac03115 	stw	r11,196(sp)
  80198c:	62e5c83a 	sub	r18,r12,r11
  801990:	003c6306 	br	800b20 <__alt_data_end+0xff800b20>
  801994:	b009883a 	mov	r4,r22
  801998:	b80b883a 	mov	r5,r23
  80199c:	d9801e04 	addi	r6,sp,120
  8019a0:	0806dc40 	call	806dc4 <__sprint_r>
  8019a4:	103c041e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  8019a8:	d8c02017 	ldw	r3,128(sp)
  8019ac:	da000404 	addi	r8,sp,16
  8019b0:	db003117 	ldw	r12,196(sp)
  8019b4:	dac03417 	ldw	r11,208(sp)
  8019b8:	d8802617 	ldw	r2,152(sp)
  8019bc:	62e5883a 	add	r18,r12,r11
  8019c0:	db003317 	ldw	r12,204(sp)
  8019c4:	13000216 	blt	r2,r12,8019d0 <___vfprintf_internal_r+0x13e8>
  8019c8:	8900004c 	andi	r4,r17,1
  8019cc:	20000c26 	beq	r4,zero,801a00 <___vfprintf_internal_r+0x1418>
  8019d0:	dac03817 	ldw	r11,224(sp)
  8019d4:	d9001f17 	ldw	r4,124(sp)
  8019d8:	db003517 	ldw	r12,212(sp)
  8019dc:	1ac7883a 	add	r3,r3,r11
  8019e0:	21000044 	addi	r4,r4,1
  8019e4:	43000015 	stw	r12,0(r8)
  8019e8:	42c00115 	stw	r11,4(r8)
  8019ec:	d8c02015 	stw	r3,128(sp)
  8019f0:	d9001f15 	stw	r4,124(sp)
  8019f4:	014001c4 	movi	r5,7
  8019f8:	2901cc16 	blt	r5,r4,80212c <___vfprintf_internal_r+0x1b44>
  8019fc:	42000204 	addi	r8,r8,8
  801a00:	dac03317 	ldw	r11,204(sp)
  801a04:	8489c83a 	sub	r4,r16,r18
  801a08:	5885c83a 	sub	r2,r11,r2
  801a0c:	1021883a 	mov	r16,r2
  801a10:	2080010e 	bge	r4,r2,801a18 <___vfprintf_internal_r+0x1430>
  801a14:	2021883a 	mov	r16,r4
  801a18:	04000a0e 	bge	zero,r16,801a44 <___vfprintf_internal_r+0x145c>
  801a1c:	d9001f17 	ldw	r4,124(sp)
  801a20:	1c07883a 	add	r3,r3,r16
  801a24:	44800015 	stw	r18,0(r8)
  801a28:	21000044 	addi	r4,r4,1
  801a2c:	44000115 	stw	r16,4(r8)
  801a30:	d8c02015 	stw	r3,128(sp)
  801a34:	d9001f15 	stw	r4,124(sp)
  801a38:	014001c4 	movi	r5,7
  801a3c:	2901e316 	blt	r5,r4,8021cc <___vfprintf_internal_r+0x1be4>
  801a40:	42000204 	addi	r8,r8,8
  801a44:	8001df16 	blt	r16,zero,8021c4 <___vfprintf_internal_r+0x1bdc>
  801a48:	1421c83a 	sub	r16,r2,r16
  801a4c:	043ccc0e 	bge	zero,r16,800d80 <__alt_data_end+0xff800d80>
  801a50:	04800404 	movi	r18,16
  801a54:	d8801f17 	ldw	r2,124(sp)
  801a58:	943efc0e 	bge	r18,r16,80164c <__alt_data_end+0xff80164c>
  801a5c:	01402074 	movhi	r5,129
  801a60:	29427e84 	addi	r5,r5,2554
  801a64:	d9402c15 	stw	r5,176(sp)
  801a68:	054001c4 	movi	r21,7
  801a6c:	00000306 	br	801a7c <___vfprintf_internal_r+0x1494>
  801a70:	42000204 	addi	r8,r8,8
  801a74:	843ffc04 	addi	r16,r16,-16
  801a78:	943ef70e 	bge	r18,r16,801658 <__alt_data_end+0xff801658>
  801a7c:	18c00404 	addi	r3,r3,16
  801a80:	10800044 	addi	r2,r2,1
  801a84:	45000015 	stw	r20,0(r8)
  801a88:	44800115 	stw	r18,4(r8)
  801a8c:	d8c02015 	stw	r3,128(sp)
  801a90:	d8801f15 	stw	r2,124(sp)
  801a94:	a8bff60e 	bge	r21,r2,801a70 <__alt_data_end+0xff801a70>
  801a98:	b009883a 	mov	r4,r22
  801a9c:	b80b883a 	mov	r5,r23
  801aa0:	d9801e04 	addi	r6,sp,120
  801aa4:	0806dc40 	call	806dc4 <__sprint_r>
  801aa8:	103bc31e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801aac:	d8c02017 	ldw	r3,128(sp)
  801ab0:	d8801f17 	ldw	r2,124(sp)
  801ab4:	da000404 	addi	r8,sp,16
  801ab8:	003fee06 	br	801a74 <__alt_data_end+0xff801a74>
  801abc:	8888703a 	and	r4,r17,r2
  801ac0:	203eab1e 	bne	r4,zero,801570 <__alt_data_end+0xff801570>
  801ac4:	dc001f17 	ldw	r16,124(sp)
  801ac8:	db003117 	ldw	r12,196(sp)
  801acc:	40800115 	stw	r2,4(r8)
  801ad0:	84000044 	addi	r16,r16,1
  801ad4:	43000015 	stw	r12,0(r8)
  801ad8:	d8c02015 	stw	r3,128(sp)
  801adc:	dc001f15 	stw	r16,124(sp)
  801ae0:	008001c4 	movi	r2,7
  801ae4:	14000e16 	blt	r2,r16,801b20 <___vfprintf_internal_r+0x1538>
  801ae8:	44800204 	addi	r18,r8,8
  801aec:	003ecb06 	br	80161c <__alt_data_end+0xff80161c>
  801af0:	00802074 	movhi	r2,129
  801af4:	10827e84 	addi	r2,r2,2554
  801af8:	d8802c15 	stw	r2,176(sp)
  801afc:	dac02c17 	ldw	r11,176(sp)
  801b00:	1d47883a 	add	r3,r3,r21
  801b04:	84000044 	addi	r16,r16,1
  801b08:	92c00015 	stw	r11,0(r18)
  801b0c:	95400115 	stw	r21,4(r18)
  801b10:	d8c02015 	stw	r3,128(sp)
  801b14:	dc001f15 	stw	r16,124(sp)
  801b18:	008001c4 	movi	r2,7
  801b1c:	143ebe0e 	bge	r2,r16,801618 <__alt_data_end+0xff801618>
  801b20:	b009883a 	mov	r4,r22
  801b24:	b80b883a 	mov	r5,r23
  801b28:	d9801e04 	addi	r6,sp,120
  801b2c:	0806dc40 	call	806dc4 <__sprint_r>
  801b30:	103ba11e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801b34:	d8c02017 	ldw	r3,128(sp)
  801b38:	dc001f17 	ldw	r16,124(sp)
  801b3c:	dc800404 	addi	r18,sp,16
  801b40:	003eb606 	br	80161c <__alt_data_end+0xff80161c>
  801b44:	b009883a 	mov	r4,r22
  801b48:	b80b883a 	mov	r5,r23
  801b4c:	d9801e04 	addi	r6,sp,120
  801b50:	0806dc40 	call	806dc4 <__sprint_r>
  801b54:	103b981e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801b58:	d8c02017 	ldw	r3,128(sp)
  801b5c:	dc001f17 	ldw	r16,124(sp)
  801b60:	da000404 	addi	r8,sp,16
  801b64:	003e8d06 	br	80159c <__alt_data_end+0xff80159c>
  801b68:	b009883a 	mov	r4,r22
  801b6c:	b80b883a 	mov	r5,r23
  801b70:	d9801e04 	addi	r6,sp,120
  801b74:	0806dc40 	call	806dc4 <__sprint_r>
  801b78:	103b8f1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801b7c:	d8c02017 	ldw	r3,128(sp)
  801b80:	dc001f17 	ldw	r16,124(sp)
  801b84:	dc800404 	addi	r18,sp,16
  801b88:	003e8f06 	br	8015c8 <__alt_data_end+0xff8015c8>
  801b8c:	db001e04 	addi	r12,sp,120
  801b90:	0025883a 	mov	r18,zero
  801b94:	db003115 	stw	r12,196(sp)
  801b98:	003be106 	br	800b20 <__alt_data_end+0xff800b20>
  801b9c:	b009883a 	mov	r4,r22
  801ba0:	b80b883a 	mov	r5,r23
  801ba4:	d9801e04 	addi	r6,sp,120
  801ba8:	0806dc40 	call	806dc4 <__sprint_r>
  801bac:	103b821e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801bb0:	d8c02017 	ldw	r3,128(sp)
  801bb4:	da000404 	addi	r8,sp,16
  801bb8:	003c3b06 	br	800ca8 <__alt_data_end+0xff800ca8>
  801bbc:	04e7c83a 	sub	r19,zero,r19
  801bc0:	9804c03a 	cmpne	r2,r19,zero
  801bc4:	0739c83a 	sub	fp,zero,fp
  801bc8:	e0b9c83a 	sub	fp,fp,r2
  801bcc:	05400b44 	movi	r21,45
  801bd0:	dd402785 	stb	r21,158(sp)
  801bd4:	da403215 	stw	r9,200(sp)
  801bd8:	00800044 	movi	r2,1
  801bdc:	9f06b03a 	or	r3,r19,fp
  801be0:	003bb506 	br	800ab8 <__alt_data_end+0xff800ab8>
  801be4:	da003f15 	stw	r8,252(sp)
  801be8:	da403e15 	stw	r9,248(sp)
  801bec:	08069880 	call	806988 <__fpclassifyd>
  801bf0:	da003f17 	ldw	r8,252(sp)
  801bf4:	da403e17 	ldw	r9,248(sp)
  801bf8:	1000ce26 	beq	r2,zero,801f34 <___vfprintf_internal_r+0x194c>
  801bfc:	057ff7c4 	movi	r21,-33
  801c00:	00bfffc4 	movi	r2,-1
  801c04:	856a703a 	and	r21,r16,r21
  801c08:	4881e826 	beq	r9,r2,8023ac <___vfprintf_internal_r+0x1dc4>
  801c0c:	008011c4 	movi	r2,71
  801c10:	a881e326 	beq	r21,r2,8023a0 <___vfprintf_internal_r+0x1db8>
  801c14:	db003917 	ldw	r12,228(sp)
  801c18:	8ac04014 	ori	r11,r17,256
  801c1c:	dac02d15 	stw	r11,180(sp)
  801c20:	6001ed16 	blt	r12,zero,8023d8 <___vfprintf_internal_r+0x1df0>
  801c24:	dc803917 	ldw	r18,228(sp)
  801c28:	d8002b05 	stb	zero,172(sp)
  801c2c:	00801984 	movi	r2,102
  801c30:	80811826 	beq	r16,r2,802094 <___vfprintf_internal_r+0x1aac>
  801c34:	00801184 	movi	r2,70
  801c38:	80811626 	beq	r16,r2,802094 <___vfprintf_internal_r+0x1aac>
  801c3c:	00801144 	movi	r2,69
  801c40:	a881e926 	beq	r21,r2,8023e8 <___vfprintf_internal_r+0x1e00>
  801c44:	4839883a 	mov	fp,r9
  801c48:	d8802604 	addi	r2,sp,152
  801c4c:	d8800115 	stw	r2,4(sp)
  801c50:	d9403717 	ldw	r5,220(sp)
  801c54:	d8802504 	addi	r2,sp,148
  801c58:	d8800215 	stw	r2,8(sp)
  801c5c:	d8802104 	addi	r2,sp,132
  801c60:	df000015 	stw	fp,0(sp)
  801c64:	d8800315 	stw	r2,12(sp)
  801c68:	b009883a 	mov	r4,r22
  801c6c:	900d883a 	mov	r6,r18
  801c70:	01c00084 	movi	r7,2
  801c74:	da003f15 	stw	r8,252(sp)
  801c78:	da403e15 	stw	r9,248(sp)
  801c7c:	080296c0 	call	80296c <_dtoa_r>
  801c80:	d8803115 	stw	r2,196(sp)
  801c84:	008019c4 	movi	r2,103
  801c88:	da003f17 	ldw	r8,252(sp)
  801c8c:	da403e17 	ldw	r9,248(sp)
  801c90:	80800226 	beq	r16,r2,801c9c <___vfprintf_internal_r+0x16b4>
  801c94:	008011c4 	movi	r2,71
  801c98:	8081101e 	bne	r16,r2,8020dc <___vfprintf_internal_r+0x1af4>
  801c9c:	8880004c 	andi	r2,r17,1
  801ca0:	1001dd26 	beq	r2,zero,802418 <___vfprintf_internal_r+0x1e30>
  801ca4:	db003117 	ldw	r12,196(sp)
  801ca8:	6715883a 	add	r10,r12,fp
  801cac:	d9003717 	ldw	r4,220(sp)
  801cb0:	900b883a 	mov	r5,r18
  801cb4:	000d883a 	mov	r6,zero
  801cb8:	000f883a 	mov	r7,zero
  801cbc:	da003f15 	stw	r8,252(sp)
  801cc0:	da403e15 	stw	r9,248(sp)
  801cc4:	da803d15 	stw	r10,244(sp)
  801cc8:	080b3ec0 	call	80b3ec <__eqdf2>
  801ccc:	da003f17 	ldw	r8,252(sp)
  801cd0:	da403e17 	ldw	r9,248(sp)
  801cd4:	da803d17 	ldw	r10,244(sp)
  801cd8:	10016526 	beq	r2,zero,802270 <___vfprintf_internal_r+0x1c88>
  801cdc:	d8802117 	ldw	r2,132(sp)
  801ce0:	1280062e 	bgeu	r2,r10,801cfc <___vfprintf_internal_r+0x1714>
  801ce4:	01000c04 	movi	r4,48
  801ce8:	10c00044 	addi	r3,r2,1
  801cec:	d8c02115 	stw	r3,132(sp)
  801cf0:	11000005 	stb	r4,0(r2)
  801cf4:	d8802117 	ldw	r2,132(sp)
  801cf8:	12bffb36 	bltu	r2,r10,801ce8 <__alt_data_end+0xff801ce8>
  801cfc:	db003117 	ldw	r12,196(sp)
  801d00:	1305c83a 	sub	r2,r2,r12
  801d04:	d8803315 	stw	r2,204(sp)
  801d08:	008011c4 	movi	r2,71
  801d0c:	a8814d26 	beq	r21,r2,802244 <___vfprintf_internal_r+0x1c5c>
  801d10:	00801944 	movi	r2,101
  801d14:	1402060e 	bge	r2,r16,802530 <___vfprintf_internal_r+0x1f48>
  801d18:	00801984 	movi	r2,102
  801d1c:	8081b426 	beq	r16,r2,8023f0 <___vfprintf_internal_r+0x1e08>
  801d20:	db002617 	ldw	r12,152(sp)
  801d24:	db003415 	stw	r12,208(sp)
  801d28:	db003417 	ldw	r12,208(sp)
  801d2c:	dac03317 	ldw	r11,204(sp)
  801d30:	62c1a016 	blt	r12,r11,8023b4 <___vfprintf_internal_r+0x1dcc>
  801d34:	8c40004c 	andi	r17,r17,1
  801d38:	8801bf1e 	bne	r17,zero,802438 <___vfprintf_internal_r+0x1e50>
  801d3c:	6005883a 	mov	r2,r12
  801d40:	6001b316 	blt	r12,zero,802410 <___vfprintf_internal_r+0x1e28>
  801d44:	dc803417 	ldw	r18,208(sp)
  801d48:	df002b07 	ldb	fp,172(sp)
  801d4c:	e0012e1e 	bne	fp,zero,802208 <___vfprintf_internal_r+0x1c20>
  801d50:	dc402d17 	ldw	r17,180(sp)
  801d54:	dd402783 	ldbu	r21,158(sp)
  801d58:	d8802b15 	stw	r2,172(sp)
  801d5c:	dcc02d15 	stw	r19,180(sp)
  801d60:	d8003215 	stw	zero,200(sp)
  801d64:	003b7306 	br	800b34 <__alt_data_end+0xff800b34>
  801d68:	00800084 	movi	r2,2
  801d6c:	003c4d06 	br	800ea4 <__alt_data_end+0xff800ea4>
  801d70:	8880040c 	andi	r2,r17,16
  801d74:	1000091e 	bne	r2,zero,801d9c <___vfprintf_internal_r+0x17b4>
  801d78:	8c40100c 	andi	r17,r17,64
  801d7c:	88000726 	beq	r17,zero,801d9c <___vfprintf_internal_r+0x17b4>
  801d80:	db002d17 	ldw	r12,180(sp)
  801d84:	dac02f17 	ldw	r11,188(sp)
  801d88:	60800017 	ldw	r2,0(r12)
  801d8c:	63000104 	addi	r12,r12,4
  801d90:	db002d15 	stw	r12,180(sp)
  801d94:	12c0000d 	sth	r11,0(r2)
  801d98:	003a4e06 	br	8006d4 <__alt_data_end+0xff8006d4>
  801d9c:	db002d17 	ldw	r12,180(sp)
  801da0:	dac02f17 	ldw	r11,188(sp)
  801da4:	60800017 	ldw	r2,0(r12)
  801da8:	63000104 	addi	r12,r12,4
  801dac:	db002d15 	stw	r12,180(sp)
  801db0:	12c00015 	stw	r11,0(r2)
  801db4:	003a4706 	br	8006d4 <__alt_data_end+0xff8006d4>
  801db8:	1c000007 	ldb	r16,0(r3)
  801dbc:	1805883a 	mov	r2,r3
  801dc0:	003a6e06 	br	80077c <__alt_data_end+0xff80077c>
  801dc4:	88c0100c 	andi	r3,r17,64
  801dc8:	18006b26 	beq	r3,zero,801f78 <___vfprintf_internal_r+0x1990>
  801dcc:	dac02d17 	ldw	r11,180(sp)
  801dd0:	14c0000b 	ldhu	r19,0(r2)
  801dd4:	0039883a 	mov	fp,zero
  801dd8:	5ac00104 	addi	r11,r11,4
  801ddc:	dac02d15 	stw	r11,180(sp)
  801de0:	003cb206 	br	8010ac <__alt_data_end+0xff8010ac>
  801de4:	01002074 	movhi	r4,129
  801de8:	21027e84 	addi	r4,r4,2554
  801dec:	d9002c15 	stw	r4,176(sp)
  801df0:	dac02c17 	ldw	r11,176(sp)
  801df4:	1c87883a 	add	r3,r3,r18
  801df8:	10800044 	addi	r2,r2,1
  801dfc:	42c00015 	stw	r11,0(r8)
  801e00:	44800115 	stw	r18,4(r8)
  801e04:	d8c02015 	stw	r3,128(sp)
  801e08:	d8801f15 	stw	r2,124(sp)
  801e0c:	010001c4 	movi	r4,7
  801e10:	20bee016 	blt	r4,r2,801994 <__alt_data_end+0xff801994>
  801e14:	42000204 	addi	r8,r8,8
  801e18:	003ee506 	br	8019b0 <__alt_data_end+0xff8019b0>
  801e1c:	01002074 	movhi	r4,129
  801e20:	21027e84 	addi	r4,r4,2554
  801e24:	d9002c15 	stw	r4,176(sp)
  801e28:	003bbe06 	br	800d24 <__alt_data_end+0xff800d24>
  801e2c:	b009883a 	mov	r4,r22
  801e30:	b80b883a 	mov	r5,r23
  801e34:	d9801e04 	addi	r6,sp,120
  801e38:	0806dc40 	call	806dc4 <__sprint_r>
  801e3c:	103ade1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801e40:	d8c02017 	ldw	r3,128(sp)
  801e44:	da000404 	addi	r8,sp,16
  801e48:	003d6b06 	br	8013f8 <__alt_data_end+0xff8013f8>
  801e4c:	d8801f17 	ldw	r2,124(sp)
  801e50:	03002074 	movhi	r12,129
  801e54:	01000044 	movi	r4,1
  801e58:	18c00044 	addi	r3,r3,1
  801e5c:	10800044 	addi	r2,r2,1
  801e60:	63027e04 	addi	r12,r12,2552
  801e64:	41000115 	stw	r4,4(r8)
  801e68:	43000015 	stw	r12,0(r8)
  801e6c:	d8c02015 	stw	r3,128(sp)
  801e70:	d8801f15 	stw	r2,124(sp)
  801e74:	010001c4 	movi	r4,7
  801e78:	20804916 	blt	r4,r2,801fa0 <___vfprintf_internal_r+0x19b8>
  801e7c:	42000204 	addi	r8,r8,8
  801e80:	8000041e 	bne	r16,zero,801e94 <___vfprintf_internal_r+0x18ac>
  801e84:	dac03317 	ldw	r11,204(sp)
  801e88:	5800021e 	bne	r11,zero,801e94 <___vfprintf_internal_r+0x18ac>
  801e8c:	8880004c 	andi	r2,r17,1
  801e90:	103bbb26 	beq	r2,zero,800d80 <__alt_data_end+0xff800d80>
  801e94:	db003817 	ldw	r12,224(sp)
  801e98:	d8801f17 	ldw	r2,124(sp)
  801e9c:	dac03517 	ldw	r11,212(sp)
  801ea0:	1b07883a 	add	r3,r3,r12
  801ea4:	10800044 	addi	r2,r2,1
  801ea8:	42c00015 	stw	r11,0(r8)
  801eac:	43000115 	stw	r12,4(r8)
  801eb0:	d8c02015 	stw	r3,128(sp)
  801eb4:	d8801f15 	stw	r2,124(sp)
  801eb8:	010001c4 	movi	r4,7
  801ebc:	20812e16 	blt	r4,r2,802378 <___vfprintf_internal_r+0x1d90>
  801ec0:	42000204 	addi	r8,r8,8
  801ec4:	0421c83a 	sub	r16,zero,r16
  801ec8:	04005c0e 	bge	zero,r16,80203c <___vfprintf_internal_r+0x1a54>
  801ecc:	04800404 	movi	r18,16
  801ed0:	94009f0e 	bge	r18,r16,802150 <___vfprintf_internal_r+0x1b68>
  801ed4:	01002074 	movhi	r4,129
  801ed8:	21027e84 	addi	r4,r4,2554
  801edc:	d9002c15 	stw	r4,176(sp)
  801ee0:	054001c4 	movi	r21,7
  801ee4:	00000306 	br	801ef4 <___vfprintf_internal_r+0x190c>
  801ee8:	42000204 	addi	r8,r8,8
  801eec:	843ffc04 	addi	r16,r16,-16
  801ef0:	94009a0e 	bge	r18,r16,80215c <___vfprintf_internal_r+0x1b74>
  801ef4:	18c00404 	addi	r3,r3,16
  801ef8:	10800044 	addi	r2,r2,1
  801efc:	45000015 	stw	r20,0(r8)
  801f00:	44800115 	stw	r18,4(r8)
  801f04:	d8c02015 	stw	r3,128(sp)
  801f08:	d8801f15 	stw	r2,124(sp)
  801f0c:	a8bff60e 	bge	r21,r2,801ee8 <__alt_data_end+0xff801ee8>
  801f10:	b009883a 	mov	r4,r22
  801f14:	b80b883a 	mov	r5,r23
  801f18:	d9801e04 	addi	r6,sp,120
  801f1c:	0806dc40 	call	806dc4 <__sprint_r>
  801f20:	103aa51e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801f24:	d8c02017 	ldw	r3,128(sp)
  801f28:	d8801f17 	ldw	r2,124(sp)
  801f2c:	da000404 	addi	r8,sp,16
  801f30:	003fee06 	br	801eec <__alt_data_end+0xff801eec>
  801f34:	008011c4 	movi	r2,71
  801f38:	1400be16 	blt	r2,r16,802234 <___vfprintf_internal_r+0x1c4c>
  801f3c:	03002074 	movhi	r12,129
  801f40:	63027004 	addi	r12,r12,2496
  801f44:	db003115 	stw	r12,196(sp)
  801f48:	00c000c4 	movi	r3,3
  801f4c:	00bfdfc4 	movi	r2,-129
  801f50:	d8c02b15 	stw	r3,172(sp)
  801f54:	88a2703a 	and	r17,r17,r2
  801f58:	dd402783 	ldbu	r21,158(sp)
  801f5c:	dcc02d15 	stw	r19,180(sp)
  801f60:	1825883a 	mov	r18,r3
  801f64:	d8003215 	stw	zero,200(sp)
  801f68:	d8003415 	stw	zero,208(sp)
  801f6c:	003af106 	br	800b34 <__alt_data_end+0xff800b34>
  801f70:	4825883a 	mov	r18,r9
  801f74:	003c9306 	br	8011c4 <__alt_data_end+0xff8011c4>
  801f78:	db002d17 	ldw	r12,180(sp)
  801f7c:	14c00017 	ldw	r19,0(r2)
  801f80:	0039883a 	mov	fp,zero
  801f84:	63000104 	addi	r12,r12,4
  801f88:	db002d15 	stw	r12,180(sp)
  801f8c:	003c4706 	br	8010ac <__alt_data_end+0xff8010ac>
  801f90:	00802074 	movhi	r2,129
  801f94:	10826e04 	addi	r2,r2,2488
  801f98:	d8803115 	stw	r2,196(sp)
  801f9c:	003bf106 	br	800f64 <__alt_data_end+0xff800f64>
  801fa0:	b009883a 	mov	r4,r22
  801fa4:	b80b883a 	mov	r5,r23
  801fa8:	d9801e04 	addi	r6,sp,120
  801fac:	0806dc40 	call	806dc4 <__sprint_r>
  801fb0:	103a811e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  801fb4:	dc002617 	ldw	r16,152(sp)
  801fb8:	d8c02017 	ldw	r3,128(sp)
  801fbc:	da000404 	addi	r8,sp,16
  801fc0:	003faf06 	br	801e80 <__alt_data_end+0xff801e80>
  801fc4:	db002e17 	ldw	r12,184(sp)
  801fc8:	1805883a 	mov	r2,r3
  801fcc:	dac02d15 	stw	r11,180(sp)
  801fd0:	0319c83a 	sub	r12,zero,r12
  801fd4:	db002e15 	stw	r12,184(sp)
  801fd8:	003a8206 	br	8009e4 <__alt_data_end+0xff8009e4>
  801fdc:	18800044 	addi	r2,r3,1
  801fe0:	8c400814 	ori	r17,r17,32
  801fe4:	1c000047 	ldb	r16,1(r3)
  801fe8:	0039e406 	br	80077c <__alt_data_end+0xff80077c>
  801fec:	b009883a 	mov	r4,r22
  801ff0:	b80b883a 	mov	r5,r23
  801ff4:	d9801e04 	addi	r6,sp,120
  801ff8:	0806dc40 	call	806dc4 <__sprint_r>
  801ffc:	103a6e1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  802000:	d8c02017 	ldw	r3,128(sp)
  802004:	da000404 	addi	r8,sp,16
  802008:	003d0c06 	br	80143c <__alt_data_end+0xff80143c>
  80200c:	db002817 	ldw	r12,160(sp)
  802010:	d8c03117 	ldw	r3,196(sp)
  802014:	60e5c83a 	sub	r18,r12,r3
  802018:	003ac106 	br	800b20 <__alt_data_end+0xff800b20>
  80201c:	b009883a 	mov	r4,r22
  802020:	b80b883a 	mov	r5,r23
  802024:	d9801e04 	addi	r6,sp,120
  802028:	0806dc40 	call	806dc4 <__sprint_r>
  80202c:	103a621e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  802030:	d8c02017 	ldw	r3,128(sp)
  802034:	d8801f17 	ldw	r2,124(sp)
  802038:	da000404 	addi	r8,sp,16
  80203c:	db003317 	ldw	r12,204(sp)
  802040:	dac03117 	ldw	r11,196(sp)
  802044:	10800044 	addi	r2,r2,1
  802048:	1b07883a 	add	r3,r3,r12
  80204c:	42c00015 	stw	r11,0(r8)
  802050:	43000115 	stw	r12,4(r8)
  802054:	d8c02015 	stw	r3,128(sp)
  802058:	d8801f15 	stw	r2,124(sp)
  80205c:	010001c4 	movi	r4,7
  802060:	20bb460e 	bge	r4,r2,800d7c <__alt_data_end+0xff800d7c>
  802064:	003d8506 	br	80167c <__alt_data_end+0xff80167c>
  802068:	da003f15 	stw	r8,252(sp)
  80206c:	0806c300 	call	806c30 <strlen>
  802070:	1025883a 	mov	r18,r2
  802074:	da003f17 	ldw	r8,252(sp)
  802078:	903c540e 	bge	r18,zero,8011cc <__alt_data_end+0xff8011cc>
  80207c:	0005883a 	mov	r2,zero
  802080:	003c5206 	br	8011cc <__alt_data_end+0xff8011cc>
  802084:	01002074 	movhi	r4,129
  802088:	21028284 	addi	r4,r4,2570
  80208c:	d9003615 	stw	r4,216(sp)
  802090:	003adc06 	br	800c04 <__alt_data_end+0xff800c04>
  802094:	d8802604 	addi	r2,sp,152
  802098:	d8800115 	stw	r2,4(sp)
  80209c:	d9403717 	ldw	r5,220(sp)
  8020a0:	d8802504 	addi	r2,sp,148
  8020a4:	d8800215 	stw	r2,8(sp)
  8020a8:	d8802104 	addi	r2,sp,132
  8020ac:	da400015 	stw	r9,0(sp)
  8020b0:	d8800315 	stw	r2,12(sp)
  8020b4:	b009883a 	mov	r4,r22
  8020b8:	900d883a 	mov	r6,r18
  8020bc:	01c000c4 	movi	r7,3
  8020c0:	da003f15 	stw	r8,252(sp)
  8020c4:	da403e15 	stw	r9,248(sp)
  8020c8:	080296c0 	call	80296c <_dtoa_r>
  8020cc:	da403e17 	ldw	r9,248(sp)
  8020d0:	da003f17 	ldw	r8,252(sp)
  8020d4:	d8803115 	stw	r2,196(sp)
  8020d8:	4839883a 	mov	fp,r9
  8020dc:	dac03117 	ldw	r11,196(sp)
  8020e0:	00801184 	movi	r2,70
  8020e4:	5f15883a 	add	r10,r11,fp
  8020e8:	a8bef01e 	bne	r21,r2,801cac <__alt_data_end+0xff801cac>
  8020ec:	59000007 	ldb	r4,0(r11)
  8020f0:	00800c04 	movi	r2,48
  8020f4:	2080d526 	beq	r4,r2,80244c <___vfprintf_internal_r+0x1e64>
  8020f8:	d8c02617 	ldw	r3,152(sp)
  8020fc:	50d5883a 	add	r10,r10,r3
  802100:	003eea06 	br	801cac <__alt_data_end+0xff801cac>
  802104:	0025883a 	mov	r18,zero
  802108:	003db306 	br	8017d8 <__alt_data_end+0xff8017d8>
  80210c:	b009883a 	mov	r4,r22
  802110:	b80b883a 	mov	r5,r23
  802114:	d9801e04 	addi	r6,sp,120
  802118:	0806dc40 	call	806dc4 <__sprint_r>
  80211c:	103a261e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  802120:	d8c02017 	ldw	r3,128(sp)
  802124:	da000404 	addi	r8,sp,16
  802128:	003daa06 	br	8017d4 <__alt_data_end+0xff8017d4>
  80212c:	b009883a 	mov	r4,r22
  802130:	b80b883a 	mov	r5,r23
  802134:	d9801e04 	addi	r6,sp,120
  802138:	0806dc40 	call	806dc4 <__sprint_r>
  80213c:	103a1e1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  802140:	d8802617 	ldw	r2,152(sp)
  802144:	d8c02017 	ldw	r3,128(sp)
  802148:	da000404 	addi	r8,sp,16
  80214c:	003e2c06 	br	801a00 <__alt_data_end+0xff801a00>
  802150:	03002074 	movhi	r12,129
  802154:	63027e84 	addi	r12,r12,2554
  802158:	db002c15 	stw	r12,176(sp)
  80215c:	dac02c17 	ldw	r11,176(sp)
  802160:	1c07883a 	add	r3,r3,r16
  802164:	10800044 	addi	r2,r2,1
  802168:	42c00015 	stw	r11,0(r8)
  80216c:	44000115 	stw	r16,4(r8)
  802170:	d8c02015 	stw	r3,128(sp)
  802174:	d8801f15 	stw	r2,124(sp)
  802178:	010001c4 	movi	r4,7
  80217c:	20bfa716 	blt	r4,r2,80201c <__alt_data_end+0xff80201c>
  802180:	42000204 	addi	r8,r8,8
  802184:	003fad06 	br	80203c <__alt_data_end+0xff80203c>
  802188:	00800184 	movi	r2,6
  80218c:	1240012e 	bgeu	r2,r9,802194 <___vfprintf_internal_r+0x1bac>
  802190:	1013883a 	mov	r9,r2
  802194:	4825883a 	mov	r18,r9
  802198:	4805883a 	mov	r2,r9
  80219c:	4800c216 	blt	r9,zero,8024a8 <___vfprintf_internal_r+0x1ec0>
  8021a0:	d8802b15 	stw	r2,172(sp)
  8021a4:	00802074 	movhi	r2,129
  8021a8:	10827c04 	addi	r2,r2,2544
  8021ac:	d8803115 	stw	r2,196(sp)
  8021b0:	dcc02d15 	stw	r19,180(sp)
  8021b4:	d8003215 	stw	zero,200(sp)
  8021b8:	d8003415 	stw	zero,208(sp)
  8021bc:	0005883a 	mov	r2,zero
  8021c0:	003a6306 	br	800b50 <__alt_data_end+0xff800b50>
  8021c4:	0021883a 	mov	r16,zero
  8021c8:	003e1f06 	br	801a48 <__alt_data_end+0xff801a48>
  8021cc:	b009883a 	mov	r4,r22
  8021d0:	b80b883a 	mov	r5,r23
  8021d4:	d9801e04 	addi	r6,sp,120
  8021d8:	0806dc40 	call	806dc4 <__sprint_r>
  8021dc:	1039f61e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  8021e0:	d8802617 	ldw	r2,152(sp)
  8021e4:	db003317 	ldw	r12,204(sp)
  8021e8:	d8c02017 	ldw	r3,128(sp)
  8021ec:	da000404 	addi	r8,sp,16
  8021f0:	6085c83a 	sub	r2,r12,r2
  8021f4:	003e1306 	br	801a44 <__alt_data_end+0xff801a44>
  8021f8:	03002074 	movhi	r12,129
  8021fc:	63028284 	addi	r12,r12,2570
  802200:	db003615 	stw	r12,216(sp)
  802204:	003b0206 	br	800e10 <__alt_data_end+0xff800e10>
  802208:	00c00b44 	movi	r3,45
  80220c:	d8802b15 	stw	r2,172(sp)
  802210:	dc402d17 	ldw	r17,180(sp)
  802214:	d8c02785 	stb	r3,158(sp)
  802218:	dcc02d15 	stw	r19,180(sp)
  80221c:	d8003215 	stw	zero,200(sp)
  802220:	00800b44 	movi	r2,45
  802224:	003a4706 	br	800b44 <__alt_data_end+0xff800b44>
  802228:	05400b44 	movi	r21,45
  80222c:	dd402785 	stb	r21,158(sp)
  802230:	003b4706 	br	800f50 <__alt_data_end+0xff800f50>
  802234:	00802074 	movhi	r2,129
  802238:	10827104 	addi	r2,r2,2500
  80223c:	d8803115 	stw	r2,196(sp)
  802240:	003f4106 	br	801f48 <__alt_data_end+0xff801f48>
  802244:	d8c02617 	ldw	r3,152(sp)
  802248:	00bfff44 	movi	r2,-3
  80224c:	18801116 	blt	r3,r2,802294 <___vfprintf_internal_r+0x1cac>
  802250:	48c01016 	blt	r9,r3,802294 <___vfprintf_internal_r+0x1cac>
  802254:	d8c03415 	stw	r3,208(sp)
  802258:	040019c4 	movi	r16,103
  80225c:	003eb206 	br	801d28 <__alt_data_end+0xff801d28>
  802260:	01002074 	movhi	r4,129
  802264:	21027e84 	addi	r4,r4,2554
  802268:	d9002c15 	stw	r4,176(sp)
  80226c:	003cb106 	br	801534 <__alt_data_end+0xff801534>
  802270:	5005883a 	mov	r2,r10
  802274:	003ea106 	br	801cfc <__alt_data_end+0xff801cfc>
  802278:	da402b15 	stw	r9,172(sp)
  80227c:	dd402783 	ldbu	r21,158(sp)
  802280:	4825883a 	mov	r18,r9
  802284:	dcc02d15 	stw	r19,180(sp)
  802288:	d8003215 	stw	zero,200(sp)
  80228c:	d8003415 	stw	zero,208(sp)
  802290:	003a2806 	br	800b34 <__alt_data_end+0xff800b34>
  802294:	843fff84 	addi	r16,r16,-2
  802298:	1f3fffc4 	addi	fp,r3,-1
  80229c:	df002615 	stw	fp,152(sp)
  8022a0:	dc0022c5 	stb	r16,139(sp)
  8022a4:	e0009816 	blt	fp,zero,802508 <___vfprintf_internal_r+0x1f20>
  8022a8:	00800ac4 	movi	r2,43
  8022ac:	d8802305 	stb	r2,140(sp)
  8022b0:	00800244 	movi	r2,9
  8022b4:	1700750e 	bge	r2,fp,80248c <___vfprintf_internal_r+0x1ea4>
  8022b8:	dd4022c4 	addi	r21,sp,139
  8022bc:	dc002c15 	stw	r16,176(sp)
  8022c0:	4025883a 	mov	r18,r8
  8022c4:	a821883a 	mov	r16,r21
  8022c8:	e009883a 	mov	r4,fp
  8022cc:	01400284 	movi	r5,10
  8022d0:	080a2180 	call	80a218 <__modsi3>
  8022d4:	10800c04 	addi	r2,r2,48
  8022d8:	843fffc4 	addi	r16,r16,-1
  8022dc:	e009883a 	mov	r4,fp
  8022e0:	01400284 	movi	r5,10
  8022e4:	80800005 	stb	r2,0(r16)
  8022e8:	080a1c40 	call	80a1c4 <__divsi3>
  8022ec:	1039883a 	mov	fp,r2
  8022f0:	00800244 	movi	r2,9
  8022f4:	173ff416 	blt	r2,fp,8022c8 <__alt_data_end+0xff8022c8>
  8022f8:	9011883a 	mov	r8,r18
  8022fc:	e0800c04 	addi	r2,fp,48
  802300:	8025883a 	mov	r18,r16
  802304:	913fffc4 	addi	r4,r18,-1
  802308:	90bfffc5 	stb	r2,-1(r18)
  80230c:	dc002c17 	ldw	r16,176(sp)
  802310:	2540852e 	bgeu	r4,r21,802528 <___vfprintf_internal_r+0x1f40>
  802314:	d9402384 	addi	r5,sp,142
  802318:	2c8bc83a 	sub	r5,r5,r18
  80231c:	d8c02344 	addi	r3,sp,141
  802320:	a94b883a 	add	r5,r21,r5
  802324:	00000106 	br	80232c <___vfprintf_internal_r+0x1d44>
  802328:	20800003 	ldbu	r2,0(r4)
  80232c:	18800005 	stb	r2,0(r3)
  802330:	18c00044 	addi	r3,r3,1
  802334:	21000044 	addi	r4,r4,1
  802338:	197ffb1e 	bne	r3,r5,802328 <__alt_data_end+0xff802328>
  80233c:	d8802304 	addi	r2,sp,140
  802340:	1485c83a 	sub	r2,r2,r18
  802344:	d8c02344 	addi	r3,sp,141
  802348:	1885883a 	add	r2,r3,r2
  80234c:	dac03317 	ldw	r11,204(sp)
  802350:	156bc83a 	sub	r21,r2,r21
  802354:	dd403a15 	stw	r21,232(sp)
  802358:	00800044 	movi	r2,1
  80235c:	5d65883a 	add	r18,r11,r21
  802360:	12c0660e 	bge	r2,r11,8024fc <___vfprintf_internal_r+0x1f14>
  802364:	94800044 	addi	r18,r18,1
  802368:	9005883a 	mov	r2,r18
  80236c:	90006116 	blt	r18,zero,8024f4 <___vfprintf_internal_r+0x1f0c>
  802370:	d8003415 	stw	zero,208(sp)
  802374:	003e7406 	br	801d48 <__alt_data_end+0xff801d48>
  802378:	b009883a 	mov	r4,r22
  80237c:	b80b883a 	mov	r5,r23
  802380:	d9801e04 	addi	r6,sp,120
  802384:	0806dc40 	call	806dc4 <__sprint_r>
  802388:	10398b1e 	bne	r2,zero,8009b8 <__alt_data_end+0xff8009b8>
  80238c:	dc002617 	ldw	r16,152(sp)
  802390:	d8c02017 	ldw	r3,128(sp)
  802394:	d8801f17 	ldw	r2,124(sp)
  802398:	da000404 	addi	r8,sp,16
  80239c:	003ec906 	br	801ec4 <__alt_data_end+0xff801ec4>
  8023a0:	483e1c1e 	bne	r9,zero,801c14 <__alt_data_end+0xff801c14>
  8023a4:	9013883a 	mov	r9,r18
  8023a8:	003e1a06 	br	801c14 <__alt_data_end+0xff801c14>
  8023ac:	02400184 	movi	r9,6
  8023b0:	003e1806 	br	801c14 <__alt_data_end+0xff801c14>
  8023b4:	d8c03417 	ldw	r3,208(sp)
  8023b8:	00c04b0e 	bge	zero,r3,8024e8 <___vfprintf_internal_r+0x1f00>
  8023bc:	04800044 	movi	r18,1
  8023c0:	dac03317 	ldw	r11,204(sp)
  8023c4:	92e5883a 	add	r18,r18,r11
  8023c8:	9005883a 	mov	r2,r18
  8023cc:	903e5e0e 	bge	r18,zero,801d48 <__alt_data_end+0xff801d48>
  8023d0:	0005883a 	mov	r2,zero
  8023d4:	003e5c06 	br	801d48 <__alt_data_end+0xff801d48>
  8023d8:	00c00b44 	movi	r3,45
  8023dc:	64a0003c 	xorhi	r18,r12,32768
  8023e0:	d8c02b05 	stb	r3,172(sp)
  8023e4:	003e1106 	br	801c2c <__alt_data_end+0xff801c2c>
  8023e8:	4f000044 	addi	fp,r9,1
  8023ec:	003e1606 	br	801c48 <__alt_data_end+0xff801c48>
  8023f0:	d8c02617 	ldw	r3,152(sp)
  8023f4:	d8c03415 	stw	r3,208(sp)
  8023f8:	00c0350e 	bge	zero,r3,8024d0 <___vfprintf_internal_r+0x1ee8>
  8023fc:	4800081e 	bne	r9,zero,802420 <___vfprintf_internal_r+0x1e38>
  802400:	8c40004c 	andi	r17,r17,1
  802404:	8800061e 	bne	r17,zero,802420 <___vfprintf_internal_r+0x1e38>
  802408:	1805883a 	mov	r2,r3
  80240c:	183e4d0e 	bge	r3,zero,801d44 <__alt_data_end+0xff801d44>
  802410:	0005883a 	mov	r2,zero
  802414:	003e4b06 	br	801d44 <__alt_data_end+0xff801d44>
  802418:	d8802117 	ldw	r2,132(sp)
  80241c:	003e3706 	br	801cfc <__alt_data_end+0xff801cfc>
  802420:	dac03417 	ldw	r11,208(sp)
  802424:	4a400044 	addi	r9,r9,1
  802428:	5a65883a 	add	r18,r11,r9
  80242c:	9005883a 	mov	r2,r18
  802430:	903e450e 	bge	r18,zero,801d48 <__alt_data_end+0xff801d48>
  802434:	003fe606 	br	8023d0 <__alt_data_end+0xff8023d0>
  802438:	db003417 	ldw	r12,208(sp)
  80243c:	64800044 	addi	r18,r12,1
  802440:	9005883a 	mov	r2,r18
  802444:	903e400e 	bge	r18,zero,801d48 <__alt_data_end+0xff801d48>
  802448:	003fe106 	br	8023d0 <__alt_data_end+0xff8023d0>
  80244c:	d9003717 	ldw	r4,220(sp)
  802450:	900b883a 	mov	r5,r18
  802454:	000d883a 	mov	r6,zero
  802458:	000f883a 	mov	r7,zero
  80245c:	da003f15 	stw	r8,252(sp)
  802460:	da403e15 	stw	r9,248(sp)
  802464:	da803d15 	stw	r10,244(sp)
  802468:	080b3ec0 	call	80b3ec <__eqdf2>
  80246c:	da003f17 	ldw	r8,252(sp)
  802470:	da403e17 	ldw	r9,248(sp)
  802474:	da803d17 	ldw	r10,244(sp)
  802478:	103f1f26 	beq	r2,zero,8020f8 <__alt_data_end+0xff8020f8>
  80247c:	00800044 	movi	r2,1
  802480:	1707c83a 	sub	r3,r2,fp
  802484:	d8c02615 	stw	r3,152(sp)
  802488:	003f1c06 	br	8020fc <__alt_data_end+0xff8020fc>
  80248c:	00800c04 	movi	r2,48
  802490:	e0c00c04 	addi	r3,fp,48
  802494:	d8802345 	stb	r2,141(sp)
  802498:	d8c02385 	stb	r3,142(sp)
  80249c:	d88023c4 	addi	r2,sp,143
  8024a0:	dd4022c4 	addi	r21,sp,139
  8024a4:	003fa906 	br	80234c <__alt_data_end+0xff80234c>
  8024a8:	0005883a 	mov	r2,zero
  8024ac:	003f3c06 	br	8021a0 <__alt_data_end+0xff8021a0>
  8024b0:	dac02d17 	ldw	r11,180(sp)
  8024b4:	5a400017 	ldw	r9,0(r11)
  8024b8:	5ac00104 	addi	r11,r11,4
  8024bc:	dac02d15 	stw	r11,180(sp)
  8024c0:	483ec80e 	bge	r9,zero,801fe4 <__alt_data_end+0xff801fe4>
  8024c4:	027fffc4 	movi	r9,-1
  8024c8:	1c000047 	ldb	r16,1(r3)
  8024cc:	0038ab06 	br	80077c <__alt_data_end+0xff80077c>
  8024d0:	4800111e 	bne	r9,zero,802518 <___vfprintf_internal_r+0x1f30>
  8024d4:	8c40004c 	andi	r17,r17,1
  8024d8:	88000f1e 	bne	r17,zero,802518 <___vfprintf_internal_r+0x1f30>
  8024dc:	00800044 	movi	r2,1
  8024e0:	1025883a 	mov	r18,r2
  8024e4:	003e1806 	br	801d48 <__alt_data_end+0xff801d48>
  8024e8:	04800084 	movi	r18,2
  8024ec:	90e5c83a 	sub	r18,r18,r3
  8024f0:	003fb306 	br	8023c0 <__alt_data_end+0xff8023c0>
  8024f4:	0005883a 	mov	r2,zero
  8024f8:	003f9d06 	br	802370 <__alt_data_end+0xff802370>
  8024fc:	88a2703a 	and	r17,r17,r2
  802500:	883f9926 	beq	r17,zero,802368 <__alt_data_end+0xff802368>
  802504:	003f9706 	br	802364 <__alt_data_end+0xff802364>
  802508:	00800b44 	movi	r2,45
  80250c:	0739c83a 	sub	fp,zero,fp
  802510:	d8802305 	stb	r2,140(sp)
  802514:	003f6606 	br	8022b0 <__alt_data_end+0xff8022b0>
  802518:	4c800084 	addi	r18,r9,2
  80251c:	9005883a 	mov	r2,r18
  802520:	903e090e 	bge	r18,zero,801d48 <__alt_data_end+0xff801d48>
  802524:	003faa06 	br	8023d0 <__alt_data_end+0xff8023d0>
  802528:	d8802344 	addi	r2,sp,141
  80252c:	003f8706 	br	80234c <__alt_data_end+0xff80234c>
  802530:	d8c02617 	ldw	r3,152(sp)
  802534:	003f5806 	br	802298 <__alt_data_end+0xff802298>

00802538 <__vfprintf_internal>:
  802538:	2007883a 	mov	r3,r4
  80253c:	01002074 	movhi	r4,129
  802540:	210b1c04 	addi	r4,r4,11376
  802544:	21000017 	ldw	r4,0(r4)
  802548:	2805883a 	mov	r2,r5
  80254c:	300f883a 	mov	r7,r6
  802550:	180b883a 	mov	r5,r3
  802554:	100d883a 	mov	r6,r2
  802558:	08005e81 	jmpi	8005e8 <___vfprintf_internal_r>

0080255c <__sbprintf>:
  80255c:	2880030b 	ldhu	r2,12(r5)
  802560:	2ac01917 	ldw	r11,100(r5)
  802564:	2a80038b 	ldhu	r10,14(r5)
  802568:	2a400717 	ldw	r9,28(r5)
  80256c:	2a000917 	ldw	r8,36(r5)
  802570:	defee204 	addi	sp,sp,-1144
  802574:	00c10004 	movi	r3,1024
  802578:	dc011a15 	stw	r16,1128(sp)
  80257c:	10bfff4c 	andi	r2,r2,65533
  802580:	2821883a 	mov	r16,r5
  802584:	d8cb883a 	add	r5,sp,r3
  802588:	dc811c15 	stw	r18,1136(sp)
  80258c:	dc411b15 	stw	r17,1132(sp)
  802590:	dfc11d15 	stw	ra,1140(sp)
  802594:	2025883a 	mov	r18,r4
  802598:	d881030d 	sth	r2,1036(sp)
  80259c:	dac11915 	stw	r11,1124(sp)
  8025a0:	da81038d 	sth	r10,1038(sp)
  8025a4:	da410715 	stw	r9,1052(sp)
  8025a8:	da010915 	stw	r8,1060(sp)
  8025ac:	dec10015 	stw	sp,1024(sp)
  8025b0:	dec10415 	stw	sp,1040(sp)
  8025b4:	d8c10215 	stw	r3,1032(sp)
  8025b8:	d8c10515 	stw	r3,1044(sp)
  8025bc:	d8010615 	stw	zero,1048(sp)
  8025c0:	08005e80 	call	8005e8 <___vfprintf_internal_r>
  8025c4:	1023883a 	mov	r17,r2
  8025c8:	10000416 	blt	r2,zero,8025dc <__sbprintf+0x80>
  8025cc:	9009883a 	mov	r4,r18
  8025d0:	d9410004 	addi	r5,sp,1024
  8025d4:	080429c0 	call	80429c <_fflush_r>
  8025d8:	10000d1e 	bne	r2,zero,802610 <__sbprintf+0xb4>
  8025dc:	d8c1030b 	ldhu	r3,1036(sp)
  8025e0:	18c0100c 	andi	r3,r3,64
  8025e4:	18000326 	beq	r3,zero,8025f4 <__sbprintf+0x98>
  8025e8:	8080030b 	ldhu	r2,12(r16)
  8025ec:	10801014 	ori	r2,r2,64
  8025f0:	8080030d 	sth	r2,12(r16)
  8025f4:	8805883a 	mov	r2,r17
  8025f8:	dfc11d17 	ldw	ra,1140(sp)
  8025fc:	dc811c17 	ldw	r18,1136(sp)
  802600:	dc411b17 	ldw	r17,1132(sp)
  802604:	dc011a17 	ldw	r16,1128(sp)
  802608:	dec11e04 	addi	sp,sp,1144
  80260c:	f800283a 	ret
  802610:	047fffc4 	movi	r17,-1
  802614:	003ff106 	br	8025dc <__alt_data_end+0xff8025dc>

00802618 <__swsetup_r>:
  802618:	00802074 	movhi	r2,129
  80261c:	defffd04 	addi	sp,sp,-12
  802620:	108b1c04 	addi	r2,r2,11376
  802624:	dc400115 	stw	r17,4(sp)
  802628:	2023883a 	mov	r17,r4
  80262c:	11000017 	ldw	r4,0(r2)
  802630:	dc000015 	stw	r16,0(sp)
  802634:	dfc00215 	stw	ra,8(sp)
  802638:	2821883a 	mov	r16,r5
  80263c:	20000226 	beq	r4,zero,802648 <__swsetup_r+0x30>
  802640:	20c00e17 	ldw	r3,56(r4)
  802644:	18003126 	beq	r3,zero,80270c <__swsetup_r+0xf4>
  802648:	8080030b 	ldhu	r2,12(r16)
  80264c:	10c0020c 	andi	r3,r2,8
  802650:	100d883a 	mov	r6,r2
  802654:	18000f26 	beq	r3,zero,802694 <__swsetup_r+0x7c>
  802658:	80c00417 	ldw	r3,16(r16)
  80265c:	18001526 	beq	r3,zero,8026b4 <__swsetup_r+0x9c>
  802660:	1100004c 	andi	r4,r2,1
  802664:	20001c1e 	bne	r4,zero,8026d8 <__swsetup_r+0xc0>
  802668:	1080008c 	andi	r2,r2,2
  80266c:	1000291e 	bne	r2,zero,802714 <__swsetup_r+0xfc>
  802670:	80800517 	ldw	r2,20(r16)
  802674:	80800215 	stw	r2,8(r16)
  802678:	18001c26 	beq	r3,zero,8026ec <__swsetup_r+0xd4>
  80267c:	0005883a 	mov	r2,zero
  802680:	dfc00217 	ldw	ra,8(sp)
  802684:	dc400117 	ldw	r17,4(sp)
  802688:	dc000017 	ldw	r16,0(sp)
  80268c:	dec00304 	addi	sp,sp,12
  802690:	f800283a 	ret
  802694:	3080040c 	andi	r2,r6,16
  802698:	10002e26 	beq	r2,zero,802754 <__swsetup_r+0x13c>
  80269c:	3080010c 	andi	r2,r6,4
  8026a0:	10001e1e 	bne	r2,zero,80271c <__swsetup_r+0x104>
  8026a4:	80c00417 	ldw	r3,16(r16)
  8026a8:	30800214 	ori	r2,r6,8
  8026ac:	8080030d 	sth	r2,12(r16)
  8026b0:	183feb1e 	bne	r3,zero,802660 <__alt_data_end+0xff802660>
  8026b4:	1140a00c 	andi	r5,r2,640
  8026b8:	01008004 	movi	r4,512
  8026bc:	293fe826 	beq	r5,r4,802660 <__alt_data_end+0xff802660>
  8026c0:	8809883a 	mov	r4,r17
  8026c4:	800b883a 	mov	r5,r16
  8026c8:	0804d440 	call	804d44 <__smakebuf_r>
  8026cc:	8080030b 	ldhu	r2,12(r16)
  8026d0:	80c00417 	ldw	r3,16(r16)
  8026d4:	003fe206 	br	802660 <__alt_data_end+0xff802660>
  8026d8:	80800517 	ldw	r2,20(r16)
  8026dc:	80000215 	stw	zero,8(r16)
  8026e0:	0085c83a 	sub	r2,zero,r2
  8026e4:	80800615 	stw	r2,24(r16)
  8026e8:	183fe41e 	bne	r3,zero,80267c <__alt_data_end+0xff80267c>
  8026ec:	80c0030b 	ldhu	r3,12(r16)
  8026f0:	0005883a 	mov	r2,zero
  8026f4:	1900200c 	andi	r4,r3,128
  8026f8:	203fe126 	beq	r4,zero,802680 <__alt_data_end+0xff802680>
  8026fc:	18c01014 	ori	r3,r3,64
  802700:	80c0030d 	sth	r3,12(r16)
  802704:	00bfffc4 	movi	r2,-1
  802708:	003fdd06 	br	802680 <__alt_data_end+0xff802680>
  80270c:	08046780 	call	804678 <__sinit>
  802710:	003fcd06 	br	802648 <__alt_data_end+0xff802648>
  802714:	0005883a 	mov	r2,zero
  802718:	003fd606 	br	802674 <__alt_data_end+0xff802674>
  80271c:	81400c17 	ldw	r5,48(r16)
  802720:	28000626 	beq	r5,zero,80273c <__swsetup_r+0x124>
  802724:	80801004 	addi	r2,r16,64
  802728:	28800326 	beq	r5,r2,802738 <__swsetup_r+0x120>
  80272c:	8809883a 	mov	r4,r17
  802730:	08047ec0 	call	8047ec <_free_r>
  802734:	8180030b 	ldhu	r6,12(r16)
  802738:	80000c15 	stw	zero,48(r16)
  80273c:	80c00417 	ldw	r3,16(r16)
  802740:	00bff6c4 	movi	r2,-37
  802744:	118c703a 	and	r6,r2,r6
  802748:	80000115 	stw	zero,4(r16)
  80274c:	80c00015 	stw	r3,0(r16)
  802750:	003fd506 	br	8026a8 <__alt_data_end+0xff8026a8>
  802754:	00800244 	movi	r2,9
  802758:	88800015 	stw	r2,0(r17)
  80275c:	30801014 	ori	r2,r6,64
  802760:	8080030d 	sth	r2,12(r16)
  802764:	00bfffc4 	movi	r2,-1
  802768:	003fc506 	br	802680 <__alt_data_end+0xff802680>

0080276c <quorem>:
  80276c:	defff704 	addi	sp,sp,-36
  802770:	dc800215 	stw	r18,8(sp)
  802774:	20800417 	ldw	r2,16(r4)
  802778:	2c800417 	ldw	r18,16(r5)
  80277c:	dfc00815 	stw	ra,32(sp)
  802780:	ddc00715 	stw	r23,28(sp)
  802784:	dd800615 	stw	r22,24(sp)
  802788:	dd400515 	stw	r21,20(sp)
  80278c:	dd000415 	stw	r20,16(sp)
  802790:	dcc00315 	stw	r19,12(sp)
  802794:	dc400115 	stw	r17,4(sp)
  802798:	dc000015 	stw	r16,0(sp)
  80279c:	14807116 	blt	r2,r18,802964 <quorem+0x1f8>
  8027a0:	94bfffc4 	addi	r18,r18,-1
  8027a4:	94ad883a 	add	r22,r18,r18
  8027a8:	b5ad883a 	add	r22,r22,r22
  8027ac:	2c400504 	addi	r17,r5,20
  8027b0:	8da9883a 	add	r20,r17,r22
  8027b4:	25400504 	addi	r21,r4,20
  8027b8:	282f883a 	mov	r23,r5
  8027bc:	adad883a 	add	r22,r21,r22
  8027c0:	a1400017 	ldw	r5,0(r20)
  8027c4:	2021883a 	mov	r16,r4
  8027c8:	b1000017 	ldw	r4,0(r22)
  8027cc:	29400044 	addi	r5,r5,1
  8027d0:	080a2740 	call	80a274 <__udivsi3>
  8027d4:	1027883a 	mov	r19,r2
  8027d8:	10002c26 	beq	r2,zero,80288c <quorem+0x120>
  8027dc:	a813883a 	mov	r9,r21
  8027e0:	8811883a 	mov	r8,r17
  8027e4:	0009883a 	mov	r4,zero
  8027e8:	000d883a 	mov	r6,zero
  8027ec:	41c00017 	ldw	r7,0(r8)
  8027f0:	49400017 	ldw	r5,0(r9)
  8027f4:	42000104 	addi	r8,r8,4
  8027f8:	38bfffcc 	andi	r2,r7,65535
  8027fc:	14c5383a 	mul	r2,r2,r19
  802800:	380ed43a 	srli	r7,r7,16
  802804:	28ffffcc 	andi	r3,r5,65535
  802808:	2085883a 	add	r2,r4,r2
  80280c:	1008d43a 	srli	r4,r2,16
  802810:	3ccf383a 	mul	r7,r7,r19
  802814:	198d883a 	add	r6,r3,r6
  802818:	10ffffcc 	andi	r3,r2,65535
  80281c:	30c7c83a 	sub	r3,r6,r3
  802820:	280ad43a 	srli	r5,r5,16
  802824:	21c9883a 	add	r4,r4,r7
  802828:	180dd43a 	srai	r6,r3,16
  80282c:	20bfffcc 	andi	r2,r4,65535
  802830:	288bc83a 	sub	r5,r5,r2
  802834:	298b883a 	add	r5,r5,r6
  802838:	280e943a 	slli	r7,r5,16
  80283c:	18ffffcc 	andi	r3,r3,65535
  802840:	2008d43a 	srli	r4,r4,16
  802844:	38ceb03a 	or	r7,r7,r3
  802848:	49c00015 	stw	r7,0(r9)
  80284c:	280dd43a 	srai	r6,r5,16
  802850:	4a400104 	addi	r9,r9,4
  802854:	a23fe52e 	bgeu	r20,r8,8027ec <__alt_data_end+0xff8027ec>
  802858:	b0800017 	ldw	r2,0(r22)
  80285c:	10000b1e 	bne	r2,zero,80288c <quorem+0x120>
  802860:	b0bfff04 	addi	r2,r22,-4
  802864:	a880082e 	bgeu	r21,r2,802888 <quorem+0x11c>
  802868:	b0ffff17 	ldw	r3,-4(r22)
  80286c:	18000326 	beq	r3,zero,80287c <quorem+0x110>
  802870:	00000506 	br	802888 <quorem+0x11c>
  802874:	10c00017 	ldw	r3,0(r2)
  802878:	1800031e 	bne	r3,zero,802888 <quorem+0x11c>
  80287c:	10bfff04 	addi	r2,r2,-4
  802880:	94bfffc4 	addi	r18,r18,-1
  802884:	a8bffb36 	bltu	r21,r2,802874 <__alt_data_end+0xff802874>
  802888:	84800415 	stw	r18,16(r16)
  80288c:	8009883a 	mov	r4,r16
  802890:	b80b883a 	mov	r5,r23
  802894:	08062bc0 	call	8062bc <__mcmp>
  802898:	10002616 	blt	r2,zero,802934 <quorem+0x1c8>
  80289c:	9cc00044 	addi	r19,r19,1
  8028a0:	a80d883a 	mov	r6,r21
  8028a4:	000b883a 	mov	r5,zero
  8028a8:	31000017 	ldw	r4,0(r6)
  8028ac:	88800017 	ldw	r2,0(r17)
  8028b0:	31800104 	addi	r6,r6,4
  8028b4:	20ffffcc 	andi	r3,r4,65535
  8028b8:	194b883a 	add	r5,r3,r5
  8028bc:	10ffffcc 	andi	r3,r2,65535
  8028c0:	28c7c83a 	sub	r3,r5,r3
  8028c4:	1004d43a 	srli	r2,r2,16
  8028c8:	2008d43a 	srli	r4,r4,16
  8028cc:	180bd43a 	srai	r5,r3,16
  8028d0:	18ffffcc 	andi	r3,r3,65535
  8028d4:	2089c83a 	sub	r4,r4,r2
  8028d8:	2149883a 	add	r4,r4,r5
  8028dc:	2004943a 	slli	r2,r4,16
  8028e0:	8c400104 	addi	r17,r17,4
  8028e4:	200bd43a 	srai	r5,r4,16
  8028e8:	10c6b03a 	or	r3,r2,r3
  8028ec:	30ffff15 	stw	r3,-4(r6)
  8028f0:	a47fed2e 	bgeu	r20,r17,8028a8 <__alt_data_end+0xff8028a8>
  8028f4:	9485883a 	add	r2,r18,r18
  8028f8:	1085883a 	add	r2,r2,r2
  8028fc:	a887883a 	add	r3,r21,r2
  802900:	18800017 	ldw	r2,0(r3)
  802904:	10000b1e 	bne	r2,zero,802934 <quorem+0x1c8>
  802908:	18bfff04 	addi	r2,r3,-4
  80290c:	a880082e 	bgeu	r21,r2,802930 <quorem+0x1c4>
  802910:	18ffff17 	ldw	r3,-4(r3)
  802914:	18000326 	beq	r3,zero,802924 <quorem+0x1b8>
  802918:	00000506 	br	802930 <quorem+0x1c4>
  80291c:	10c00017 	ldw	r3,0(r2)
  802920:	1800031e 	bne	r3,zero,802930 <quorem+0x1c4>
  802924:	10bfff04 	addi	r2,r2,-4
  802928:	94bfffc4 	addi	r18,r18,-1
  80292c:	a8bffb36 	bltu	r21,r2,80291c <__alt_data_end+0xff80291c>
  802930:	84800415 	stw	r18,16(r16)
  802934:	9805883a 	mov	r2,r19
  802938:	dfc00817 	ldw	ra,32(sp)
  80293c:	ddc00717 	ldw	r23,28(sp)
  802940:	dd800617 	ldw	r22,24(sp)
  802944:	dd400517 	ldw	r21,20(sp)
  802948:	dd000417 	ldw	r20,16(sp)
  80294c:	dcc00317 	ldw	r19,12(sp)
  802950:	dc800217 	ldw	r18,8(sp)
  802954:	dc400117 	ldw	r17,4(sp)
  802958:	dc000017 	ldw	r16,0(sp)
  80295c:	dec00904 	addi	sp,sp,36
  802960:	f800283a 	ret
  802964:	0005883a 	mov	r2,zero
  802968:	003ff306 	br	802938 <__alt_data_end+0xff802938>

0080296c <_dtoa_r>:
  80296c:	20801017 	ldw	r2,64(r4)
  802970:	deffde04 	addi	sp,sp,-136
  802974:	dd401d15 	stw	r21,116(sp)
  802978:	dcc01b15 	stw	r19,108(sp)
  80297c:	dc801a15 	stw	r18,104(sp)
  802980:	dc401915 	stw	r17,100(sp)
  802984:	dc001815 	stw	r16,96(sp)
  802988:	dfc02115 	stw	ra,132(sp)
  80298c:	df002015 	stw	fp,128(sp)
  802990:	ddc01f15 	stw	r23,124(sp)
  802994:	dd801e15 	stw	r22,120(sp)
  802998:	dd001c15 	stw	r20,112(sp)
  80299c:	d9c00315 	stw	r7,12(sp)
  8029a0:	2021883a 	mov	r16,r4
  8029a4:	302b883a 	mov	r21,r6
  8029a8:	2825883a 	mov	r18,r5
  8029ac:	dc402417 	ldw	r17,144(sp)
  8029b0:	3027883a 	mov	r19,r6
  8029b4:	10000826 	beq	r2,zero,8029d8 <_dtoa_r+0x6c>
  8029b8:	21801117 	ldw	r6,68(r4)
  8029bc:	00c00044 	movi	r3,1
  8029c0:	100b883a 	mov	r5,r2
  8029c4:	1986983a 	sll	r3,r3,r6
  8029c8:	11800115 	stw	r6,4(r2)
  8029cc:	10c00215 	stw	r3,8(r2)
  8029d0:	0805a900 	call	805a90 <_Bfree>
  8029d4:	80001015 	stw	zero,64(r16)
  8029d8:	a8002d16 	blt	r21,zero,802a90 <_dtoa_r+0x124>
  8029dc:	88000015 	stw	zero,0(r17)
  8029e0:	a8dffc2c 	andhi	r3,r21,32752
  8029e4:	009ffc34 	movhi	r2,32752
  8029e8:	18801b26 	beq	r3,r2,802a58 <_dtoa_r+0xec>
  8029ec:	9009883a 	mov	r4,r18
  8029f0:	980b883a 	mov	r5,r19
  8029f4:	000d883a 	mov	r6,zero
  8029f8:	000f883a 	mov	r7,zero
  8029fc:	080b3ec0 	call	80b3ec <__eqdf2>
  802a00:	10002a1e 	bne	r2,zero,802aac <_dtoa_r+0x140>
  802a04:	d8c02317 	ldw	r3,140(sp)
  802a08:	d9002517 	ldw	r4,148(sp)
  802a0c:	00800044 	movi	r2,1
  802a10:	18800015 	stw	r2,0(r3)
  802a14:	2001a226 	beq	r4,zero,8030a0 <_dtoa_r+0x734>
  802a18:	00802074 	movhi	r2,129
  802a1c:	10827e44 	addi	r2,r2,2553
  802a20:	20800015 	stw	r2,0(r4)
  802a24:	10bfffc4 	addi	r2,r2,-1
  802a28:	dfc02117 	ldw	ra,132(sp)
  802a2c:	df002017 	ldw	fp,128(sp)
  802a30:	ddc01f17 	ldw	r23,124(sp)
  802a34:	dd801e17 	ldw	r22,120(sp)
  802a38:	dd401d17 	ldw	r21,116(sp)
  802a3c:	dd001c17 	ldw	r20,112(sp)
  802a40:	dcc01b17 	ldw	r19,108(sp)
  802a44:	dc801a17 	ldw	r18,104(sp)
  802a48:	dc401917 	ldw	r17,100(sp)
  802a4c:	dc001817 	ldw	r16,96(sp)
  802a50:	dec02204 	addi	sp,sp,136
  802a54:	f800283a 	ret
  802a58:	d8c02317 	ldw	r3,140(sp)
  802a5c:	0089c3c4 	movi	r2,9999
  802a60:	18800015 	stw	r2,0(r3)
  802a64:	90017c26 	beq	r18,zero,803058 <_dtoa_r+0x6ec>
  802a68:	00802074 	movhi	r2,129
  802a6c:	10828a04 	addi	r2,r2,2600
  802a70:	d9002517 	ldw	r4,148(sp)
  802a74:	203fec26 	beq	r4,zero,802a28 <__alt_data_end+0xff802a28>
  802a78:	10c000c7 	ldb	r3,3(r2)
  802a7c:	18017d1e 	bne	r3,zero,803074 <_dtoa_r+0x708>
  802a80:	10c000c4 	addi	r3,r2,3
  802a84:	d9802517 	ldw	r6,148(sp)
  802a88:	30c00015 	stw	r3,0(r6)
  802a8c:	003fe606 	br	802a28 <__alt_data_end+0xff802a28>
  802a90:	04e00034 	movhi	r19,32768
  802a94:	9cffffc4 	addi	r19,r19,-1
  802a98:	00800044 	movi	r2,1
  802a9c:	ace6703a 	and	r19,r21,r19
  802aa0:	88800015 	stw	r2,0(r17)
  802aa4:	982b883a 	mov	r21,r19
  802aa8:	003fcd06 	br	8029e0 <__alt_data_end+0xff8029e0>
  802aac:	d8800204 	addi	r2,sp,8
  802ab0:	a822d53a 	srli	r17,r21,20
  802ab4:	d8800015 	stw	r2,0(sp)
  802ab8:	8009883a 	mov	r4,r16
  802abc:	900b883a 	mov	r5,r18
  802ac0:	980d883a 	mov	r6,r19
  802ac4:	d9c00104 	addi	r7,sp,4
  802ac8:	08066300 	call	806630 <__d2b>
  802acc:	1039883a 	mov	fp,r2
  802ad0:	88016a1e 	bne	r17,zero,80307c <_dtoa_r+0x710>
  802ad4:	dd000217 	ldw	r20,8(sp)
  802ad8:	dc400117 	ldw	r17,4(sp)
  802adc:	00befbc4 	movi	r2,-1041
  802ae0:	a463883a 	add	r17,r20,r17
  802ae4:	8882ea16 	blt	r17,r2,803690 <_dtoa_r+0xd24>
  802ae8:	00bf0384 	movi	r2,-1010
  802aec:	1445c83a 	sub	r2,r2,r17
  802af0:	89010484 	addi	r4,r17,1042
  802af4:	a8aa983a 	sll	r21,r21,r2
  802af8:	9108d83a 	srl	r4,r18,r4
  802afc:	a908b03a 	or	r4,r21,r4
  802b00:	080c77c0 	call	80c77c <__floatunsidf>
  802b04:	017f8434 	movhi	r5,65040
  802b08:	01800044 	movi	r6,1
  802b0c:	1009883a 	mov	r4,r2
  802b10:	194b883a 	add	r5,r3,r5
  802b14:	8c7fffc4 	addi	r17,r17,-1
  802b18:	d9800f15 	stw	r6,60(sp)
  802b1c:	000d883a 	mov	r6,zero
  802b20:	01cffe34 	movhi	r7,16376
  802b24:	080bd540 	call	80bd54 <__subdf3>
  802b28:	0198dbf4 	movhi	r6,25455
  802b2c:	01cff4f4 	movhi	r7,16339
  802b30:	1009883a 	mov	r4,r2
  802b34:	180b883a 	mov	r5,r3
  802b38:	3190d844 	addi	r6,r6,17249
  802b3c:	39e1e9c4 	addi	r7,r7,-30809
  802b40:	080b6300 	call	80b630 <__muldf3>
  802b44:	01a2d874 	movhi	r6,35681
  802b48:	01cff1f4 	movhi	r7,16327
  802b4c:	180b883a 	mov	r5,r3
  802b50:	31b22cc4 	addi	r6,r6,-14157
  802b54:	39e28a04 	addi	r7,r7,-30168
  802b58:	1009883a 	mov	r4,r2
  802b5c:	080a2840 	call	80a284 <__adddf3>
  802b60:	8809883a 	mov	r4,r17
  802b64:	102d883a 	mov	r22,r2
  802b68:	182b883a 	mov	r21,r3
  802b6c:	080c6ac0 	call	80c6ac <__floatsidf>
  802b70:	019427f4 	movhi	r6,20639
  802b74:	01cff4f4 	movhi	r7,16339
  802b78:	1009883a 	mov	r4,r2
  802b7c:	180b883a 	mov	r5,r3
  802b80:	319e7ec4 	addi	r6,r6,31227
  802b84:	39d104c4 	addi	r7,r7,17427
  802b88:	080b6300 	call	80b630 <__muldf3>
  802b8c:	b009883a 	mov	r4,r22
  802b90:	a80b883a 	mov	r5,r21
  802b94:	100d883a 	mov	r6,r2
  802b98:	180f883a 	mov	r7,r3
  802b9c:	080a2840 	call	80a284 <__adddf3>
  802ba0:	1009883a 	mov	r4,r2
  802ba4:	180b883a 	mov	r5,r3
  802ba8:	102d883a 	mov	r22,r2
  802bac:	182b883a 	mov	r21,r3
  802bb0:	080c6240 	call	80c624 <__fixdfsi>
  802bb4:	b009883a 	mov	r4,r22
  802bb8:	a80b883a 	mov	r5,r21
  802bbc:	000d883a 	mov	r6,zero
  802bc0:	000f883a 	mov	r7,zero
  802bc4:	d8800515 	stw	r2,20(sp)
  802bc8:	080b5500 	call	80b550 <__ledf2>
  802bcc:	10023116 	blt	r2,zero,803494 <_dtoa_r+0xb28>
  802bd0:	d8c00517 	ldw	r3,20(sp)
  802bd4:	00800584 	movi	r2,22
  802bd8:	10c21f36 	bltu	r2,r3,803458 <_dtoa_r+0xaec>
  802bdc:	180490fa 	slli	r2,r3,3
  802be0:	00c02074 	movhi	r3,129
  802be4:	18c2a604 	addi	r3,r3,2712
  802be8:	1885883a 	add	r2,r3,r2
  802bec:	11000017 	ldw	r4,0(r2)
  802bf0:	11400117 	ldw	r5,4(r2)
  802bf4:	900d883a 	mov	r6,r18
  802bf8:	980f883a 	mov	r7,r19
  802bfc:	080b4700 	call	80b470 <__gedf2>
  802c00:	0082a70e 	bge	zero,r2,8036a0 <_dtoa_r+0xd34>
  802c04:	d9000517 	ldw	r4,20(sp)
  802c08:	d8000d15 	stw	zero,52(sp)
  802c0c:	213fffc4 	addi	r4,r4,-1
  802c10:	d9000515 	stw	r4,20(sp)
  802c14:	a463c83a 	sub	r17,r20,r17
  802c18:	8dbfffc4 	addi	r22,r17,-1
  802c1c:	b0021916 	blt	r22,zero,803484 <_dtoa_r+0xb18>
  802c20:	d8000815 	stw	zero,32(sp)
  802c24:	d8800517 	ldw	r2,20(sp)
  802c28:	10020e16 	blt	r2,zero,803464 <_dtoa_r+0xaf8>
  802c2c:	b0ad883a 	add	r22,r22,r2
  802c30:	d8800a15 	stw	r2,40(sp)
  802c34:	d8000915 	stw	zero,36(sp)
  802c38:	d8c00317 	ldw	r3,12(sp)
  802c3c:	00800244 	movi	r2,9
  802c40:	10c11a36 	bltu	r2,r3,8030ac <_dtoa_r+0x740>
  802c44:	00800144 	movi	r2,5
  802c48:	10c4fc0e 	bge	r2,r3,80403c <_dtoa_r+0x16d0>
  802c4c:	18ffff04 	addi	r3,r3,-4
  802c50:	d8c00315 	stw	r3,12(sp)
  802c54:	0029883a 	mov	r20,zero
  802c58:	d9800317 	ldw	r6,12(sp)
  802c5c:	008000c4 	movi	r2,3
  802c60:	3083bd26 	beq	r6,r2,803b58 <_dtoa_r+0x11ec>
  802c64:	1183670e 	bge	r2,r6,803a04 <_dtoa_r+0x1098>
  802c68:	d8c00317 	ldw	r3,12(sp)
  802c6c:	00800104 	movi	r2,4
  802c70:	1882e726 	beq	r3,r2,803810 <_dtoa_r+0xea4>
  802c74:	00800144 	movi	r2,5
  802c78:	1884f21e 	bne	r3,r2,804044 <_dtoa_r+0x16d8>
  802c7c:	00800044 	movi	r2,1
  802c80:	d8800b15 	stw	r2,44(sp)
  802c84:	d8c02217 	ldw	r3,136(sp)
  802c88:	d9000517 	ldw	r4,20(sp)
  802c8c:	1907883a 	add	r3,r3,r4
  802c90:	19800044 	addi	r6,r3,1
  802c94:	d8c00c15 	stw	r3,48(sp)
  802c98:	d9800615 	stw	r6,24(sp)
  802c9c:	0183c30e 	bge	zero,r6,803bac <_dtoa_r+0x1240>
  802ca0:	d9800617 	ldw	r6,24(sp)
  802ca4:	3023883a 	mov	r17,r6
  802ca8:	80001115 	stw	zero,68(r16)
  802cac:	008005c4 	movi	r2,23
  802cb0:	1184f62e 	bgeu	r2,r6,80408c <_dtoa_r+0x1720>
  802cb4:	00c00044 	movi	r3,1
  802cb8:	00800104 	movi	r2,4
  802cbc:	1085883a 	add	r2,r2,r2
  802cc0:	11000504 	addi	r4,r2,20
  802cc4:	180b883a 	mov	r5,r3
  802cc8:	18c00044 	addi	r3,r3,1
  802ccc:	313ffb2e 	bgeu	r6,r4,802cbc <__alt_data_end+0xff802cbc>
  802cd0:	81401115 	stw	r5,68(r16)
  802cd4:	8009883a 	mov	r4,r16
  802cd8:	08059e80 	call	8059e8 <_Balloc>
  802cdc:	d8800715 	stw	r2,28(sp)
  802ce0:	80801015 	stw	r2,64(r16)
  802ce4:	00800384 	movi	r2,14
  802ce8:	1440fd36 	bltu	r2,r17,8030e0 <_dtoa_r+0x774>
  802cec:	a000fc26 	beq	r20,zero,8030e0 <_dtoa_r+0x774>
  802cf0:	d8800517 	ldw	r2,20(sp)
  802cf4:	0083b90e 	bge	zero,r2,803bdc <_dtoa_r+0x1270>
  802cf8:	d8c00517 	ldw	r3,20(sp)
  802cfc:	108003cc 	andi	r2,r2,15
  802d00:	100490fa 	slli	r2,r2,3
  802d04:	182fd13a 	srai	r23,r3,4
  802d08:	00c02074 	movhi	r3,129
  802d0c:	18c2a604 	addi	r3,r3,2712
  802d10:	1885883a 	add	r2,r3,r2
  802d14:	b8c0040c 	andi	r3,r23,16
  802d18:	12c00017 	ldw	r11,0(r2)
  802d1c:	12800117 	ldw	r10,4(r2)
  802d20:	18039726 	beq	r3,zero,803b80 <_dtoa_r+0x1214>
  802d24:	00802074 	movhi	r2,129
  802d28:	10829c04 	addi	r2,r2,2672
  802d2c:	11800817 	ldw	r6,32(r2)
  802d30:	11c00917 	ldw	r7,36(r2)
  802d34:	9009883a 	mov	r4,r18
  802d38:	980b883a 	mov	r5,r19
  802d3c:	da801615 	stw	r10,88(sp)
  802d40:	dac01515 	stw	r11,84(sp)
  802d44:	080ab200 	call	80ab20 <__divdf3>
  802d48:	da801617 	ldw	r10,88(sp)
  802d4c:	dac01517 	ldw	r11,84(sp)
  802d50:	bdc003cc 	andi	r23,r23,15
  802d54:	044000c4 	movi	r17,3
  802d58:	d8800e15 	stw	r2,56(sp)
  802d5c:	182b883a 	mov	r21,r3
  802d60:	b8001126 	beq	r23,zero,802da8 <_dtoa_r+0x43c>
  802d64:	05002074 	movhi	r20,129
  802d68:	a5029c04 	addi	r20,r20,2672
  802d6c:	5805883a 	mov	r2,r11
  802d70:	5007883a 	mov	r3,r10
  802d74:	b980004c 	andi	r6,r23,1
  802d78:	1009883a 	mov	r4,r2
  802d7c:	b82fd07a 	srai	r23,r23,1
  802d80:	180b883a 	mov	r5,r3
  802d84:	30000426 	beq	r6,zero,802d98 <_dtoa_r+0x42c>
  802d88:	a1800017 	ldw	r6,0(r20)
  802d8c:	a1c00117 	ldw	r7,4(r20)
  802d90:	8c400044 	addi	r17,r17,1
  802d94:	080b6300 	call	80b630 <__muldf3>
  802d98:	a5000204 	addi	r20,r20,8
  802d9c:	b83ff51e 	bne	r23,zero,802d74 <__alt_data_end+0xff802d74>
  802da0:	1017883a 	mov	r11,r2
  802da4:	1815883a 	mov	r10,r3
  802da8:	d9000e17 	ldw	r4,56(sp)
  802dac:	a80b883a 	mov	r5,r21
  802db0:	580d883a 	mov	r6,r11
  802db4:	500f883a 	mov	r7,r10
  802db8:	080ab200 	call	80ab20 <__divdf3>
  802dbc:	1029883a 	mov	r20,r2
  802dc0:	182b883a 	mov	r21,r3
  802dc4:	d9800d17 	ldw	r6,52(sp)
  802dc8:	30000626 	beq	r6,zero,802de4 <_dtoa_r+0x478>
  802dcc:	a009883a 	mov	r4,r20
  802dd0:	a80b883a 	mov	r5,r21
  802dd4:	000d883a 	mov	r6,zero
  802dd8:	01cffc34 	movhi	r7,16368
  802ddc:	080b5500 	call	80b550 <__ledf2>
  802de0:	10043216 	blt	r2,zero,803eac <_dtoa_r+0x1540>
  802de4:	8809883a 	mov	r4,r17
  802de8:	080c6ac0 	call	80c6ac <__floatsidf>
  802dec:	1009883a 	mov	r4,r2
  802df0:	180b883a 	mov	r5,r3
  802df4:	a00d883a 	mov	r6,r20
  802df8:	a80f883a 	mov	r7,r21
  802dfc:	080b6300 	call	80b630 <__muldf3>
  802e00:	000d883a 	mov	r6,zero
  802e04:	1009883a 	mov	r4,r2
  802e08:	180b883a 	mov	r5,r3
  802e0c:	01d00734 	movhi	r7,16412
  802e10:	080a2840 	call	80a284 <__adddf3>
  802e14:	1023883a 	mov	r17,r2
  802e18:	d9800617 	ldw	r6,24(sp)
  802e1c:	00bf3034 	movhi	r2,64704
  802e20:	1885883a 	add	r2,r3,r2
  802e24:	d8800e15 	stw	r2,56(sp)
  802e28:	30032e26 	beq	r6,zero,803ae4 <_dtoa_r+0x1178>
  802e2c:	d8c00517 	ldw	r3,20(sp)
  802e30:	da800617 	ldw	r10,24(sp)
  802e34:	d8c01215 	stw	r3,72(sp)
  802e38:	d9000b17 	ldw	r4,44(sp)
  802e3c:	2003b026 	beq	r4,zero,803d00 <_dtoa_r+0x1394>
  802e40:	50bfffc4 	addi	r2,r10,-1
  802e44:	100490fa 	slli	r2,r2,3
  802e48:	00c02074 	movhi	r3,129
  802e4c:	18c2a604 	addi	r3,r3,2712
  802e50:	1885883a 	add	r2,r3,r2
  802e54:	11800017 	ldw	r6,0(r2)
  802e58:	11c00117 	ldw	r7,4(r2)
  802e5c:	d8800717 	ldw	r2,28(sp)
  802e60:	0009883a 	mov	r4,zero
  802e64:	014ff834 	movhi	r5,16352
  802e68:	da801615 	stw	r10,88(sp)
  802e6c:	15c00044 	addi	r23,r2,1
  802e70:	080ab200 	call	80ab20 <__divdf3>
  802e74:	d9c00e17 	ldw	r7,56(sp)
  802e78:	880d883a 	mov	r6,r17
  802e7c:	1009883a 	mov	r4,r2
  802e80:	180b883a 	mov	r5,r3
  802e84:	080bd540 	call	80bd54 <__subdf3>
  802e88:	a80b883a 	mov	r5,r21
  802e8c:	a009883a 	mov	r4,r20
  802e90:	d8c01015 	stw	r3,64(sp)
  802e94:	d8800e15 	stw	r2,56(sp)
  802e98:	080c6240 	call	80c624 <__fixdfsi>
  802e9c:	1009883a 	mov	r4,r2
  802ea0:	d8801715 	stw	r2,92(sp)
  802ea4:	080c6ac0 	call	80c6ac <__floatsidf>
  802ea8:	a009883a 	mov	r4,r20
  802eac:	a80b883a 	mov	r5,r21
  802eb0:	100d883a 	mov	r6,r2
  802eb4:	180f883a 	mov	r7,r3
  802eb8:	080bd540 	call	80bd54 <__subdf3>
  802ebc:	da001717 	ldw	r8,92(sp)
  802ec0:	1829883a 	mov	r20,r3
  802ec4:	d8c00717 	ldw	r3,28(sp)
  802ec8:	d9000e17 	ldw	r4,56(sp)
  802ecc:	d9401017 	ldw	r5,64(sp)
  802ed0:	42000c04 	addi	r8,r8,48
  802ed4:	1023883a 	mov	r17,r2
  802ed8:	1a000005 	stb	r8,0(r3)
  802edc:	880d883a 	mov	r6,r17
  802ee0:	a00f883a 	mov	r7,r20
  802ee4:	402b883a 	mov	r21,r8
  802ee8:	080b4700 	call	80b470 <__gedf2>
  802eec:	00844516 	blt	zero,r2,804004 <_dtoa_r+0x1698>
  802ef0:	0009883a 	mov	r4,zero
  802ef4:	014ffc34 	movhi	r5,16368
  802ef8:	880d883a 	mov	r6,r17
  802efc:	a00f883a 	mov	r7,r20
  802f00:	080bd540 	call	80bd54 <__subdf3>
  802f04:	d9000e17 	ldw	r4,56(sp)
  802f08:	d9401017 	ldw	r5,64(sp)
  802f0c:	100d883a 	mov	r6,r2
  802f10:	180f883a 	mov	r7,r3
  802f14:	080b4700 	call	80b470 <__gedf2>
  802f18:	da801617 	ldw	r10,88(sp)
  802f1c:	00843616 	blt	zero,r2,803ff8 <_dtoa_r+0x168c>
  802f20:	00800044 	movi	r2,1
  802f24:	12806e0e 	bge	r2,r10,8030e0 <_dtoa_r+0x774>
  802f28:	d9000717 	ldw	r4,28(sp)
  802f2c:	dd801315 	stw	r22,76(sp)
  802f30:	dc001115 	stw	r16,68(sp)
  802f34:	2295883a 	add	r10,r4,r10
  802f38:	dcc01415 	stw	r19,80(sp)
  802f3c:	502d883a 	mov	r22,r10
  802f40:	dcc01017 	ldw	r19,64(sp)
  802f44:	b821883a 	mov	r16,r23
  802f48:	dc801015 	stw	r18,64(sp)
  802f4c:	dc800e17 	ldw	r18,56(sp)
  802f50:	00000906 	br	802f78 <_dtoa_r+0x60c>
  802f54:	080bd540 	call	80bd54 <__subdf3>
  802f58:	1009883a 	mov	r4,r2
  802f5c:	180b883a 	mov	r5,r3
  802f60:	900d883a 	mov	r6,r18
  802f64:	980f883a 	mov	r7,r19
  802f68:	080b5500 	call	80b550 <__ledf2>
  802f6c:	10040e16 	blt	r2,zero,803fa8 <_dtoa_r+0x163c>
  802f70:	b821883a 	mov	r16,r23
  802f74:	bd841026 	beq	r23,r22,803fb8 <_dtoa_r+0x164c>
  802f78:	9009883a 	mov	r4,r18
  802f7c:	980b883a 	mov	r5,r19
  802f80:	000d883a 	mov	r6,zero
  802f84:	01d00934 	movhi	r7,16420
  802f88:	080b6300 	call	80b630 <__muldf3>
  802f8c:	000d883a 	mov	r6,zero
  802f90:	01d00934 	movhi	r7,16420
  802f94:	8809883a 	mov	r4,r17
  802f98:	a00b883a 	mov	r5,r20
  802f9c:	1025883a 	mov	r18,r2
  802fa0:	1827883a 	mov	r19,r3
  802fa4:	080b6300 	call	80b630 <__muldf3>
  802fa8:	180b883a 	mov	r5,r3
  802fac:	1009883a 	mov	r4,r2
  802fb0:	1823883a 	mov	r17,r3
  802fb4:	1029883a 	mov	r20,r2
  802fb8:	080c6240 	call	80c624 <__fixdfsi>
  802fbc:	1009883a 	mov	r4,r2
  802fc0:	102b883a 	mov	r21,r2
  802fc4:	080c6ac0 	call	80c6ac <__floatsidf>
  802fc8:	a009883a 	mov	r4,r20
  802fcc:	880b883a 	mov	r5,r17
  802fd0:	100d883a 	mov	r6,r2
  802fd4:	180f883a 	mov	r7,r3
  802fd8:	080bd540 	call	80bd54 <__subdf3>
  802fdc:	ad400c04 	addi	r21,r21,48
  802fe0:	1009883a 	mov	r4,r2
  802fe4:	180b883a 	mov	r5,r3
  802fe8:	900d883a 	mov	r6,r18
  802fec:	980f883a 	mov	r7,r19
  802ff0:	85400005 	stb	r21,0(r16)
  802ff4:	1023883a 	mov	r17,r2
  802ff8:	1829883a 	mov	r20,r3
  802ffc:	080b5500 	call	80b550 <__ledf2>
  803000:	bdc00044 	addi	r23,r23,1
  803004:	0009883a 	mov	r4,zero
  803008:	014ffc34 	movhi	r5,16368
  80300c:	880d883a 	mov	r6,r17
  803010:	a00f883a 	mov	r7,r20
  803014:	103fcf0e 	bge	r2,zero,802f54 <__alt_data_end+0xff802f54>
  803018:	d9801217 	ldw	r6,72(sp)
  80301c:	dc001117 	ldw	r16,68(sp)
  803020:	d9800515 	stw	r6,20(sp)
  803024:	8009883a 	mov	r4,r16
  803028:	e00b883a 	mov	r5,fp
  80302c:	0805a900 	call	805a90 <_Bfree>
  803030:	d8c00517 	ldw	r3,20(sp)
  803034:	d9002317 	ldw	r4,140(sp)
  803038:	d9802517 	ldw	r6,148(sp)
  80303c:	b8000005 	stb	zero,0(r23)
  803040:	18800044 	addi	r2,r3,1
  803044:	20800015 	stw	r2,0(r4)
  803048:	30027226 	beq	r6,zero,803a14 <_dtoa_r+0x10a8>
  80304c:	35c00015 	stw	r23,0(r6)
  803050:	d8800717 	ldw	r2,28(sp)
  803054:	003e7406 	br	802a28 <__alt_data_end+0xff802a28>
  803058:	00800434 	movhi	r2,16
  80305c:	10bfffc4 	addi	r2,r2,-1
  803060:	a8aa703a 	and	r21,r21,r2
  803064:	a83e801e 	bne	r21,zero,802a68 <__alt_data_end+0xff802a68>
  803068:	00802074 	movhi	r2,129
  80306c:	10828704 	addi	r2,r2,2588
  803070:	003e7f06 	br	802a70 <__alt_data_end+0xff802a70>
  803074:	10c00204 	addi	r3,r2,8
  803078:	003e8206 	br	802a84 <__alt_data_end+0xff802a84>
  80307c:	01400434 	movhi	r5,16
  803080:	297fffc4 	addi	r5,r5,-1
  803084:	994a703a 	and	r5,r19,r5
  803088:	9009883a 	mov	r4,r18
  80308c:	8c7f0044 	addi	r17,r17,-1023
  803090:	294ffc34 	orhi	r5,r5,16368
  803094:	dd000217 	ldw	r20,8(sp)
  803098:	d8000f15 	stw	zero,60(sp)
  80309c:	003e9f06 	br	802b1c <__alt_data_end+0xff802b1c>
  8030a0:	00802074 	movhi	r2,129
  8030a4:	10827e04 	addi	r2,r2,2552
  8030a8:	003e5f06 	br	802a28 <__alt_data_end+0xff802a28>
  8030ac:	80001115 	stw	zero,68(r16)
  8030b0:	8009883a 	mov	r4,r16
  8030b4:	000b883a 	mov	r5,zero
  8030b8:	08059e80 	call	8059e8 <_Balloc>
  8030bc:	01bfffc4 	movi	r6,-1
  8030c0:	d8800715 	stw	r2,28(sp)
  8030c4:	80801015 	stw	r2,64(r16)
  8030c8:	00800044 	movi	r2,1
  8030cc:	d9800c15 	stw	r6,48(sp)
  8030d0:	d8800b15 	stw	r2,44(sp)
  8030d4:	d9800615 	stw	r6,24(sp)
  8030d8:	d8002215 	stw	zero,136(sp)
  8030dc:	d8000315 	stw	zero,12(sp)
  8030e0:	d8800117 	ldw	r2,4(sp)
  8030e4:	10008e16 	blt	r2,zero,803320 <_dtoa_r+0x9b4>
  8030e8:	d9000517 	ldw	r4,20(sp)
  8030ec:	00c00384 	movi	r3,14
  8030f0:	19008b16 	blt	r3,r4,803320 <_dtoa_r+0x9b4>
  8030f4:	200490fa 	slli	r2,r4,3
  8030f8:	00c02074 	movhi	r3,129
  8030fc:	d9802217 	ldw	r6,136(sp)
  803100:	18c2a604 	addi	r3,r3,2712
  803104:	1885883a 	add	r2,r3,r2
  803108:	14400017 	ldw	r17,0(r2)
  80310c:	15000117 	ldw	r20,4(r2)
  803110:	3001c716 	blt	r6,zero,803830 <_dtoa_r+0xec4>
  803114:	880d883a 	mov	r6,r17
  803118:	a00f883a 	mov	r7,r20
  80311c:	9009883a 	mov	r4,r18
  803120:	980b883a 	mov	r5,r19
  803124:	080ab200 	call	80ab20 <__divdf3>
  803128:	180b883a 	mov	r5,r3
  80312c:	1009883a 	mov	r4,r2
  803130:	080c6240 	call	80c624 <__fixdfsi>
  803134:	1009883a 	mov	r4,r2
  803138:	102d883a 	mov	r22,r2
  80313c:	080c6ac0 	call	80c6ac <__floatsidf>
  803140:	1009883a 	mov	r4,r2
  803144:	180b883a 	mov	r5,r3
  803148:	880d883a 	mov	r6,r17
  80314c:	a00f883a 	mov	r7,r20
  803150:	080b6300 	call	80b630 <__muldf3>
  803154:	9009883a 	mov	r4,r18
  803158:	980b883a 	mov	r5,r19
  80315c:	100d883a 	mov	r6,r2
  803160:	180f883a 	mov	r7,r3
  803164:	080bd540 	call	80bd54 <__subdf3>
  803168:	d9000717 	ldw	r4,28(sp)
  80316c:	d9800617 	ldw	r6,24(sp)
  803170:	180b883a 	mov	r5,r3
  803174:	b0c00c04 	addi	r3,r22,48
  803178:	20c00005 	stb	r3,0(r4)
  80317c:	25c00044 	addi	r23,r4,1
  803180:	01000044 	movi	r4,1
  803184:	1011883a 	mov	r8,r2
  803188:	2807883a 	mov	r3,r5
  80318c:	31003d26 	beq	r6,r4,803284 <_dtoa_r+0x918>
  803190:	000d883a 	mov	r6,zero
  803194:	01d00934 	movhi	r7,16420
  803198:	1009883a 	mov	r4,r2
  80319c:	080b6300 	call	80b630 <__muldf3>
  8031a0:	1009883a 	mov	r4,r2
  8031a4:	180b883a 	mov	r5,r3
  8031a8:	000d883a 	mov	r6,zero
  8031ac:	000f883a 	mov	r7,zero
  8031b0:	1027883a 	mov	r19,r2
  8031b4:	182b883a 	mov	r21,r3
  8031b8:	080b3ec0 	call	80b3ec <__eqdf2>
  8031bc:	103f9926 	beq	r2,zero,803024 <__alt_data_end+0xff803024>
  8031c0:	d8c00617 	ldw	r3,24(sp)
  8031c4:	d9000717 	ldw	r4,28(sp)
  8031c8:	b825883a 	mov	r18,r23
  8031cc:	18bfffc4 	addi	r2,r3,-1
  8031d0:	20ad883a 	add	r22,r4,r2
  8031d4:	dc000315 	stw	r16,12(sp)
  8031d8:	00000a06 	br	803204 <_dtoa_r+0x898>
  8031dc:	080b6300 	call	80b630 <__muldf3>
  8031e0:	1009883a 	mov	r4,r2
  8031e4:	180b883a 	mov	r5,r3
  8031e8:	000d883a 	mov	r6,zero
  8031ec:	000f883a 	mov	r7,zero
  8031f0:	1027883a 	mov	r19,r2
  8031f4:	182b883a 	mov	r21,r3
  8031f8:	b825883a 	mov	r18,r23
  8031fc:	080b3ec0 	call	80b3ec <__eqdf2>
  803200:	10022626 	beq	r2,zero,803a9c <_dtoa_r+0x1130>
  803204:	880d883a 	mov	r6,r17
  803208:	a00f883a 	mov	r7,r20
  80320c:	9809883a 	mov	r4,r19
  803210:	a80b883a 	mov	r5,r21
  803214:	080ab200 	call	80ab20 <__divdf3>
  803218:	180b883a 	mov	r5,r3
  80321c:	1009883a 	mov	r4,r2
  803220:	080c6240 	call	80c624 <__fixdfsi>
  803224:	1009883a 	mov	r4,r2
  803228:	1021883a 	mov	r16,r2
  80322c:	080c6ac0 	call	80c6ac <__floatsidf>
  803230:	1009883a 	mov	r4,r2
  803234:	180b883a 	mov	r5,r3
  803238:	880d883a 	mov	r6,r17
  80323c:	a00f883a 	mov	r7,r20
  803240:	080b6300 	call	80b630 <__muldf3>
  803244:	9809883a 	mov	r4,r19
  803248:	a80b883a 	mov	r5,r21
  80324c:	100d883a 	mov	r6,r2
  803250:	180f883a 	mov	r7,r3
  803254:	080bd540 	call	80bd54 <__subdf3>
  803258:	82000c04 	addi	r8,r16,48
  80325c:	92000005 	stb	r8,0(r18)
  803260:	1009883a 	mov	r4,r2
  803264:	180b883a 	mov	r5,r3
  803268:	000d883a 	mov	r6,zero
  80326c:	01d00934 	movhi	r7,16420
  803270:	1011883a 	mov	r8,r2
  803274:	bdc00044 	addi	r23,r23,1
  803278:	95bfd81e 	bne	r18,r22,8031dc <__alt_data_end+0xff8031dc>
  80327c:	802d883a 	mov	r22,r16
  803280:	dc000317 	ldw	r16,12(sp)
  803284:	4009883a 	mov	r4,r8
  803288:	180b883a 	mov	r5,r3
  80328c:	400d883a 	mov	r6,r8
  803290:	180f883a 	mov	r7,r3
  803294:	080a2840 	call	80a284 <__adddf3>
  803298:	8809883a 	mov	r4,r17
  80329c:	a00b883a 	mov	r5,r20
  8032a0:	100d883a 	mov	r6,r2
  8032a4:	180f883a 	mov	r7,r3
  8032a8:	1027883a 	mov	r19,r2
  8032ac:	1825883a 	mov	r18,r3
  8032b0:	080b5500 	call	80b550 <__ledf2>
  8032b4:	10000816 	blt	r2,zero,8032d8 <_dtoa_r+0x96c>
  8032b8:	8809883a 	mov	r4,r17
  8032bc:	a00b883a 	mov	r5,r20
  8032c0:	980d883a 	mov	r6,r19
  8032c4:	900f883a 	mov	r7,r18
  8032c8:	080b3ec0 	call	80b3ec <__eqdf2>
  8032cc:	103f551e 	bne	r2,zero,803024 <__alt_data_end+0xff803024>
  8032d0:	b580004c 	andi	r22,r22,1
  8032d4:	b03f5326 	beq	r22,zero,803024 <__alt_data_end+0xff803024>
  8032d8:	bd7fffc3 	ldbu	r21,-1(r23)
  8032dc:	b8bfffc4 	addi	r2,r23,-1
  8032e0:	1007883a 	mov	r3,r2
  8032e4:	01400e44 	movi	r5,57
  8032e8:	d9800717 	ldw	r6,28(sp)
  8032ec:	00000506 	br	803304 <_dtoa_r+0x998>
  8032f0:	18ffffc4 	addi	r3,r3,-1
  8032f4:	30825e26 	beq	r6,r2,803c70 <_dtoa_r+0x1304>
  8032f8:	1d400003 	ldbu	r21,0(r3)
  8032fc:	102f883a 	mov	r23,r2
  803300:	10bfffc4 	addi	r2,r2,-1
  803304:	a9003fcc 	andi	r4,r21,255
  803308:	2100201c 	xori	r4,r4,128
  80330c:	213fe004 	addi	r4,r4,-128
  803310:	217ff726 	beq	r4,r5,8032f0 <__alt_data_end+0xff8032f0>
  803314:	aa000044 	addi	r8,r21,1
  803318:	12000005 	stb	r8,0(r2)
  80331c:	003f4106 	br	803024 <__alt_data_end+0xff803024>
  803320:	d8c00b17 	ldw	r3,44(sp)
  803324:	18006726 	beq	r3,zero,8034c4 <_dtoa_r+0xb58>
  803328:	d9000317 	ldw	r4,12(sp)
  80332c:	00c00044 	movi	r3,1
  803330:	19016a0e 	bge	r3,r4,8038dc <_dtoa_r+0xf70>
  803334:	d8800617 	ldw	r2,24(sp)
  803338:	d8c00917 	ldw	r3,36(sp)
  80333c:	157fffc4 	addi	r21,r2,-1
  803340:	1d420716 	blt	r3,r21,803b60 <_dtoa_r+0x11f4>
  803344:	1d6bc83a 	sub	r21,r3,r21
  803348:	d8800617 	ldw	r2,24(sp)
  80334c:	1002c716 	blt	r2,zero,803e6c <_dtoa_r+0x1500>
  803350:	dd000817 	ldw	r20,32(sp)
  803354:	d8800617 	ldw	r2,24(sp)
  803358:	d9800817 	ldw	r6,32(sp)
  80335c:	8009883a 	mov	r4,r16
  803360:	01400044 	movi	r5,1
  803364:	308d883a 	add	r6,r6,r2
  803368:	d9800815 	stw	r6,32(sp)
  80336c:	b0ad883a 	add	r22,r22,r2
  803370:	0805df40 	call	805df4 <__i2b>
  803374:	1023883a 	mov	r17,r2
  803378:	a0000826 	beq	r20,zero,80339c <_dtoa_r+0xa30>
  80337c:	0580070e 	bge	zero,r22,80339c <_dtoa_r+0xa30>
  803380:	b005883a 	mov	r2,r22
  803384:	a5812016 	blt	r20,r22,803808 <_dtoa_r+0xe9c>
  803388:	d8c00817 	ldw	r3,32(sp)
  80338c:	a0a9c83a 	sub	r20,r20,r2
  803390:	b0adc83a 	sub	r22,r22,r2
  803394:	1887c83a 	sub	r3,r3,r2
  803398:	d8c00815 	stw	r3,32(sp)
  80339c:	d9000917 	ldw	r4,36(sp)
  8033a0:	0100140e 	bge	zero,r4,8033f4 <_dtoa_r+0xa88>
  8033a4:	d9800b17 	ldw	r6,44(sp)
  8033a8:	3001e526 	beq	r6,zero,803b40 <_dtoa_r+0x11d4>
  8033ac:	05400e0e 	bge	zero,r21,8033e8 <_dtoa_r+0xa7c>
  8033b0:	880b883a 	mov	r5,r17
  8033b4:	8009883a 	mov	r4,r16
  8033b8:	a80d883a 	mov	r6,r21
  8033bc:	080602c0 	call	80602c <__pow5mult>
  8033c0:	e00d883a 	mov	r6,fp
  8033c4:	8009883a 	mov	r4,r16
  8033c8:	100b883a 	mov	r5,r2
  8033cc:	1023883a 	mov	r17,r2
  8033d0:	0805e300 	call	805e30 <__multiply>
  8033d4:	102f883a 	mov	r23,r2
  8033d8:	e00b883a 	mov	r5,fp
  8033dc:	8009883a 	mov	r4,r16
  8033e0:	0805a900 	call	805a90 <_Bfree>
  8033e4:	b839883a 	mov	fp,r23
  8033e8:	d8800917 	ldw	r2,36(sp)
  8033ec:	154dc83a 	sub	r6,r2,r21
  8033f0:	3001281e 	bne	r6,zero,803894 <_dtoa_r+0xf28>
  8033f4:	05c00044 	movi	r23,1
  8033f8:	8009883a 	mov	r4,r16
  8033fc:	b80b883a 	mov	r5,r23
  803400:	0805df40 	call	805df4 <__i2b>
  803404:	d8c00a17 	ldw	r3,40(sp)
  803408:	102b883a 	mov	r21,r2
  80340c:	00c0310e 	bge	zero,r3,8034d4 <_dtoa_r+0xb68>
  803410:	8009883a 	mov	r4,r16
  803414:	100b883a 	mov	r5,r2
  803418:	180d883a 	mov	r6,r3
  80341c:	080602c0 	call	80602c <__pow5mult>
  803420:	d9000317 	ldw	r4,12(sp)
  803424:	102b883a 	mov	r21,r2
  803428:	b9011f0e 	bge	r23,r4,8038a8 <_dtoa_r+0xf3c>
  80342c:	0027883a 	mov	r19,zero
  803430:	a8800417 	ldw	r2,16(r21)
  803434:	10800104 	addi	r2,r2,4
  803438:	1085883a 	add	r2,r2,r2
  80343c:	1085883a 	add	r2,r2,r2
  803440:	a885883a 	add	r2,r21,r2
  803444:	11000017 	ldw	r4,0(r2)
  803448:	0805cdc0 	call	805cdc <__hi0bits>
  80344c:	00c00804 	movi	r3,32
  803450:	1885c83a 	sub	r2,r3,r2
  803454:	00002506 	br	8034ec <_dtoa_r+0xb80>
  803458:	01800044 	movi	r6,1
  80345c:	d9800d15 	stw	r6,52(sp)
  803460:	003dec06 	br	802c14 <__alt_data_end+0xff802c14>
  803464:	d8c00817 	ldw	r3,32(sp)
  803468:	d9000517 	ldw	r4,20(sp)
  80346c:	d8000a15 	stw	zero,40(sp)
  803470:	1907c83a 	sub	r3,r3,r4
  803474:	010dc83a 	sub	r6,zero,r4
  803478:	d8c00815 	stw	r3,32(sp)
  80347c:	d9800915 	stw	r6,36(sp)
  803480:	003ded06 	br	802c38 <__alt_data_end+0xff802c38>
  803484:	05adc83a 	sub	r22,zero,r22
  803488:	dd800815 	stw	r22,32(sp)
  80348c:	002d883a 	mov	r22,zero
  803490:	003de406 	br	802c24 <__alt_data_end+0xff802c24>
  803494:	d9000517 	ldw	r4,20(sp)
  803498:	080c6ac0 	call	80c6ac <__floatsidf>
  80349c:	1009883a 	mov	r4,r2
  8034a0:	180b883a 	mov	r5,r3
  8034a4:	b00d883a 	mov	r6,r22
  8034a8:	a80f883a 	mov	r7,r21
  8034ac:	080b3ec0 	call	80b3ec <__eqdf2>
  8034b0:	103dc726 	beq	r2,zero,802bd0 <__alt_data_end+0xff802bd0>
  8034b4:	d8800517 	ldw	r2,20(sp)
  8034b8:	10bfffc4 	addi	r2,r2,-1
  8034bc:	d8800515 	stw	r2,20(sp)
  8034c0:	003dc306 	br	802bd0 <__alt_data_end+0xff802bd0>
  8034c4:	dd400917 	ldw	r21,36(sp)
  8034c8:	dd000817 	ldw	r20,32(sp)
  8034cc:	0023883a 	mov	r17,zero
  8034d0:	003fa906 	br	803378 <__alt_data_end+0xff803378>
  8034d4:	d9800317 	ldw	r6,12(sp)
  8034d8:	b981670e 	bge	r23,r6,803a78 <_dtoa_r+0x110c>
  8034dc:	0027883a 	mov	r19,zero
  8034e0:	d8c00a17 	ldw	r3,40(sp)
  8034e4:	183fd21e 	bne	r3,zero,803430 <__alt_data_end+0xff803430>
  8034e8:	00800044 	movi	r2,1
  8034ec:	1585883a 	add	r2,r2,r22
  8034f0:	108007cc 	andi	r2,r2,31
  8034f4:	10005f26 	beq	r2,zero,803674 <_dtoa_r+0xd08>
  8034f8:	00c00804 	movi	r3,32
  8034fc:	1887c83a 	sub	r3,r3,r2
  803500:	01000104 	movi	r4,4
  803504:	20c2dd0e 	bge	r4,r3,80407c <_dtoa_r+0x1710>
  803508:	d9000817 	ldw	r4,32(sp)
  80350c:	00c00704 	movi	r3,28
  803510:	1885c83a 	sub	r2,r3,r2
  803514:	2089883a 	add	r4,r4,r2
  803518:	d9000815 	stw	r4,32(sp)
  80351c:	a0a9883a 	add	r20,r20,r2
  803520:	b0ad883a 	add	r22,r22,r2
  803524:	d8800817 	ldw	r2,32(sp)
  803528:	0080050e 	bge	zero,r2,803540 <_dtoa_r+0xbd4>
  80352c:	e00b883a 	mov	r5,fp
  803530:	8009883a 	mov	r4,r16
  803534:	100d883a 	mov	r6,r2
  803538:	080616c0 	call	80616c <__lshift>
  80353c:	1039883a 	mov	fp,r2
  803540:	0580050e 	bge	zero,r22,803558 <_dtoa_r+0xbec>
  803544:	a80b883a 	mov	r5,r21
  803548:	8009883a 	mov	r4,r16
  80354c:	b00d883a 	mov	r6,r22
  803550:	080616c0 	call	80616c <__lshift>
  803554:	102b883a 	mov	r21,r2
  803558:	d8c00d17 	ldw	r3,52(sp)
  80355c:	1801161e 	bne	r3,zero,8039b8 <_dtoa_r+0x104c>
  803560:	d8c00617 	ldw	r3,24(sp)
  803564:	00c12d0e 	bge	zero,r3,803a1c <_dtoa_r+0x10b0>
  803568:	d8c00b17 	ldw	r3,44(sp)
  80356c:	1800571e 	bne	r3,zero,8036cc <_dtoa_r+0xd60>
  803570:	dc800717 	ldw	r18,28(sp)
  803574:	dcc00617 	ldw	r19,24(sp)
  803578:	9029883a 	mov	r20,r18
  80357c:	00000206 	br	803588 <_dtoa_r+0xc1c>
  803580:	0805ab80 	call	805ab8 <__multadd>
  803584:	1039883a 	mov	fp,r2
  803588:	e009883a 	mov	r4,fp
  80358c:	a80b883a 	mov	r5,r21
  803590:	080276c0 	call	80276c <quorem>
  803594:	10800c04 	addi	r2,r2,48
  803598:	90800005 	stb	r2,0(r18)
  80359c:	94800044 	addi	r18,r18,1
  8035a0:	9507c83a 	sub	r3,r18,r20
  8035a4:	8009883a 	mov	r4,r16
  8035a8:	e00b883a 	mov	r5,fp
  8035ac:	01800284 	movi	r6,10
  8035b0:	000f883a 	mov	r7,zero
  8035b4:	1cfff216 	blt	r3,r19,803580 <__alt_data_end+0xff803580>
  8035b8:	1011883a 	mov	r8,r2
  8035bc:	d8800617 	ldw	r2,24(sp)
  8035c0:	00822e0e 	bge	zero,r2,803e7c <_dtoa_r+0x1510>
  8035c4:	d9000717 	ldw	r4,28(sp)
  8035c8:	0025883a 	mov	r18,zero
  8035cc:	20af883a 	add	r23,r4,r2
  8035d0:	e00b883a 	mov	r5,fp
  8035d4:	01800044 	movi	r6,1
  8035d8:	8009883a 	mov	r4,r16
  8035dc:	da001715 	stw	r8,92(sp)
  8035e0:	080616c0 	call	80616c <__lshift>
  8035e4:	1009883a 	mov	r4,r2
  8035e8:	a80b883a 	mov	r5,r21
  8035ec:	1039883a 	mov	fp,r2
  8035f0:	08062bc0 	call	8062bc <__mcmp>
  8035f4:	da001717 	ldw	r8,92(sp)
  8035f8:	00816e0e 	bge	zero,r2,803bb4 <_dtoa_r+0x1248>
  8035fc:	b93fffc3 	ldbu	r4,-1(r23)
  803600:	b8bfffc4 	addi	r2,r23,-1
  803604:	1007883a 	mov	r3,r2
  803608:	01800e44 	movi	r6,57
  80360c:	d9c00717 	ldw	r7,28(sp)
  803610:	00000506 	br	803628 <_dtoa_r+0xcbc>
  803614:	18ffffc4 	addi	r3,r3,-1
  803618:	38811926 	beq	r7,r2,803a80 <_dtoa_r+0x1114>
  80361c:	19000003 	ldbu	r4,0(r3)
  803620:	102f883a 	mov	r23,r2
  803624:	10bfffc4 	addi	r2,r2,-1
  803628:	21403fcc 	andi	r5,r4,255
  80362c:	2940201c 	xori	r5,r5,128
  803630:	297fe004 	addi	r5,r5,-128
  803634:	29bff726 	beq	r5,r6,803614 <__alt_data_end+0xff803614>
  803638:	21000044 	addi	r4,r4,1
  80363c:	11000005 	stb	r4,0(r2)
  803640:	8009883a 	mov	r4,r16
  803644:	a80b883a 	mov	r5,r21
  803648:	0805a900 	call	805a90 <_Bfree>
  80364c:	883e7526 	beq	r17,zero,803024 <__alt_data_end+0xff803024>
  803650:	90000426 	beq	r18,zero,803664 <_dtoa_r+0xcf8>
  803654:	94400326 	beq	r18,r17,803664 <_dtoa_r+0xcf8>
  803658:	8009883a 	mov	r4,r16
  80365c:	900b883a 	mov	r5,r18
  803660:	0805a900 	call	805a90 <_Bfree>
  803664:	8009883a 	mov	r4,r16
  803668:	880b883a 	mov	r5,r17
  80366c:	0805a900 	call	805a90 <_Bfree>
  803670:	003e6c06 	br	803024 <__alt_data_end+0xff803024>
  803674:	00800704 	movi	r2,28
  803678:	d9800817 	ldw	r6,32(sp)
  80367c:	a0a9883a 	add	r20,r20,r2
  803680:	b0ad883a 	add	r22,r22,r2
  803684:	308d883a 	add	r6,r6,r2
  803688:	d9800815 	stw	r6,32(sp)
  80368c:	003fa506 	br	803524 <__alt_data_end+0xff803524>
  803690:	013efb84 	movi	r4,-1042
  803694:	246bc83a 	sub	r21,r4,r17
  803698:	9548983a 	sll	r4,r18,r21
  80369c:	003d1806 	br	802b00 <__alt_data_end+0xff802b00>
  8036a0:	d8000d15 	stw	zero,52(sp)
  8036a4:	003d5b06 	br	802c14 <__alt_data_end+0xff802c14>
  8036a8:	880b883a 	mov	r5,r17
  8036ac:	8009883a 	mov	r4,r16
  8036b0:	01800284 	movi	r6,10
  8036b4:	000f883a 	mov	r7,zero
  8036b8:	0805ab80 	call	805ab8 <__multadd>
  8036bc:	1023883a 	mov	r17,r2
  8036c0:	d8800c17 	ldw	r2,48(sp)
  8036c4:	0082550e 	bge	zero,r2,80401c <_dtoa_r+0x16b0>
  8036c8:	d8800615 	stw	r2,24(sp)
  8036cc:	0500050e 	bge	zero,r20,8036e4 <_dtoa_r+0xd78>
  8036d0:	880b883a 	mov	r5,r17
  8036d4:	8009883a 	mov	r4,r16
  8036d8:	a00d883a 	mov	r6,r20
  8036dc:	080616c0 	call	80616c <__lshift>
  8036e0:	1023883a 	mov	r17,r2
  8036e4:	98016a1e 	bne	r19,zero,803c90 <_dtoa_r+0x1324>
  8036e8:	8829883a 	mov	r20,r17
  8036ec:	d9000617 	ldw	r4,24(sp)
  8036f0:	dcc00717 	ldw	r19,28(sp)
  8036f4:	9480004c 	andi	r18,r18,1
  8036f8:	20bfffc4 	addi	r2,r4,-1
  8036fc:	9885883a 	add	r2,r19,r2
  803700:	d8800415 	stw	r2,16(sp)
  803704:	dc800615 	stw	r18,24(sp)
  803708:	e009883a 	mov	r4,fp
  80370c:	a80b883a 	mov	r5,r21
  803710:	080276c0 	call	80276c <quorem>
  803714:	e009883a 	mov	r4,fp
  803718:	880b883a 	mov	r5,r17
  80371c:	102f883a 	mov	r23,r2
  803720:	08062bc0 	call	8062bc <__mcmp>
  803724:	8009883a 	mov	r4,r16
  803728:	a80b883a 	mov	r5,r21
  80372c:	a00d883a 	mov	r6,r20
  803730:	102d883a 	mov	r22,r2
  803734:	080631c0 	call	80631c <__mdiff>
  803738:	1007883a 	mov	r3,r2
  80373c:	10800317 	ldw	r2,12(r2)
  803740:	bc800c04 	addi	r18,r23,48
  803744:	1000971e 	bne	r2,zero,8039a4 <_dtoa_r+0x1038>
  803748:	180b883a 	mov	r5,r3
  80374c:	e009883a 	mov	r4,fp
  803750:	d8c01515 	stw	r3,84(sp)
  803754:	08062bc0 	call	8062bc <__mcmp>
  803758:	d8c01517 	ldw	r3,84(sp)
  80375c:	8009883a 	mov	r4,r16
  803760:	d8801515 	stw	r2,84(sp)
  803764:	180b883a 	mov	r5,r3
  803768:	0805a900 	call	805a90 <_Bfree>
  80376c:	d8801517 	ldw	r2,84(sp)
  803770:	1000041e 	bne	r2,zero,803784 <_dtoa_r+0xe18>
  803774:	d9800317 	ldw	r6,12(sp)
  803778:	3000021e 	bne	r6,zero,803784 <_dtoa_r+0xe18>
  80377c:	d8c00617 	ldw	r3,24(sp)
  803780:	18007626 	beq	r3,zero,80395c <_dtoa_r+0xff0>
  803784:	b0005b16 	blt	r22,zero,8038f4 <_dtoa_r+0xf88>
  803788:	b000041e 	bne	r22,zero,80379c <_dtoa_r+0xe30>
  80378c:	d9000317 	ldw	r4,12(sp)
  803790:	2000021e 	bne	r4,zero,80379c <_dtoa_r+0xe30>
  803794:	d8c00617 	ldw	r3,24(sp)
  803798:	18005626 	beq	r3,zero,8038f4 <_dtoa_r+0xf88>
  80379c:	00814d16 	blt	zero,r2,803cd4 <_dtoa_r+0x1368>
  8037a0:	d8c00417 	ldw	r3,16(sp)
  8037a4:	9d800044 	addi	r22,r19,1
  8037a8:	9c800005 	stb	r18,0(r19)
  8037ac:	b02f883a 	mov	r23,r22
  8037b0:	98c14c26 	beq	r19,r3,803ce4 <_dtoa_r+0x1378>
  8037b4:	e00b883a 	mov	r5,fp
  8037b8:	8009883a 	mov	r4,r16
  8037bc:	01800284 	movi	r6,10
  8037c0:	000f883a 	mov	r7,zero
  8037c4:	0805ab80 	call	805ab8 <__multadd>
  8037c8:	1039883a 	mov	fp,r2
  8037cc:	8d006d26 	beq	r17,r20,803984 <_dtoa_r+0x1018>
  8037d0:	880b883a 	mov	r5,r17
  8037d4:	01800284 	movi	r6,10
  8037d8:	000f883a 	mov	r7,zero
  8037dc:	8009883a 	mov	r4,r16
  8037e0:	0805ab80 	call	805ab8 <__multadd>
  8037e4:	a00b883a 	mov	r5,r20
  8037e8:	8009883a 	mov	r4,r16
  8037ec:	01800284 	movi	r6,10
  8037f0:	000f883a 	mov	r7,zero
  8037f4:	1023883a 	mov	r17,r2
  8037f8:	0805ab80 	call	805ab8 <__multadd>
  8037fc:	1029883a 	mov	r20,r2
  803800:	b027883a 	mov	r19,r22
  803804:	003fc006 	br	803708 <__alt_data_end+0xff803708>
  803808:	a005883a 	mov	r2,r20
  80380c:	003ede06 	br	803388 <__alt_data_end+0xff803388>
  803810:	01000044 	movi	r4,1
  803814:	d9000b15 	stw	r4,44(sp)
  803818:	d9802217 	ldw	r6,136(sp)
  80381c:	0180dc0e 	bge	zero,r6,803b90 <_dtoa_r+0x1224>
  803820:	3023883a 	mov	r17,r6
  803824:	d9800c15 	stw	r6,48(sp)
  803828:	d9800615 	stw	r6,24(sp)
  80382c:	003d1e06 	br	802ca8 <__alt_data_end+0xff802ca8>
  803830:	d8800617 	ldw	r2,24(sp)
  803834:	00be3716 	blt	zero,r2,803114 <__alt_data_end+0xff803114>
  803838:	1000be1e 	bne	r2,zero,803b34 <_dtoa_r+0x11c8>
  80383c:	8809883a 	mov	r4,r17
  803840:	a00b883a 	mov	r5,r20
  803844:	000d883a 	mov	r6,zero
  803848:	01d00534 	movhi	r7,16404
  80384c:	080b6300 	call	80b630 <__muldf3>
  803850:	1009883a 	mov	r4,r2
  803854:	180b883a 	mov	r5,r3
  803858:	900d883a 	mov	r6,r18
  80385c:	980f883a 	mov	r7,r19
  803860:	080b4700 	call	80b470 <__gedf2>
  803864:	002b883a 	mov	r21,zero
  803868:	0023883a 	mov	r17,zero
  80386c:	10007a16 	blt	r2,zero,803a58 <_dtoa_r+0x10ec>
  803870:	d9002217 	ldw	r4,136(sp)
  803874:	ddc00717 	ldw	r23,28(sp)
  803878:	0108303a 	nor	r4,zero,r4
  80387c:	d9000515 	stw	r4,20(sp)
  803880:	8009883a 	mov	r4,r16
  803884:	a80b883a 	mov	r5,r21
  803888:	0805a900 	call	805a90 <_Bfree>
  80388c:	883f751e 	bne	r17,zero,803664 <__alt_data_end+0xff803664>
  803890:	003de406 	br	803024 <__alt_data_end+0xff803024>
  803894:	e00b883a 	mov	r5,fp
  803898:	8009883a 	mov	r4,r16
  80389c:	080602c0 	call	80602c <__pow5mult>
  8038a0:	1039883a 	mov	fp,r2
  8038a4:	003ed306 	br	8033f4 <__alt_data_end+0xff8033f4>
  8038a8:	903ee01e 	bne	r18,zero,80342c <__alt_data_end+0xff80342c>
  8038ac:	00800434 	movhi	r2,16
  8038b0:	10bfffc4 	addi	r2,r2,-1
  8038b4:	9884703a 	and	r2,r19,r2
  8038b8:	103f081e 	bne	r2,zero,8034dc <__alt_data_end+0xff8034dc>
  8038bc:	9cdffc2c 	andhi	r19,r19,32752
  8038c0:	983f0626 	beq	r19,zero,8034dc <__alt_data_end+0xff8034dc>
  8038c4:	d8800817 	ldw	r2,32(sp)
  8038c8:	b5800044 	addi	r22,r22,1
  8038cc:	04c00044 	movi	r19,1
  8038d0:	10800044 	addi	r2,r2,1
  8038d4:	d8800815 	stw	r2,32(sp)
  8038d8:	003f0106 	br	8034e0 <__alt_data_end+0xff8034e0>
  8038dc:	d9800f17 	ldw	r6,60(sp)
  8038e0:	30016826 	beq	r6,zero,803e84 <_dtoa_r+0x1518>
  8038e4:	10810cc4 	addi	r2,r2,1075
  8038e8:	dd400917 	ldw	r21,36(sp)
  8038ec:	dd000817 	ldw	r20,32(sp)
  8038f0:	003e9906 	br	803358 <__alt_data_end+0xff803358>
  8038f4:	9011883a 	mov	r8,r18
  8038f8:	4007883a 	mov	r3,r8
  8038fc:	e02d883a 	mov	r22,fp
  803900:	0080100e 	bge	zero,r2,803944 <_dtoa_r+0xfd8>
  803904:	01800044 	movi	r6,1
  803908:	8009883a 	mov	r4,r16
  80390c:	e00b883a 	mov	r5,fp
  803910:	da001515 	stw	r8,84(sp)
  803914:	da001715 	stw	r8,92(sp)
  803918:	080616c0 	call	80616c <__lshift>
  80391c:	1009883a 	mov	r4,r2
  803920:	a80b883a 	mov	r5,r21
  803924:	102d883a 	mov	r22,r2
  803928:	08062bc0 	call	8062bc <__mcmp>
  80392c:	d8c01517 	ldw	r3,84(sp)
  803930:	da001717 	ldw	r8,92(sp)
  803934:	0081a50e 	bge	zero,r2,803fcc <_dtoa_r+0x1660>
  803938:	00800e44 	movi	r2,57
  80393c:	40817b26 	beq	r8,r2,803f2c <_dtoa_r+0x15c0>
  803940:	40c00044 	addi	r3,r8,1
  803944:	8825883a 	mov	r18,r17
  803948:	9dc00044 	addi	r23,r19,1
  80394c:	98c00005 	stb	r3,0(r19)
  803950:	a023883a 	mov	r17,r20
  803954:	b039883a 	mov	fp,r22
  803958:	003f3906 	br	803640 <__alt_data_end+0xff803640>
  80395c:	00800e44 	movi	r2,57
  803960:	9011883a 	mov	r8,r18
  803964:	90817226 	beq	r18,r2,803f30 <_dtoa_r+0x15c4>
  803968:	0580010e 	bge	zero,r22,803970 <_dtoa_r+0x1004>
  80396c:	ba000c44 	addi	r8,r23,49
  803970:	8825883a 	mov	r18,r17
  803974:	9dc00044 	addi	r23,r19,1
  803978:	9a000005 	stb	r8,0(r19)
  80397c:	a023883a 	mov	r17,r20
  803980:	003f2f06 	br	803640 <__alt_data_end+0xff803640>
  803984:	880b883a 	mov	r5,r17
  803988:	8009883a 	mov	r4,r16
  80398c:	01800284 	movi	r6,10
  803990:	000f883a 	mov	r7,zero
  803994:	0805ab80 	call	805ab8 <__multadd>
  803998:	1023883a 	mov	r17,r2
  80399c:	1029883a 	mov	r20,r2
  8039a0:	003f9706 	br	803800 <__alt_data_end+0xff803800>
  8039a4:	8009883a 	mov	r4,r16
  8039a8:	180b883a 	mov	r5,r3
  8039ac:	0805a900 	call	805a90 <_Bfree>
  8039b0:	00800044 	movi	r2,1
  8039b4:	003f7306 	br	803784 <__alt_data_end+0xff803784>
  8039b8:	e009883a 	mov	r4,fp
  8039bc:	a80b883a 	mov	r5,r21
  8039c0:	08062bc0 	call	8062bc <__mcmp>
  8039c4:	103ee60e 	bge	r2,zero,803560 <__alt_data_end+0xff803560>
  8039c8:	8009883a 	mov	r4,r16
  8039cc:	e00b883a 	mov	r5,fp
  8039d0:	01800284 	movi	r6,10
  8039d4:	000f883a 	mov	r7,zero
  8039d8:	0805ab80 	call	805ab8 <__multadd>
  8039dc:	d9000517 	ldw	r4,20(sp)
  8039e0:	d9800b17 	ldw	r6,44(sp)
  8039e4:	1039883a 	mov	fp,r2
  8039e8:	213fffc4 	addi	r4,r4,-1
  8039ec:	d9000515 	stw	r4,20(sp)
  8039f0:	303f2d1e 	bne	r6,zero,8036a8 <__alt_data_end+0xff8036a8>
  8039f4:	d9000c17 	ldw	r4,48(sp)
  8039f8:	0101780e 	bge	zero,r4,803fdc <_dtoa_r+0x1670>
  8039fc:	d9000615 	stw	r4,24(sp)
  803a00:	003edb06 	br	803570 <__alt_data_end+0xff803570>
  803a04:	00800084 	movi	r2,2
  803a08:	30818e1e 	bne	r6,r2,804044 <_dtoa_r+0x16d8>
  803a0c:	d8000b15 	stw	zero,44(sp)
  803a10:	003f8106 	br	803818 <__alt_data_end+0xff803818>
  803a14:	d8800717 	ldw	r2,28(sp)
  803a18:	003c0306 	br	802a28 <__alt_data_end+0xff802a28>
  803a1c:	d9000317 	ldw	r4,12(sp)
  803a20:	00800084 	movi	r2,2
  803a24:	113ed00e 	bge	r2,r4,803568 <__alt_data_end+0xff803568>
  803a28:	d8c00617 	ldw	r3,24(sp)
  803a2c:	183f901e 	bne	r3,zero,803870 <__alt_data_end+0xff803870>
  803a30:	a80b883a 	mov	r5,r21
  803a34:	8009883a 	mov	r4,r16
  803a38:	01800144 	movi	r6,5
  803a3c:	000f883a 	mov	r7,zero
  803a40:	0805ab80 	call	805ab8 <__multadd>
  803a44:	e009883a 	mov	r4,fp
  803a48:	100b883a 	mov	r5,r2
  803a4c:	102b883a 	mov	r21,r2
  803a50:	08062bc0 	call	8062bc <__mcmp>
  803a54:	00bf860e 	bge	zero,r2,803870 <__alt_data_end+0xff803870>
  803a58:	d9800717 	ldw	r6,28(sp)
  803a5c:	00800c44 	movi	r2,49
  803a60:	30800005 	stb	r2,0(r6)
  803a64:	d8800517 	ldw	r2,20(sp)
  803a68:	35c00044 	addi	r23,r6,1
  803a6c:	10800044 	addi	r2,r2,1
  803a70:	d8800515 	stw	r2,20(sp)
  803a74:	003f8206 	br	803880 <__alt_data_end+0xff803880>
  803a78:	903e981e 	bne	r18,zero,8034dc <__alt_data_end+0xff8034dc>
  803a7c:	003f8b06 	br	8038ac <__alt_data_end+0xff8038ac>
  803a80:	d9800517 	ldw	r6,20(sp)
  803a84:	d8c00717 	ldw	r3,28(sp)
  803a88:	00800c44 	movi	r2,49
  803a8c:	31800044 	addi	r6,r6,1
  803a90:	d9800515 	stw	r6,20(sp)
  803a94:	18800005 	stb	r2,0(r3)
  803a98:	003ee906 	br	803640 <__alt_data_end+0xff803640>
  803a9c:	dc000317 	ldw	r16,12(sp)
  803aa0:	003d6006 	br	803024 <__alt_data_end+0xff803024>
  803aa4:	8809883a 	mov	r4,r17
  803aa8:	080c6ac0 	call	80c6ac <__floatsidf>
  803aac:	a009883a 	mov	r4,r20
  803ab0:	a80b883a 	mov	r5,r21
  803ab4:	100d883a 	mov	r6,r2
  803ab8:	180f883a 	mov	r7,r3
  803abc:	080b6300 	call	80b630 <__muldf3>
  803ac0:	1009883a 	mov	r4,r2
  803ac4:	180b883a 	mov	r5,r3
  803ac8:	000d883a 	mov	r6,zero
  803acc:	01d00734 	movhi	r7,16412
  803ad0:	080a2840 	call	80a284 <__adddf3>
  803ad4:	1023883a 	mov	r17,r2
  803ad8:	00bf3034 	movhi	r2,64704
  803adc:	1885883a 	add	r2,r3,r2
  803ae0:	d8800e15 	stw	r2,56(sp)
  803ae4:	a009883a 	mov	r4,r20
  803ae8:	a80b883a 	mov	r5,r21
  803aec:	000d883a 	mov	r6,zero
  803af0:	01d00534 	movhi	r7,16404
  803af4:	080bd540 	call	80bd54 <__subdf3>
  803af8:	d9c00e17 	ldw	r7,56(sp)
  803afc:	1009883a 	mov	r4,r2
  803b00:	180b883a 	mov	r5,r3
  803b04:	880d883a 	mov	r6,r17
  803b08:	102b883a 	mov	r21,r2
  803b0c:	1829883a 	mov	r20,r3
  803b10:	080b4700 	call	80b470 <__gedf2>
  803b14:	00807716 	blt	zero,r2,803cf4 <_dtoa_r+0x1388>
  803b18:	d8800e17 	ldw	r2,56(sp)
  803b1c:	a809883a 	mov	r4,r21
  803b20:	a00b883a 	mov	r5,r20
  803b24:	11e0003c 	xorhi	r7,r2,32768
  803b28:	880d883a 	mov	r6,r17
  803b2c:	080b5500 	call	80b550 <__ledf2>
  803b30:	103d6b0e 	bge	r2,zero,8030e0 <__alt_data_end+0xff8030e0>
  803b34:	002b883a 	mov	r21,zero
  803b38:	0023883a 	mov	r17,zero
  803b3c:	003f4c06 	br	803870 <__alt_data_end+0xff803870>
  803b40:	d9800917 	ldw	r6,36(sp)
  803b44:	e00b883a 	mov	r5,fp
  803b48:	8009883a 	mov	r4,r16
  803b4c:	080602c0 	call	80602c <__pow5mult>
  803b50:	1039883a 	mov	fp,r2
  803b54:	003e2706 	br	8033f4 <__alt_data_end+0xff8033f4>
  803b58:	d8000b15 	stw	zero,44(sp)
  803b5c:	003c4906 	br	802c84 <__alt_data_end+0xff802c84>
  803b60:	d9000917 	ldw	r4,36(sp)
  803b64:	d9800a17 	ldw	r6,40(sp)
  803b68:	dd400915 	stw	r21,36(sp)
  803b6c:	a905c83a 	sub	r2,r21,r4
  803b70:	308d883a 	add	r6,r6,r2
  803b74:	d9800a15 	stw	r6,40(sp)
  803b78:	002b883a 	mov	r21,zero
  803b7c:	003df206 	br	803348 <__alt_data_end+0xff803348>
  803b80:	dc800e15 	stw	r18,56(sp)
  803b84:	982b883a 	mov	r21,r19
  803b88:	04400084 	movi	r17,2
  803b8c:	003c7406 	br	802d60 <__alt_data_end+0xff802d60>
  803b90:	04400044 	movi	r17,1
  803b94:	dc400c15 	stw	r17,48(sp)
  803b98:	dc400615 	stw	r17,24(sp)
  803b9c:	dc402215 	stw	r17,136(sp)
  803ba0:	80001115 	stw	zero,68(r16)
  803ba4:	000b883a 	mov	r5,zero
  803ba8:	003c4a06 	br	802cd4 <__alt_data_end+0xff802cd4>
  803bac:	3023883a 	mov	r17,r6
  803bb0:	003ffb06 	br	803ba0 <__alt_data_end+0xff803ba0>
  803bb4:	1000021e 	bne	r2,zero,803bc0 <_dtoa_r+0x1254>
  803bb8:	4200004c 	andi	r8,r8,1
  803bbc:	403e8f1e 	bne	r8,zero,8035fc <__alt_data_end+0xff8035fc>
  803bc0:	01000c04 	movi	r4,48
  803bc4:	00000106 	br	803bcc <_dtoa_r+0x1260>
  803bc8:	102f883a 	mov	r23,r2
  803bcc:	b8bfffc4 	addi	r2,r23,-1
  803bd0:	10c00007 	ldb	r3,0(r2)
  803bd4:	193ffc26 	beq	r3,r4,803bc8 <__alt_data_end+0xff803bc8>
  803bd8:	003e9906 	br	803640 <__alt_data_end+0xff803640>
  803bdc:	d9000517 	ldw	r4,20(sp)
  803be0:	012fc83a 	sub	r23,zero,r4
  803be4:	b800ad26 	beq	r23,zero,803e9c <_dtoa_r+0x1530>
  803be8:	b88003cc 	andi	r2,r23,15
  803bec:	100490fa 	slli	r2,r2,3
  803bf0:	00c02074 	movhi	r3,129
  803bf4:	18c2a604 	addi	r3,r3,2712
  803bf8:	1885883a 	add	r2,r3,r2
  803bfc:	11800017 	ldw	r6,0(r2)
  803c00:	11c00117 	ldw	r7,4(r2)
  803c04:	b82fd13a 	srai	r23,r23,4
  803c08:	9009883a 	mov	r4,r18
  803c0c:	980b883a 	mov	r5,r19
  803c10:	080b6300 	call	80b630 <__muldf3>
  803c14:	1029883a 	mov	r20,r2
  803c18:	182b883a 	mov	r21,r3
  803c1c:	b800f426 	beq	r23,zero,803ff0 <_dtoa_r+0x1684>
  803c20:	02002074 	movhi	r8,129
  803c24:	42029c04 	addi	r8,r8,2672
  803c28:	8029883a 	mov	r20,r16
  803c2c:	04400084 	movi	r17,2
  803c30:	4021883a 	mov	r16,r8
  803c34:	b980004c 	andi	r6,r23,1
  803c38:	1009883a 	mov	r4,r2
  803c3c:	b82fd07a 	srai	r23,r23,1
  803c40:	180b883a 	mov	r5,r3
  803c44:	30000426 	beq	r6,zero,803c58 <_dtoa_r+0x12ec>
  803c48:	81800017 	ldw	r6,0(r16)
  803c4c:	81c00117 	ldw	r7,4(r16)
  803c50:	8c400044 	addi	r17,r17,1
  803c54:	080b6300 	call	80b630 <__muldf3>
  803c58:	84000204 	addi	r16,r16,8
  803c5c:	b83ff51e 	bne	r23,zero,803c34 <__alt_data_end+0xff803c34>
  803c60:	a021883a 	mov	r16,r20
  803c64:	182b883a 	mov	r21,r3
  803c68:	1029883a 	mov	r20,r2
  803c6c:	003c5506 	br	802dc4 <__alt_data_end+0xff802dc4>
  803c70:	d9800517 	ldw	r6,20(sp)
  803c74:	d9000717 	ldw	r4,28(sp)
  803c78:	00c00c04 	movi	r3,48
  803c7c:	31800044 	addi	r6,r6,1
  803c80:	d9800515 	stw	r6,20(sp)
  803c84:	20c00005 	stb	r3,0(r4)
  803c88:	02000c44 	movi	r8,49
  803c8c:	003da206 	br	803318 <__alt_data_end+0xff803318>
  803c90:	89400117 	ldw	r5,4(r17)
  803c94:	8009883a 	mov	r4,r16
  803c98:	08059e80 	call	8059e8 <_Balloc>
  803c9c:	89800417 	ldw	r6,16(r17)
  803ca0:	11000304 	addi	r4,r2,12
  803ca4:	89400304 	addi	r5,r17,12
  803ca8:	31800084 	addi	r6,r6,2
  803cac:	318d883a 	add	r6,r6,r6
  803cb0:	318d883a 	add	r6,r6,r6
  803cb4:	1027883a 	mov	r19,r2
  803cb8:	080578c0 	call	80578c <memcpy>
  803cbc:	8009883a 	mov	r4,r16
  803cc0:	980b883a 	mov	r5,r19
  803cc4:	01800044 	movi	r6,1
  803cc8:	080616c0 	call	80616c <__lshift>
  803ccc:	1029883a 	mov	r20,r2
  803cd0:	003e8606 	br	8036ec <__alt_data_end+0xff8036ec>
  803cd4:	00800e44 	movi	r2,57
  803cd8:	90809526 	beq	r18,r2,803f30 <_dtoa_r+0x15c4>
  803cdc:	92000044 	addi	r8,r18,1
  803ce0:	003f2306 	br	803970 <__alt_data_end+0xff803970>
  803ce4:	9011883a 	mov	r8,r18
  803ce8:	8825883a 	mov	r18,r17
  803cec:	a023883a 	mov	r17,r20
  803cf0:	003e3706 	br	8035d0 <__alt_data_end+0xff8035d0>
  803cf4:	002b883a 	mov	r21,zero
  803cf8:	0023883a 	mov	r17,zero
  803cfc:	003f5606 	br	803a58 <__alt_data_end+0xff803a58>
  803d00:	51bfffc4 	addi	r6,r10,-1
  803d04:	300490fa 	slli	r2,r6,3
  803d08:	00c02074 	movhi	r3,129
  803d0c:	18c2a604 	addi	r3,r3,2712
  803d10:	1885883a 	add	r2,r3,r2
  803d14:	d9c00e17 	ldw	r7,56(sp)
  803d18:	11000017 	ldw	r4,0(r2)
  803d1c:	11400117 	ldw	r5,4(r2)
  803d20:	d8800717 	ldw	r2,28(sp)
  803d24:	d9801015 	stw	r6,64(sp)
  803d28:	880d883a 	mov	r6,r17
  803d2c:	da801615 	stw	r10,88(sp)
  803d30:	15c00044 	addi	r23,r2,1
  803d34:	080b6300 	call	80b630 <__muldf3>
  803d38:	a80b883a 	mov	r5,r21
  803d3c:	a009883a 	mov	r4,r20
  803d40:	d8c01115 	stw	r3,68(sp)
  803d44:	d8800e15 	stw	r2,56(sp)
  803d48:	080c6240 	call	80c624 <__fixdfsi>
  803d4c:	1009883a 	mov	r4,r2
  803d50:	1023883a 	mov	r17,r2
  803d54:	080c6ac0 	call	80c6ac <__floatsidf>
  803d58:	a009883a 	mov	r4,r20
  803d5c:	a80b883a 	mov	r5,r21
  803d60:	100d883a 	mov	r6,r2
  803d64:	180f883a 	mov	r7,r3
  803d68:	080bd540 	call	80bd54 <__subdf3>
  803d6c:	1813883a 	mov	r9,r3
  803d70:	d8c00717 	ldw	r3,28(sp)
  803d74:	8c400c04 	addi	r17,r17,48
  803d78:	1011883a 	mov	r8,r2
  803d7c:	1c400005 	stb	r17,0(r3)
  803d80:	da801617 	ldw	r10,88(sp)
  803d84:	00800044 	movi	r2,1
  803d88:	50802326 	beq	r10,r2,803e18 <_dtoa_r+0x14ac>
  803d8c:	d8800717 	ldw	r2,28(sp)
  803d90:	b82b883a 	mov	r21,r23
  803d94:	dc001315 	stw	r16,76(sp)
  803d98:	12a9883a 	add	r20,r2,r10
  803d9c:	4807883a 	mov	r3,r9
  803da0:	4005883a 	mov	r2,r8
  803da4:	dc801415 	stw	r18,80(sp)
  803da8:	000d883a 	mov	r6,zero
  803dac:	01d00934 	movhi	r7,16420
  803db0:	1009883a 	mov	r4,r2
  803db4:	180b883a 	mov	r5,r3
  803db8:	080b6300 	call	80b630 <__muldf3>
  803dbc:	180b883a 	mov	r5,r3
  803dc0:	1009883a 	mov	r4,r2
  803dc4:	1821883a 	mov	r16,r3
  803dc8:	1025883a 	mov	r18,r2
  803dcc:	080c6240 	call	80c624 <__fixdfsi>
  803dd0:	1009883a 	mov	r4,r2
  803dd4:	1023883a 	mov	r17,r2
  803dd8:	080c6ac0 	call	80c6ac <__floatsidf>
  803ddc:	9009883a 	mov	r4,r18
  803de0:	800b883a 	mov	r5,r16
  803de4:	100d883a 	mov	r6,r2
  803de8:	180f883a 	mov	r7,r3
  803dec:	8c400c04 	addi	r17,r17,48
  803df0:	080bd540 	call	80bd54 <__subdf3>
  803df4:	ad400044 	addi	r21,r21,1
  803df8:	ac7fffc5 	stb	r17,-1(r21)
  803dfc:	ad3fea1e 	bne	r21,r20,803da8 <__alt_data_end+0xff803da8>
  803e00:	1813883a 	mov	r9,r3
  803e04:	d8c01017 	ldw	r3,64(sp)
  803e08:	dc001317 	ldw	r16,76(sp)
  803e0c:	dc801417 	ldw	r18,80(sp)
  803e10:	1011883a 	mov	r8,r2
  803e14:	b8ef883a 	add	r23,r23,r3
  803e18:	d9000e17 	ldw	r4,56(sp)
  803e1c:	d9401117 	ldw	r5,68(sp)
  803e20:	000d883a 	mov	r6,zero
  803e24:	01cff834 	movhi	r7,16352
  803e28:	da001715 	stw	r8,92(sp)
  803e2c:	da401515 	stw	r9,84(sp)
  803e30:	080a2840 	call	80a284 <__adddf3>
  803e34:	da001717 	ldw	r8,92(sp)
  803e38:	da401517 	ldw	r9,84(sp)
  803e3c:	1009883a 	mov	r4,r2
  803e40:	400d883a 	mov	r6,r8
  803e44:	480f883a 	mov	r7,r9
  803e48:	180b883a 	mov	r5,r3
  803e4c:	080b5500 	call	80b550 <__ledf2>
  803e50:	da001717 	ldw	r8,92(sp)
  803e54:	da401517 	ldw	r9,84(sp)
  803e58:	10003b0e 	bge	r2,zero,803f48 <_dtoa_r+0x15dc>
  803e5c:	d9001217 	ldw	r4,72(sp)
  803e60:	bd7fffc3 	ldbu	r21,-1(r23)
  803e64:	d9000515 	stw	r4,20(sp)
  803e68:	003d1c06 	br	8032dc <__alt_data_end+0xff8032dc>
  803e6c:	d8c00817 	ldw	r3,32(sp)
  803e70:	18a9c83a 	sub	r20,r3,r2
  803e74:	0005883a 	mov	r2,zero
  803e78:	003d3706 	br	803358 <__alt_data_end+0xff803358>
  803e7c:	00800044 	movi	r2,1
  803e80:	003dd006 	br	8035c4 <__alt_data_end+0xff8035c4>
  803e84:	d8c00217 	ldw	r3,8(sp)
  803e88:	00800d84 	movi	r2,54
  803e8c:	dd400917 	ldw	r21,36(sp)
  803e90:	10c5c83a 	sub	r2,r2,r3
  803e94:	dd000817 	ldw	r20,32(sp)
  803e98:	003d2f06 	br	803358 <__alt_data_end+0xff803358>
  803e9c:	9029883a 	mov	r20,r18
  803ea0:	982b883a 	mov	r21,r19
  803ea4:	04400084 	movi	r17,2
  803ea8:	003bc606 	br	802dc4 <__alt_data_end+0xff802dc4>
  803eac:	d8800617 	ldw	r2,24(sp)
  803eb0:	103efc26 	beq	r2,zero,803aa4 <__alt_data_end+0xff803aa4>
  803eb4:	d8c00c17 	ldw	r3,48(sp)
  803eb8:	00fc890e 	bge	zero,r3,8030e0 <__alt_data_end+0xff8030e0>
  803ebc:	a80b883a 	mov	r5,r21
  803ec0:	a009883a 	mov	r4,r20
  803ec4:	000d883a 	mov	r6,zero
  803ec8:	01d00934 	movhi	r7,16420
  803ecc:	080b6300 	call	80b630 <__muldf3>
  803ed0:	89000044 	addi	r4,r17,1
  803ed4:	1029883a 	mov	r20,r2
  803ed8:	182b883a 	mov	r21,r3
  803edc:	080c6ac0 	call	80c6ac <__floatsidf>
  803ee0:	a009883a 	mov	r4,r20
  803ee4:	a80b883a 	mov	r5,r21
  803ee8:	100d883a 	mov	r6,r2
  803eec:	180f883a 	mov	r7,r3
  803ef0:	080b6300 	call	80b630 <__muldf3>
  803ef4:	1009883a 	mov	r4,r2
  803ef8:	180b883a 	mov	r5,r3
  803efc:	000d883a 	mov	r6,zero
  803f00:	01d00734 	movhi	r7,16412
  803f04:	080a2840 	call	80a284 <__adddf3>
  803f08:	d9000517 	ldw	r4,20(sp)
  803f0c:	1023883a 	mov	r17,r2
  803f10:	00bf3034 	movhi	r2,64704
  803f14:	213fffc4 	addi	r4,r4,-1
  803f18:	1885883a 	add	r2,r3,r2
  803f1c:	d9001215 	stw	r4,72(sp)
  803f20:	d8800e15 	stw	r2,56(sp)
  803f24:	da800c17 	ldw	r10,48(sp)
  803f28:	003bc306 	br	802e38 <__alt_data_end+0xff802e38>
  803f2c:	b039883a 	mov	fp,r22
  803f30:	01000e44 	movi	r4,57
  803f34:	8825883a 	mov	r18,r17
  803f38:	9dc00044 	addi	r23,r19,1
  803f3c:	99000005 	stb	r4,0(r19)
  803f40:	a023883a 	mov	r17,r20
  803f44:	003dae06 	br	803600 <__alt_data_end+0xff803600>
  803f48:	d9800e17 	ldw	r6,56(sp)
  803f4c:	d9c01117 	ldw	r7,68(sp)
  803f50:	0009883a 	mov	r4,zero
  803f54:	014ff834 	movhi	r5,16352
  803f58:	da001715 	stw	r8,92(sp)
  803f5c:	da401515 	stw	r9,84(sp)
  803f60:	080bd540 	call	80bd54 <__subdf3>
  803f64:	da001717 	ldw	r8,92(sp)
  803f68:	da401517 	ldw	r9,84(sp)
  803f6c:	1009883a 	mov	r4,r2
  803f70:	180b883a 	mov	r5,r3
  803f74:	400d883a 	mov	r6,r8
  803f78:	480f883a 	mov	r7,r9
  803f7c:	080b4700 	call	80b470 <__gedf2>
  803f80:	00bc570e 	bge	zero,r2,8030e0 <__alt_data_end+0xff8030e0>
  803f84:	01000c04 	movi	r4,48
  803f88:	00000106 	br	803f90 <_dtoa_r+0x1624>
  803f8c:	102f883a 	mov	r23,r2
  803f90:	b8bfffc4 	addi	r2,r23,-1
  803f94:	10c00007 	ldb	r3,0(r2)
  803f98:	193ffc26 	beq	r3,r4,803f8c <__alt_data_end+0xff803f8c>
  803f9c:	d9801217 	ldw	r6,72(sp)
  803fa0:	d9800515 	stw	r6,20(sp)
  803fa4:	003c1f06 	br	803024 <__alt_data_end+0xff803024>
  803fa8:	d8801217 	ldw	r2,72(sp)
  803fac:	dc001117 	ldw	r16,68(sp)
  803fb0:	d8800515 	stw	r2,20(sp)
  803fb4:	003cc906 	br	8032dc <__alt_data_end+0xff8032dc>
  803fb8:	dd801317 	ldw	r22,76(sp)
  803fbc:	dc001117 	ldw	r16,68(sp)
  803fc0:	dcc01417 	ldw	r19,80(sp)
  803fc4:	dc801017 	ldw	r18,64(sp)
  803fc8:	003c4506 	br	8030e0 <__alt_data_end+0xff8030e0>
  803fcc:	103e5d1e 	bne	r2,zero,803944 <__alt_data_end+0xff803944>
  803fd0:	4080004c 	andi	r2,r8,1
  803fd4:	103e5b26 	beq	r2,zero,803944 <__alt_data_end+0xff803944>
  803fd8:	003e5706 	br	803938 <__alt_data_end+0xff803938>
  803fdc:	d8c00317 	ldw	r3,12(sp)
  803fe0:	00800084 	movi	r2,2
  803fe4:	10c00a16 	blt	r2,r3,804010 <_dtoa_r+0x16a4>
  803fe8:	d9000c17 	ldw	r4,48(sp)
  803fec:	003e8306 	br	8039fc <__alt_data_end+0xff8039fc>
  803ff0:	04400084 	movi	r17,2
  803ff4:	003b7306 	br	802dc4 <__alt_data_end+0xff802dc4>
  803ff8:	d9801217 	ldw	r6,72(sp)
  803ffc:	d9800515 	stw	r6,20(sp)
  804000:	003cb606 	br	8032dc <__alt_data_end+0xff8032dc>
  804004:	d9001217 	ldw	r4,72(sp)
  804008:	d9000515 	stw	r4,20(sp)
  80400c:	003c0506 	br	803024 <__alt_data_end+0xff803024>
  804010:	d9800c17 	ldw	r6,48(sp)
  804014:	d9800615 	stw	r6,24(sp)
  804018:	003e8306 	br	803a28 <__alt_data_end+0xff803a28>
  80401c:	d9800317 	ldw	r6,12(sp)
  804020:	00800084 	movi	r2,2
  804024:	11800216 	blt	r2,r6,804030 <_dtoa_r+0x16c4>
  804028:	d8800c17 	ldw	r2,48(sp)
  80402c:	003da606 	br	8036c8 <__alt_data_end+0xff8036c8>
  804030:	d8800c17 	ldw	r2,48(sp)
  804034:	d8800615 	stw	r2,24(sp)
  804038:	003e7b06 	br	803a28 <__alt_data_end+0xff803a28>
  80403c:	05000044 	movi	r20,1
  804040:	003b0506 	br	802c58 <__alt_data_end+0xff802c58>
  804044:	8009883a 	mov	r4,r16
  804048:	80001115 	stw	zero,68(r16)
  80404c:	000b883a 	mov	r5,zero
  804050:	08059e80 	call	8059e8 <_Balloc>
  804054:	d8800715 	stw	r2,28(sp)
  804058:	d8c00717 	ldw	r3,28(sp)
  80405c:	00bfffc4 	movi	r2,-1
  804060:	01000044 	movi	r4,1
  804064:	d8800c15 	stw	r2,48(sp)
  804068:	80c01015 	stw	r3,64(r16)
  80406c:	d9000b15 	stw	r4,44(sp)
  804070:	d8800615 	stw	r2,24(sp)
  804074:	d8002215 	stw	zero,136(sp)
  804078:	003c1906 	br	8030e0 <__alt_data_end+0xff8030e0>
  80407c:	193d2926 	beq	r3,r4,803524 <__alt_data_end+0xff803524>
  804080:	00c00f04 	movi	r3,60
  804084:	1885c83a 	sub	r2,r3,r2
  804088:	003d7b06 	br	803678 <__alt_data_end+0xff803678>
  80408c:	000b883a 	mov	r5,zero
  804090:	003b1006 	br	802cd4 <__alt_data_end+0xff802cd4>

00804094 <__sflush_r>:
  804094:	2880030b 	ldhu	r2,12(r5)
  804098:	defffb04 	addi	sp,sp,-20
  80409c:	dcc00315 	stw	r19,12(sp)
  8040a0:	dc400115 	stw	r17,4(sp)
  8040a4:	dfc00415 	stw	ra,16(sp)
  8040a8:	dc800215 	stw	r18,8(sp)
  8040ac:	dc000015 	stw	r16,0(sp)
  8040b0:	10c0020c 	andi	r3,r2,8
  8040b4:	2823883a 	mov	r17,r5
  8040b8:	2027883a 	mov	r19,r4
  8040bc:	1800311e 	bne	r3,zero,804184 <__sflush_r+0xf0>
  8040c0:	28c00117 	ldw	r3,4(r5)
  8040c4:	10820014 	ori	r2,r2,2048
  8040c8:	2880030d 	sth	r2,12(r5)
  8040cc:	00c04b0e 	bge	zero,r3,8041fc <__sflush_r+0x168>
  8040d0:	8a000a17 	ldw	r8,40(r17)
  8040d4:	40002326 	beq	r8,zero,804164 <__sflush_r+0xd0>
  8040d8:	9c000017 	ldw	r16,0(r19)
  8040dc:	10c4000c 	andi	r3,r2,4096
  8040e0:	98000015 	stw	zero,0(r19)
  8040e4:	18004826 	beq	r3,zero,804208 <__sflush_r+0x174>
  8040e8:	89801417 	ldw	r6,80(r17)
  8040ec:	10c0010c 	andi	r3,r2,4
  8040f0:	18000626 	beq	r3,zero,80410c <__sflush_r+0x78>
  8040f4:	88c00117 	ldw	r3,4(r17)
  8040f8:	88800c17 	ldw	r2,48(r17)
  8040fc:	30cdc83a 	sub	r6,r6,r3
  804100:	10000226 	beq	r2,zero,80410c <__sflush_r+0x78>
  804104:	88800f17 	ldw	r2,60(r17)
  804108:	308dc83a 	sub	r6,r6,r2
  80410c:	89400717 	ldw	r5,28(r17)
  804110:	9809883a 	mov	r4,r19
  804114:	000f883a 	mov	r7,zero
  804118:	403ee83a 	callr	r8
  80411c:	00ffffc4 	movi	r3,-1
  804120:	10c04426 	beq	r2,r3,804234 <__sflush_r+0x1a0>
  804124:	88c0030b 	ldhu	r3,12(r17)
  804128:	89000417 	ldw	r4,16(r17)
  80412c:	88000115 	stw	zero,4(r17)
  804130:	197dffcc 	andi	r5,r3,63487
  804134:	8940030d 	sth	r5,12(r17)
  804138:	89000015 	stw	r4,0(r17)
  80413c:	18c4000c 	andi	r3,r3,4096
  804140:	18002c1e 	bne	r3,zero,8041f4 <__sflush_r+0x160>
  804144:	89400c17 	ldw	r5,48(r17)
  804148:	9c000015 	stw	r16,0(r19)
  80414c:	28000526 	beq	r5,zero,804164 <__sflush_r+0xd0>
  804150:	88801004 	addi	r2,r17,64
  804154:	28800226 	beq	r5,r2,804160 <__sflush_r+0xcc>
  804158:	9809883a 	mov	r4,r19
  80415c:	08047ec0 	call	8047ec <_free_r>
  804160:	88000c15 	stw	zero,48(r17)
  804164:	0005883a 	mov	r2,zero
  804168:	dfc00417 	ldw	ra,16(sp)
  80416c:	dcc00317 	ldw	r19,12(sp)
  804170:	dc800217 	ldw	r18,8(sp)
  804174:	dc400117 	ldw	r17,4(sp)
  804178:	dc000017 	ldw	r16,0(sp)
  80417c:	dec00504 	addi	sp,sp,20
  804180:	f800283a 	ret
  804184:	2c800417 	ldw	r18,16(r5)
  804188:	903ff626 	beq	r18,zero,804164 <__alt_data_end+0xff804164>
  80418c:	2c000017 	ldw	r16,0(r5)
  804190:	108000cc 	andi	r2,r2,3
  804194:	2c800015 	stw	r18,0(r5)
  804198:	84a1c83a 	sub	r16,r16,r18
  80419c:	1000131e 	bne	r2,zero,8041ec <__sflush_r+0x158>
  8041a0:	28800517 	ldw	r2,20(r5)
  8041a4:	88800215 	stw	r2,8(r17)
  8041a8:	04000316 	blt	zero,r16,8041b8 <__sflush_r+0x124>
  8041ac:	003fed06 	br	804164 <__alt_data_end+0xff804164>
  8041b0:	90a5883a 	add	r18,r18,r2
  8041b4:	043feb0e 	bge	zero,r16,804164 <__alt_data_end+0xff804164>
  8041b8:	88800917 	ldw	r2,36(r17)
  8041bc:	89400717 	ldw	r5,28(r17)
  8041c0:	800f883a 	mov	r7,r16
  8041c4:	900d883a 	mov	r6,r18
  8041c8:	9809883a 	mov	r4,r19
  8041cc:	103ee83a 	callr	r2
  8041d0:	80a1c83a 	sub	r16,r16,r2
  8041d4:	00bff616 	blt	zero,r2,8041b0 <__alt_data_end+0xff8041b0>
  8041d8:	88c0030b 	ldhu	r3,12(r17)
  8041dc:	00bfffc4 	movi	r2,-1
  8041e0:	18c01014 	ori	r3,r3,64
  8041e4:	88c0030d 	sth	r3,12(r17)
  8041e8:	003fdf06 	br	804168 <__alt_data_end+0xff804168>
  8041ec:	0005883a 	mov	r2,zero
  8041f0:	003fec06 	br	8041a4 <__alt_data_end+0xff8041a4>
  8041f4:	88801415 	stw	r2,80(r17)
  8041f8:	003fd206 	br	804144 <__alt_data_end+0xff804144>
  8041fc:	28c00f17 	ldw	r3,60(r5)
  804200:	00ffb316 	blt	zero,r3,8040d0 <__alt_data_end+0xff8040d0>
  804204:	003fd706 	br	804164 <__alt_data_end+0xff804164>
  804208:	89400717 	ldw	r5,28(r17)
  80420c:	000d883a 	mov	r6,zero
  804210:	9809883a 	mov	r4,r19
  804214:	01c00044 	movi	r7,1
  804218:	403ee83a 	callr	r8
  80421c:	100d883a 	mov	r6,r2
  804220:	00bfffc4 	movi	r2,-1
  804224:	30801426 	beq	r6,r2,804278 <__sflush_r+0x1e4>
  804228:	8880030b 	ldhu	r2,12(r17)
  80422c:	8a000a17 	ldw	r8,40(r17)
  804230:	003fae06 	br	8040ec <__alt_data_end+0xff8040ec>
  804234:	98c00017 	ldw	r3,0(r19)
  804238:	183fba26 	beq	r3,zero,804124 <__alt_data_end+0xff804124>
  80423c:	01000744 	movi	r4,29
  804240:	19000626 	beq	r3,r4,80425c <__sflush_r+0x1c8>
  804244:	01000584 	movi	r4,22
  804248:	19000426 	beq	r3,r4,80425c <__sflush_r+0x1c8>
  80424c:	88c0030b 	ldhu	r3,12(r17)
  804250:	18c01014 	ori	r3,r3,64
  804254:	88c0030d 	sth	r3,12(r17)
  804258:	003fc306 	br	804168 <__alt_data_end+0xff804168>
  80425c:	8880030b 	ldhu	r2,12(r17)
  804260:	88c00417 	ldw	r3,16(r17)
  804264:	88000115 	stw	zero,4(r17)
  804268:	10bdffcc 	andi	r2,r2,63487
  80426c:	8880030d 	sth	r2,12(r17)
  804270:	88c00015 	stw	r3,0(r17)
  804274:	003fb306 	br	804144 <__alt_data_end+0xff804144>
  804278:	98800017 	ldw	r2,0(r19)
  80427c:	103fea26 	beq	r2,zero,804228 <__alt_data_end+0xff804228>
  804280:	00c00744 	movi	r3,29
  804284:	10c00226 	beq	r2,r3,804290 <__sflush_r+0x1fc>
  804288:	00c00584 	movi	r3,22
  80428c:	10ffd21e 	bne	r2,r3,8041d8 <__alt_data_end+0xff8041d8>
  804290:	9c000015 	stw	r16,0(r19)
  804294:	0005883a 	mov	r2,zero
  804298:	003fb306 	br	804168 <__alt_data_end+0xff804168>

0080429c <_fflush_r>:
  80429c:	defffd04 	addi	sp,sp,-12
  8042a0:	dc000115 	stw	r16,4(sp)
  8042a4:	dfc00215 	stw	ra,8(sp)
  8042a8:	2021883a 	mov	r16,r4
  8042ac:	20000226 	beq	r4,zero,8042b8 <_fflush_r+0x1c>
  8042b0:	20800e17 	ldw	r2,56(r4)
  8042b4:	10000c26 	beq	r2,zero,8042e8 <_fflush_r+0x4c>
  8042b8:	2880030f 	ldh	r2,12(r5)
  8042bc:	1000051e 	bne	r2,zero,8042d4 <_fflush_r+0x38>
  8042c0:	0005883a 	mov	r2,zero
  8042c4:	dfc00217 	ldw	ra,8(sp)
  8042c8:	dc000117 	ldw	r16,4(sp)
  8042cc:	dec00304 	addi	sp,sp,12
  8042d0:	f800283a 	ret
  8042d4:	8009883a 	mov	r4,r16
  8042d8:	dfc00217 	ldw	ra,8(sp)
  8042dc:	dc000117 	ldw	r16,4(sp)
  8042e0:	dec00304 	addi	sp,sp,12
  8042e4:	08040941 	jmpi	804094 <__sflush_r>
  8042e8:	d9400015 	stw	r5,0(sp)
  8042ec:	08046780 	call	804678 <__sinit>
  8042f0:	d9400017 	ldw	r5,0(sp)
  8042f4:	003ff006 	br	8042b8 <__alt_data_end+0xff8042b8>

008042f8 <fflush>:
  8042f8:	20000526 	beq	r4,zero,804310 <fflush+0x18>
  8042fc:	00802074 	movhi	r2,129
  804300:	108b1c04 	addi	r2,r2,11376
  804304:	200b883a 	mov	r5,r4
  804308:	11000017 	ldw	r4,0(r2)
  80430c:	080429c1 	jmpi	80429c <_fflush_r>
  804310:	00802074 	movhi	r2,129
  804314:	108b1b04 	addi	r2,r2,11372
  804318:	11000017 	ldw	r4,0(r2)
  80431c:	01402034 	movhi	r5,128
  804320:	2950a704 	addi	r5,r5,17052
  804324:	0804ba01 	jmpi	804ba0 <_fwalk_reent>

00804328 <__fp_lock>:
  804328:	0005883a 	mov	r2,zero
  80432c:	f800283a 	ret

00804330 <__fp_unlock>:
  804330:	0005883a 	mov	r2,zero
  804334:	f800283a 	ret

00804338 <_cleanup_r>:
  804338:	01402074 	movhi	r5,129
  80433c:	2960c004 	addi	r5,r5,-32000
  804340:	0804ba01 	jmpi	804ba0 <_fwalk_reent>

00804344 <__sinit.part.1>:
  804344:	defff704 	addi	sp,sp,-36
  804348:	00c02034 	movhi	r3,128
  80434c:	dfc00815 	stw	ra,32(sp)
  804350:	ddc00715 	stw	r23,28(sp)
  804354:	dd800615 	stw	r22,24(sp)
  804358:	dd400515 	stw	r21,20(sp)
  80435c:	dd000415 	stw	r20,16(sp)
  804360:	dcc00315 	stw	r19,12(sp)
  804364:	dc800215 	stw	r18,8(sp)
  804368:	dc400115 	stw	r17,4(sp)
  80436c:	dc000015 	stw	r16,0(sp)
  804370:	18d0ce04 	addi	r3,r3,17208
  804374:	24000117 	ldw	r16,4(r4)
  804378:	20c00f15 	stw	r3,60(r4)
  80437c:	2080bb04 	addi	r2,r4,748
  804380:	00c000c4 	movi	r3,3
  804384:	20c0b915 	stw	r3,740(r4)
  804388:	2080ba15 	stw	r2,744(r4)
  80438c:	2000b815 	stw	zero,736(r4)
  804390:	05c00204 	movi	r23,8
  804394:	00800104 	movi	r2,4
  804398:	2025883a 	mov	r18,r4
  80439c:	b80d883a 	mov	r6,r23
  8043a0:	81001704 	addi	r4,r16,92
  8043a4:	000b883a 	mov	r5,zero
  8043a8:	80000015 	stw	zero,0(r16)
  8043ac:	80000115 	stw	zero,4(r16)
  8043b0:	80000215 	stw	zero,8(r16)
  8043b4:	8080030d 	sth	r2,12(r16)
  8043b8:	80001915 	stw	zero,100(r16)
  8043bc:	8000038d 	sth	zero,14(r16)
  8043c0:	80000415 	stw	zero,16(r16)
  8043c4:	80000515 	stw	zero,20(r16)
  8043c8:	80000615 	stw	zero,24(r16)
  8043cc:	08058c40 	call	8058c4 <memset>
  8043d0:	05802034 	movhi	r22,128
  8043d4:	94400217 	ldw	r17,8(r18)
  8043d8:	05402034 	movhi	r21,128
  8043dc:	05002034 	movhi	r20,128
  8043e0:	04c02034 	movhi	r19,128
  8043e4:	b59a9404 	addi	r22,r22,27216
  8043e8:	ad5aab04 	addi	r21,r21,27308
  8043ec:	a51aca04 	addi	r20,r20,27432
  8043f0:	9cdae104 	addi	r19,r19,27524
  8043f4:	85800815 	stw	r22,32(r16)
  8043f8:	85400915 	stw	r21,36(r16)
  8043fc:	85000a15 	stw	r20,40(r16)
  804400:	84c00b15 	stw	r19,44(r16)
  804404:	84000715 	stw	r16,28(r16)
  804408:	00800284 	movi	r2,10
  80440c:	8880030d 	sth	r2,12(r17)
  804410:	00800044 	movi	r2,1
  804414:	89001704 	addi	r4,r17,92
  804418:	b80d883a 	mov	r6,r23
  80441c:	000b883a 	mov	r5,zero
  804420:	88000015 	stw	zero,0(r17)
  804424:	88000115 	stw	zero,4(r17)
  804428:	88000215 	stw	zero,8(r17)
  80442c:	88001915 	stw	zero,100(r17)
  804430:	8880038d 	sth	r2,14(r17)
  804434:	88000415 	stw	zero,16(r17)
  804438:	88000515 	stw	zero,20(r17)
  80443c:	88000615 	stw	zero,24(r17)
  804440:	08058c40 	call	8058c4 <memset>
  804444:	94000317 	ldw	r16,12(r18)
  804448:	00800484 	movi	r2,18
  80444c:	8c400715 	stw	r17,28(r17)
  804450:	8d800815 	stw	r22,32(r17)
  804454:	8d400915 	stw	r21,36(r17)
  804458:	8d000a15 	stw	r20,40(r17)
  80445c:	8cc00b15 	stw	r19,44(r17)
  804460:	8080030d 	sth	r2,12(r16)
  804464:	00800084 	movi	r2,2
  804468:	80000015 	stw	zero,0(r16)
  80446c:	80000115 	stw	zero,4(r16)
  804470:	80000215 	stw	zero,8(r16)
  804474:	80001915 	stw	zero,100(r16)
  804478:	8080038d 	sth	r2,14(r16)
  80447c:	80000415 	stw	zero,16(r16)
  804480:	80000515 	stw	zero,20(r16)
  804484:	80000615 	stw	zero,24(r16)
  804488:	81001704 	addi	r4,r16,92
  80448c:	000b883a 	mov	r5,zero
  804490:	b80d883a 	mov	r6,r23
  804494:	08058c40 	call	8058c4 <memset>
  804498:	00800044 	movi	r2,1
  80449c:	84000715 	stw	r16,28(r16)
  8044a0:	85800815 	stw	r22,32(r16)
  8044a4:	85400915 	stw	r21,36(r16)
  8044a8:	85000a15 	stw	r20,40(r16)
  8044ac:	84c00b15 	stw	r19,44(r16)
  8044b0:	90800e15 	stw	r2,56(r18)
  8044b4:	dfc00817 	ldw	ra,32(sp)
  8044b8:	ddc00717 	ldw	r23,28(sp)
  8044bc:	dd800617 	ldw	r22,24(sp)
  8044c0:	dd400517 	ldw	r21,20(sp)
  8044c4:	dd000417 	ldw	r20,16(sp)
  8044c8:	dcc00317 	ldw	r19,12(sp)
  8044cc:	dc800217 	ldw	r18,8(sp)
  8044d0:	dc400117 	ldw	r17,4(sp)
  8044d4:	dc000017 	ldw	r16,0(sp)
  8044d8:	dec00904 	addi	sp,sp,36
  8044dc:	f800283a 	ret

008044e0 <__sfmoreglue>:
  8044e0:	defffc04 	addi	sp,sp,-16
  8044e4:	dc400115 	stw	r17,4(sp)
  8044e8:	2c7fffc4 	addi	r17,r5,-1
  8044ec:	8c401a24 	muli	r17,r17,104
  8044f0:	dc800215 	stw	r18,8(sp)
  8044f4:	2825883a 	mov	r18,r5
  8044f8:	89401d04 	addi	r5,r17,116
  8044fc:	dc000015 	stw	r16,0(sp)
  804500:	dfc00315 	stw	ra,12(sp)
  804504:	0804efc0 	call	804efc <_malloc_r>
  804508:	1021883a 	mov	r16,r2
  80450c:	10000726 	beq	r2,zero,80452c <__sfmoreglue+0x4c>
  804510:	11000304 	addi	r4,r2,12
  804514:	10000015 	stw	zero,0(r2)
  804518:	14800115 	stw	r18,4(r2)
  80451c:	11000215 	stw	r4,8(r2)
  804520:	000b883a 	mov	r5,zero
  804524:	89801a04 	addi	r6,r17,104
  804528:	08058c40 	call	8058c4 <memset>
  80452c:	8005883a 	mov	r2,r16
  804530:	dfc00317 	ldw	ra,12(sp)
  804534:	dc800217 	ldw	r18,8(sp)
  804538:	dc400117 	ldw	r17,4(sp)
  80453c:	dc000017 	ldw	r16,0(sp)
  804540:	dec00404 	addi	sp,sp,16
  804544:	f800283a 	ret

00804548 <__sfp>:
  804548:	00802074 	movhi	r2,129
  80454c:	defffb04 	addi	sp,sp,-20
  804550:	108b1b04 	addi	r2,r2,11372
  804554:	dc800215 	stw	r18,8(sp)
  804558:	14800017 	ldw	r18,0(r2)
  80455c:	dcc00315 	stw	r19,12(sp)
  804560:	dfc00415 	stw	ra,16(sp)
  804564:	90800e17 	ldw	r2,56(r18)
  804568:	dc400115 	stw	r17,4(sp)
  80456c:	dc000015 	stw	r16,0(sp)
  804570:	2027883a 	mov	r19,r4
  804574:	1000021e 	bne	r2,zero,804580 <__sfp+0x38>
  804578:	9009883a 	mov	r4,r18
  80457c:	08043440 	call	804344 <__sinit.part.1>
  804580:	9480b804 	addi	r18,r18,736
  804584:	047fffc4 	movi	r17,-1
  804588:	91400117 	ldw	r5,4(r18)
  80458c:	94000217 	ldw	r16,8(r18)
  804590:	297fffc4 	addi	r5,r5,-1
  804594:	28000a16 	blt	r5,zero,8045c0 <__sfp+0x78>
  804598:	8080030f 	ldh	r2,12(r16)
  80459c:	10000c26 	beq	r2,zero,8045d0 <__sfp+0x88>
  8045a0:	80c01d04 	addi	r3,r16,116
  8045a4:	00000206 	br	8045b0 <__sfp+0x68>
  8045a8:	18bfe60f 	ldh	r2,-104(r3)
  8045ac:	10000826 	beq	r2,zero,8045d0 <__sfp+0x88>
  8045b0:	297fffc4 	addi	r5,r5,-1
  8045b4:	1c3ffd04 	addi	r16,r3,-12
  8045b8:	18c01a04 	addi	r3,r3,104
  8045bc:	2c7ffa1e 	bne	r5,r17,8045a8 <__alt_data_end+0xff8045a8>
  8045c0:	90800017 	ldw	r2,0(r18)
  8045c4:	10001d26 	beq	r2,zero,80463c <__sfp+0xf4>
  8045c8:	1025883a 	mov	r18,r2
  8045cc:	003fee06 	br	804588 <__alt_data_end+0xff804588>
  8045d0:	00bfffc4 	movi	r2,-1
  8045d4:	8080038d 	sth	r2,14(r16)
  8045d8:	00800044 	movi	r2,1
  8045dc:	8080030d 	sth	r2,12(r16)
  8045e0:	80001915 	stw	zero,100(r16)
  8045e4:	80000015 	stw	zero,0(r16)
  8045e8:	80000215 	stw	zero,8(r16)
  8045ec:	80000115 	stw	zero,4(r16)
  8045f0:	80000415 	stw	zero,16(r16)
  8045f4:	80000515 	stw	zero,20(r16)
  8045f8:	80000615 	stw	zero,24(r16)
  8045fc:	81001704 	addi	r4,r16,92
  804600:	000b883a 	mov	r5,zero
  804604:	01800204 	movi	r6,8
  804608:	08058c40 	call	8058c4 <memset>
  80460c:	8005883a 	mov	r2,r16
  804610:	80000c15 	stw	zero,48(r16)
  804614:	80000d15 	stw	zero,52(r16)
  804618:	80001115 	stw	zero,68(r16)
  80461c:	80001215 	stw	zero,72(r16)
  804620:	dfc00417 	ldw	ra,16(sp)
  804624:	dcc00317 	ldw	r19,12(sp)
  804628:	dc800217 	ldw	r18,8(sp)
  80462c:	dc400117 	ldw	r17,4(sp)
  804630:	dc000017 	ldw	r16,0(sp)
  804634:	dec00504 	addi	sp,sp,20
  804638:	f800283a 	ret
  80463c:	9809883a 	mov	r4,r19
  804640:	01400104 	movi	r5,4
  804644:	08044e00 	call	8044e0 <__sfmoreglue>
  804648:	90800015 	stw	r2,0(r18)
  80464c:	103fde1e 	bne	r2,zero,8045c8 <__alt_data_end+0xff8045c8>
  804650:	00800304 	movi	r2,12
  804654:	98800015 	stw	r2,0(r19)
  804658:	0005883a 	mov	r2,zero
  80465c:	003ff006 	br	804620 <__alt_data_end+0xff804620>

00804660 <_cleanup>:
  804660:	00802074 	movhi	r2,129
  804664:	108b1b04 	addi	r2,r2,11372
  804668:	11000017 	ldw	r4,0(r2)
  80466c:	01402074 	movhi	r5,129
  804670:	2960c004 	addi	r5,r5,-32000
  804674:	0804ba01 	jmpi	804ba0 <_fwalk_reent>

00804678 <__sinit>:
  804678:	20800e17 	ldw	r2,56(r4)
  80467c:	10000126 	beq	r2,zero,804684 <__sinit+0xc>
  804680:	f800283a 	ret
  804684:	08043441 	jmpi	804344 <__sinit.part.1>

00804688 <__sfp_lock_acquire>:
  804688:	f800283a 	ret

0080468c <__sfp_lock_release>:
  80468c:	f800283a 	ret

00804690 <__sinit_lock_acquire>:
  804690:	f800283a 	ret

00804694 <__sinit_lock_release>:
  804694:	f800283a 	ret

00804698 <__fp_lock_all>:
  804698:	00802074 	movhi	r2,129
  80469c:	108b1c04 	addi	r2,r2,11376
  8046a0:	11000017 	ldw	r4,0(r2)
  8046a4:	01402034 	movhi	r5,128
  8046a8:	2950ca04 	addi	r5,r5,17192
  8046ac:	0804adc1 	jmpi	804adc <_fwalk>

008046b0 <__fp_unlock_all>:
  8046b0:	00802074 	movhi	r2,129
  8046b4:	108b1c04 	addi	r2,r2,11376
  8046b8:	11000017 	ldw	r4,0(r2)
  8046bc:	01402034 	movhi	r5,128
  8046c0:	2950cc04 	addi	r5,r5,17200
  8046c4:	0804adc1 	jmpi	804adc <_fwalk>

008046c8 <_malloc_trim_r>:
  8046c8:	defffb04 	addi	sp,sp,-20
  8046cc:	dcc00315 	stw	r19,12(sp)
  8046d0:	04c02074 	movhi	r19,129
  8046d4:	dc800215 	stw	r18,8(sp)
  8046d8:	dc400115 	stw	r17,4(sp)
  8046dc:	dc000015 	stw	r16,0(sp)
  8046e0:	dfc00415 	stw	ra,16(sp)
  8046e4:	2821883a 	mov	r16,r5
  8046e8:	9cc50604 	addi	r19,r19,5144
  8046ec:	2025883a 	mov	r18,r4
  8046f0:	080ce440 	call	80ce44 <__malloc_lock>
  8046f4:	98800217 	ldw	r2,8(r19)
  8046f8:	14400117 	ldw	r17,4(r2)
  8046fc:	00bfff04 	movi	r2,-4
  804700:	88a2703a 	and	r17,r17,r2
  804704:	8c21c83a 	sub	r16,r17,r16
  804708:	8403fbc4 	addi	r16,r16,4079
  80470c:	8020d33a 	srli	r16,r16,12
  804710:	0083ffc4 	movi	r2,4095
  804714:	843fffc4 	addi	r16,r16,-1
  804718:	8020933a 	slli	r16,r16,12
  80471c:	1400060e 	bge	r2,r16,804738 <_malloc_trim_r+0x70>
  804720:	9009883a 	mov	r4,r18
  804724:	000b883a 	mov	r5,zero
  804728:	08069fc0 	call	8069fc <_sbrk_r>
  80472c:	98c00217 	ldw	r3,8(r19)
  804730:	1c47883a 	add	r3,r3,r17
  804734:	10c00a26 	beq	r2,r3,804760 <_malloc_trim_r+0x98>
  804738:	9009883a 	mov	r4,r18
  80473c:	080ce640 	call	80ce64 <__malloc_unlock>
  804740:	0005883a 	mov	r2,zero
  804744:	dfc00417 	ldw	ra,16(sp)
  804748:	dcc00317 	ldw	r19,12(sp)
  80474c:	dc800217 	ldw	r18,8(sp)
  804750:	dc400117 	ldw	r17,4(sp)
  804754:	dc000017 	ldw	r16,0(sp)
  804758:	dec00504 	addi	sp,sp,20
  80475c:	f800283a 	ret
  804760:	9009883a 	mov	r4,r18
  804764:	040bc83a 	sub	r5,zero,r16
  804768:	08069fc0 	call	8069fc <_sbrk_r>
  80476c:	00ffffc4 	movi	r3,-1
  804770:	10c00d26 	beq	r2,r3,8047a8 <_malloc_trim_r+0xe0>
  804774:	00c02074 	movhi	r3,129
  804778:	18d28a04 	addi	r3,r3,18984
  80477c:	18800017 	ldw	r2,0(r3)
  804780:	99000217 	ldw	r4,8(r19)
  804784:	8c23c83a 	sub	r17,r17,r16
  804788:	8c400054 	ori	r17,r17,1
  80478c:	1421c83a 	sub	r16,r2,r16
  804790:	24400115 	stw	r17,4(r4)
  804794:	9009883a 	mov	r4,r18
  804798:	1c000015 	stw	r16,0(r3)
  80479c:	080ce640 	call	80ce64 <__malloc_unlock>
  8047a0:	00800044 	movi	r2,1
  8047a4:	003fe706 	br	804744 <__alt_data_end+0xff804744>
  8047a8:	9009883a 	mov	r4,r18
  8047ac:	000b883a 	mov	r5,zero
  8047b0:	08069fc0 	call	8069fc <_sbrk_r>
  8047b4:	99000217 	ldw	r4,8(r19)
  8047b8:	014003c4 	movi	r5,15
  8047bc:	1107c83a 	sub	r3,r2,r4
  8047c0:	28ffdd0e 	bge	r5,r3,804738 <__alt_data_end+0xff804738>
  8047c4:	01402074 	movhi	r5,129
  8047c8:	294b1e04 	addi	r5,r5,11384
  8047cc:	29400017 	ldw	r5,0(r5)
  8047d0:	18c00054 	ori	r3,r3,1
  8047d4:	20c00115 	stw	r3,4(r4)
  8047d8:	00c02074 	movhi	r3,129
  8047dc:	1145c83a 	sub	r2,r2,r5
  8047e0:	18d28a04 	addi	r3,r3,18984
  8047e4:	18800015 	stw	r2,0(r3)
  8047e8:	003fd306 	br	804738 <__alt_data_end+0xff804738>

008047ec <_free_r>:
  8047ec:	28004c26 	beq	r5,zero,804920 <_free_r+0x134>
  8047f0:	defffd04 	addi	sp,sp,-12
  8047f4:	dc400115 	stw	r17,4(sp)
  8047f8:	dc000015 	stw	r16,0(sp)
  8047fc:	2023883a 	mov	r17,r4
  804800:	2821883a 	mov	r16,r5
  804804:	dfc00215 	stw	ra,8(sp)
  804808:	080ce440 	call	80ce44 <__malloc_lock>
  80480c:	813fff17 	ldw	r4,-4(r16)
  804810:	00bfff84 	movi	r2,-2
  804814:	02402074 	movhi	r9,129
  804818:	81bffe04 	addi	r6,r16,-8
  80481c:	2084703a 	and	r2,r4,r2
  804820:	4a450604 	addi	r9,r9,5144
  804824:	308b883a 	add	r5,r6,r2
  804828:	2a000117 	ldw	r8,4(r5)
  80482c:	49c00217 	ldw	r7,8(r9)
  804830:	00ffff04 	movi	r3,-4
  804834:	40c6703a 	and	r3,r8,r3
  804838:	39405326 	beq	r7,r5,804988 <_free_r+0x19c>
  80483c:	28c00115 	stw	r3,4(r5)
  804840:	2100004c 	andi	r4,r4,1
  804844:	2000091e 	bne	r4,zero,80486c <_free_r+0x80>
  804848:	81fffe17 	ldw	r7,-8(r16)
  80484c:	4a000204 	addi	r8,r9,8
  804850:	31cdc83a 	sub	r6,r6,r7
  804854:	31000217 	ldw	r4,8(r6)
  804858:	11c5883a 	add	r2,r2,r7
  80485c:	22006126 	beq	r4,r8,8049e4 <_free_r+0x1f8>
  804860:	31c00317 	ldw	r7,12(r6)
  804864:	21c00315 	stw	r7,12(r4)
  804868:	39000215 	stw	r4,8(r7)
  80486c:	28c9883a 	add	r4,r5,r3
  804870:	21c00117 	ldw	r7,4(r4)
  804874:	39c0004c 	andi	r7,r7,1
  804878:	38000d1e 	bne	r7,zero,8048b0 <_free_r+0xc4>
  80487c:	29000217 	ldw	r4,8(r5)
  804880:	10c5883a 	add	r2,r2,r3
  804884:	00c02074 	movhi	r3,129
  804888:	18c50804 	addi	r3,r3,5152
  80488c:	20c07526 	beq	r4,r3,804a64 <_free_r+0x278>
  804890:	29c00317 	ldw	r7,12(r5)
  804894:	11400054 	ori	r5,r2,1
  804898:	3087883a 	add	r3,r6,r2
  80489c:	21c00315 	stw	r7,12(r4)
  8048a0:	39000215 	stw	r4,8(r7)
  8048a4:	31400115 	stw	r5,4(r6)
  8048a8:	18800015 	stw	r2,0(r3)
  8048ac:	00000406 	br	8048c0 <_free_r+0xd4>
  8048b0:	10c00054 	ori	r3,r2,1
  8048b4:	30c00115 	stw	r3,4(r6)
  8048b8:	3087883a 	add	r3,r6,r2
  8048bc:	18800015 	stw	r2,0(r3)
  8048c0:	00c07fc4 	movi	r3,511
  8048c4:	18801736 	bltu	r3,r2,804924 <_free_r+0x138>
  8048c8:	1004d0fa 	srli	r2,r2,3
  8048cc:	01400044 	movi	r5,1
  8048d0:	49000117 	ldw	r4,4(r9)
  8048d4:	1087883a 	add	r3,r2,r2
  8048d8:	18c7883a 	add	r3,r3,r3
  8048dc:	1005d0ba 	srai	r2,r2,2
  8048e0:	18c7883a 	add	r3,r3,r3
  8048e4:	1a47883a 	add	r3,r3,r9
  8048e8:	19c00217 	ldw	r7,8(r3)
  8048ec:	2884983a 	sll	r2,r5,r2
  8048f0:	30c00315 	stw	r3,12(r6)
  8048f4:	31c00215 	stw	r7,8(r6)
  8048f8:	1104b03a 	or	r2,r2,r4
  8048fc:	19800215 	stw	r6,8(r3)
  804900:	48800115 	stw	r2,4(r9)
  804904:	39800315 	stw	r6,12(r7)
  804908:	8809883a 	mov	r4,r17
  80490c:	dfc00217 	ldw	ra,8(sp)
  804910:	dc400117 	ldw	r17,4(sp)
  804914:	dc000017 	ldw	r16,0(sp)
  804918:	dec00304 	addi	sp,sp,12
  80491c:	080ce641 	jmpi	80ce64 <__malloc_unlock>
  804920:	f800283a 	ret
  804924:	1006d27a 	srli	r3,r2,9
  804928:	01000104 	movi	r4,4
  80492c:	20c04036 	bltu	r4,r3,804a30 <_free_r+0x244>
  804930:	1006d1ba 	srli	r3,r2,6
  804934:	19400e04 	addi	r5,r3,56
  804938:	2947883a 	add	r3,r5,r5
  80493c:	18c7883a 	add	r3,r3,r3
  804940:	18c7883a 	add	r3,r3,r3
  804944:	1a49883a 	add	r4,r3,r9
  804948:	20c00217 	ldw	r3,8(r4)
  80494c:	01c02074 	movhi	r7,129
  804950:	39c50604 	addi	r7,r7,5144
  804954:	19003b26 	beq	r3,r4,804a44 <_free_r+0x258>
  804958:	01ffff04 	movi	r7,-4
  80495c:	19400117 	ldw	r5,4(r3)
  804960:	29ca703a 	and	r5,r5,r7
  804964:	1140022e 	bgeu	r2,r5,804970 <_free_r+0x184>
  804968:	18c00217 	ldw	r3,8(r3)
  80496c:	20fffb1e 	bne	r4,r3,80495c <__alt_data_end+0xff80495c>
  804970:	18800317 	ldw	r2,12(r3)
  804974:	30800315 	stw	r2,12(r6)
  804978:	30c00215 	stw	r3,8(r6)
  80497c:	11800215 	stw	r6,8(r2)
  804980:	19800315 	stw	r6,12(r3)
  804984:	003fe006 	br	804908 <__alt_data_end+0xff804908>
  804988:	2100004c 	andi	r4,r4,1
  80498c:	1885883a 	add	r2,r3,r2
  804990:	2000071e 	bne	r4,zero,8049b0 <_free_r+0x1c4>
  804994:	817ffe17 	ldw	r5,-8(r16)
  804998:	314dc83a 	sub	r6,r6,r5
  80499c:	30c00317 	ldw	r3,12(r6)
  8049a0:	31000217 	ldw	r4,8(r6)
  8049a4:	1145883a 	add	r2,r2,r5
  8049a8:	20c00315 	stw	r3,12(r4)
  8049ac:	19000215 	stw	r4,8(r3)
  8049b0:	10c00054 	ori	r3,r2,1
  8049b4:	30c00115 	stw	r3,4(r6)
  8049b8:	00c02074 	movhi	r3,129
  8049bc:	18cb1f04 	addi	r3,r3,11388
  8049c0:	18c00017 	ldw	r3,0(r3)
  8049c4:	49800215 	stw	r6,8(r9)
  8049c8:	10ffcf36 	bltu	r2,r3,804908 <__alt_data_end+0xff804908>
  8049cc:	00802074 	movhi	r2,129
  8049d0:	10928104 	addi	r2,r2,18948
  8049d4:	11400017 	ldw	r5,0(r2)
  8049d8:	8809883a 	mov	r4,r17
  8049dc:	08046c80 	call	8046c8 <_malloc_trim_r>
  8049e0:	003fc906 	br	804908 <__alt_data_end+0xff804908>
  8049e4:	28c9883a 	add	r4,r5,r3
  8049e8:	21000117 	ldw	r4,4(r4)
  8049ec:	2100004c 	andi	r4,r4,1
  8049f0:	20000a1e 	bne	r4,zero,804a1c <_free_r+0x230>
  8049f4:	29000317 	ldw	r4,12(r5)
  8049f8:	29400217 	ldw	r5,8(r5)
  8049fc:	10c5883a 	add	r2,r2,r3
  804a00:	10c00054 	ori	r3,r2,1
  804a04:	29000315 	stw	r4,12(r5)
  804a08:	21400215 	stw	r5,8(r4)
  804a0c:	30c00115 	stw	r3,4(r6)
  804a10:	308d883a 	add	r6,r6,r2
  804a14:	30800015 	stw	r2,0(r6)
  804a18:	003fbb06 	br	804908 <__alt_data_end+0xff804908>
  804a1c:	10c00054 	ori	r3,r2,1
  804a20:	30c00115 	stw	r3,4(r6)
  804a24:	308d883a 	add	r6,r6,r2
  804a28:	30800015 	stw	r2,0(r6)
  804a2c:	003fb606 	br	804908 <__alt_data_end+0xff804908>
  804a30:	01000504 	movi	r4,20
  804a34:	20c01436 	bltu	r4,r3,804a88 <_free_r+0x29c>
  804a38:	194016c4 	addi	r5,r3,91
  804a3c:	2947883a 	add	r3,r5,r5
  804a40:	003fbe06 	br	80493c <__alt_data_end+0xff80493c>
  804a44:	280bd0ba 	srai	r5,r5,2
  804a48:	00800044 	movi	r2,1
  804a4c:	39000117 	ldw	r4,4(r7)
  804a50:	114a983a 	sll	r5,r2,r5
  804a54:	1805883a 	mov	r2,r3
  804a58:	2908b03a 	or	r4,r5,r4
  804a5c:	39000115 	stw	r4,4(r7)
  804a60:	003fc406 	br	804974 <__alt_data_end+0xff804974>
  804a64:	49800515 	stw	r6,20(r9)
  804a68:	49800415 	stw	r6,16(r9)
  804a6c:	10c00054 	ori	r3,r2,1
  804a70:	31000315 	stw	r4,12(r6)
  804a74:	31000215 	stw	r4,8(r6)
  804a78:	30c00115 	stw	r3,4(r6)
  804a7c:	308d883a 	add	r6,r6,r2
  804a80:	30800015 	stw	r2,0(r6)
  804a84:	003fa006 	br	804908 <__alt_data_end+0xff804908>
  804a88:	01001504 	movi	r4,84
  804a8c:	20c00436 	bltu	r4,r3,804aa0 <_free_r+0x2b4>
  804a90:	1006d33a 	srli	r3,r2,12
  804a94:	19401b84 	addi	r5,r3,110
  804a98:	2947883a 	add	r3,r5,r5
  804a9c:	003fa706 	br	80493c <__alt_data_end+0xff80493c>
  804aa0:	01005504 	movi	r4,340
  804aa4:	20c00436 	bltu	r4,r3,804ab8 <_free_r+0x2cc>
  804aa8:	1006d3fa 	srli	r3,r2,15
  804aac:	19401dc4 	addi	r5,r3,119
  804ab0:	2947883a 	add	r3,r5,r5
  804ab4:	003fa106 	br	80493c <__alt_data_end+0xff80493c>
  804ab8:	01015504 	movi	r4,1364
  804abc:	20c00436 	bltu	r4,r3,804ad0 <_free_r+0x2e4>
  804ac0:	1006d4ba 	srli	r3,r2,18
  804ac4:	19401f04 	addi	r5,r3,124
  804ac8:	2947883a 	add	r3,r5,r5
  804acc:	003f9b06 	br	80493c <__alt_data_end+0xff80493c>
  804ad0:	00c03f04 	movi	r3,252
  804ad4:	01401f84 	movi	r5,126
  804ad8:	003f9806 	br	80493c <__alt_data_end+0xff80493c>

00804adc <_fwalk>:
  804adc:	defff704 	addi	sp,sp,-36
  804ae0:	dd000415 	stw	r20,16(sp)
  804ae4:	dfc00815 	stw	ra,32(sp)
  804ae8:	ddc00715 	stw	r23,28(sp)
  804aec:	dd800615 	stw	r22,24(sp)
  804af0:	dd400515 	stw	r21,20(sp)
  804af4:	dcc00315 	stw	r19,12(sp)
  804af8:	dc800215 	stw	r18,8(sp)
  804afc:	dc400115 	stw	r17,4(sp)
  804b00:	dc000015 	stw	r16,0(sp)
  804b04:	2500b804 	addi	r20,r4,736
  804b08:	a0002326 	beq	r20,zero,804b98 <_fwalk+0xbc>
  804b0c:	282b883a 	mov	r21,r5
  804b10:	002f883a 	mov	r23,zero
  804b14:	05800044 	movi	r22,1
  804b18:	04ffffc4 	movi	r19,-1
  804b1c:	a4400117 	ldw	r17,4(r20)
  804b20:	a4800217 	ldw	r18,8(r20)
  804b24:	8c7fffc4 	addi	r17,r17,-1
  804b28:	88000d16 	blt	r17,zero,804b60 <_fwalk+0x84>
  804b2c:	94000304 	addi	r16,r18,12
  804b30:	94800384 	addi	r18,r18,14
  804b34:	80c0000b 	ldhu	r3,0(r16)
  804b38:	8c7fffc4 	addi	r17,r17,-1
  804b3c:	813ffd04 	addi	r4,r16,-12
  804b40:	b0c0042e 	bgeu	r22,r3,804b54 <_fwalk+0x78>
  804b44:	90c0000f 	ldh	r3,0(r18)
  804b48:	1cc00226 	beq	r3,r19,804b54 <_fwalk+0x78>
  804b4c:	a83ee83a 	callr	r21
  804b50:	b8aeb03a 	or	r23,r23,r2
  804b54:	84001a04 	addi	r16,r16,104
  804b58:	94801a04 	addi	r18,r18,104
  804b5c:	8cfff51e 	bne	r17,r19,804b34 <__alt_data_end+0xff804b34>
  804b60:	a5000017 	ldw	r20,0(r20)
  804b64:	a03fed1e 	bne	r20,zero,804b1c <__alt_data_end+0xff804b1c>
  804b68:	b805883a 	mov	r2,r23
  804b6c:	dfc00817 	ldw	ra,32(sp)
  804b70:	ddc00717 	ldw	r23,28(sp)
  804b74:	dd800617 	ldw	r22,24(sp)
  804b78:	dd400517 	ldw	r21,20(sp)
  804b7c:	dd000417 	ldw	r20,16(sp)
  804b80:	dcc00317 	ldw	r19,12(sp)
  804b84:	dc800217 	ldw	r18,8(sp)
  804b88:	dc400117 	ldw	r17,4(sp)
  804b8c:	dc000017 	ldw	r16,0(sp)
  804b90:	dec00904 	addi	sp,sp,36
  804b94:	f800283a 	ret
  804b98:	002f883a 	mov	r23,zero
  804b9c:	003ff206 	br	804b68 <__alt_data_end+0xff804b68>

00804ba0 <_fwalk_reent>:
  804ba0:	defff704 	addi	sp,sp,-36
  804ba4:	dd400515 	stw	r21,20(sp)
  804ba8:	dfc00815 	stw	ra,32(sp)
  804bac:	ddc00715 	stw	r23,28(sp)
  804bb0:	dd800615 	stw	r22,24(sp)
  804bb4:	dd000415 	stw	r20,16(sp)
  804bb8:	dcc00315 	stw	r19,12(sp)
  804bbc:	dc800215 	stw	r18,8(sp)
  804bc0:	dc400115 	stw	r17,4(sp)
  804bc4:	dc000015 	stw	r16,0(sp)
  804bc8:	2540b804 	addi	r21,r4,736
  804bcc:	a8002326 	beq	r21,zero,804c5c <_fwalk_reent+0xbc>
  804bd0:	2829883a 	mov	r20,r5
  804bd4:	202d883a 	mov	r22,r4
  804bd8:	002f883a 	mov	r23,zero
  804bdc:	04c00044 	movi	r19,1
  804be0:	04bfffc4 	movi	r18,-1
  804be4:	ac400117 	ldw	r17,4(r21)
  804be8:	ac000217 	ldw	r16,8(r21)
  804bec:	8c7fffc4 	addi	r17,r17,-1
  804bf0:	88000c16 	blt	r17,zero,804c24 <_fwalk_reent+0x84>
  804bf4:	84000304 	addi	r16,r16,12
  804bf8:	80c0000b 	ldhu	r3,0(r16)
  804bfc:	8c7fffc4 	addi	r17,r17,-1
  804c00:	817ffd04 	addi	r5,r16,-12
  804c04:	98c0052e 	bgeu	r19,r3,804c1c <_fwalk_reent+0x7c>
  804c08:	80c0008f 	ldh	r3,2(r16)
  804c0c:	b009883a 	mov	r4,r22
  804c10:	1c800226 	beq	r3,r18,804c1c <_fwalk_reent+0x7c>
  804c14:	a03ee83a 	callr	r20
  804c18:	b8aeb03a 	or	r23,r23,r2
  804c1c:	84001a04 	addi	r16,r16,104
  804c20:	8cbff51e 	bne	r17,r18,804bf8 <__alt_data_end+0xff804bf8>
  804c24:	ad400017 	ldw	r21,0(r21)
  804c28:	a83fee1e 	bne	r21,zero,804be4 <__alt_data_end+0xff804be4>
  804c2c:	b805883a 	mov	r2,r23
  804c30:	dfc00817 	ldw	ra,32(sp)
  804c34:	ddc00717 	ldw	r23,28(sp)
  804c38:	dd800617 	ldw	r22,24(sp)
  804c3c:	dd400517 	ldw	r21,20(sp)
  804c40:	dd000417 	ldw	r20,16(sp)
  804c44:	dcc00317 	ldw	r19,12(sp)
  804c48:	dc800217 	ldw	r18,8(sp)
  804c4c:	dc400117 	ldw	r17,4(sp)
  804c50:	dc000017 	ldw	r16,0(sp)
  804c54:	dec00904 	addi	sp,sp,36
  804c58:	f800283a 	ret
  804c5c:	002f883a 	mov	r23,zero
  804c60:	003ff206 	br	804c2c <__alt_data_end+0xff804c2c>

00804c64 <_setlocale_r>:
  804c64:	30001b26 	beq	r6,zero,804cd4 <_setlocale_r+0x70>
  804c68:	01402074 	movhi	r5,129
  804c6c:	defffe04 	addi	sp,sp,-8
  804c70:	29428c04 	addi	r5,r5,2608
  804c74:	3009883a 	mov	r4,r6
  804c78:	dc000015 	stw	r16,0(sp)
  804c7c:	dfc00115 	stw	ra,4(sp)
  804c80:	3021883a 	mov	r16,r6
  804c84:	0806b8c0 	call	806b8c <strcmp>
  804c88:	1000061e 	bne	r2,zero,804ca4 <_setlocale_r+0x40>
  804c8c:	00802074 	movhi	r2,129
  804c90:	10828b04 	addi	r2,r2,2604
  804c94:	dfc00117 	ldw	ra,4(sp)
  804c98:	dc000017 	ldw	r16,0(sp)
  804c9c:	dec00204 	addi	sp,sp,8
  804ca0:	f800283a 	ret
  804ca4:	01402074 	movhi	r5,129
  804ca8:	29428b04 	addi	r5,r5,2604
  804cac:	8009883a 	mov	r4,r16
  804cb0:	0806b8c0 	call	806b8c <strcmp>
  804cb4:	103ff526 	beq	r2,zero,804c8c <__alt_data_end+0xff804c8c>
  804cb8:	01402074 	movhi	r5,129
  804cbc:	29427604 	addi	r5,r5,2520
  804cc0:	8009883a 	mov	r4,r16
  804cc4:	0806b8c0 	call	806b8c <strcmp>
  804cc8:	103ff026 	beq	r2,zero,804c8c <__alt_data_end+0xff804c8c>
  804ccc:	0005883a 	mov	r2,zero
  804cd0:	003ff006 	br	804c94 <__alt_data_end+0xff804c94>
  804cd4:	00802074 	movhi	r2,129
  804cd8:	10828b04 	addi	r2,r2,2604
  804cdc:	f800283a 	ret

00804ce0 <__locale_charset>:
  804ce0:	00802074 	movhi	r2,129
  804ce4:	1084f004 	addi	r2,r2,5056
  804ce8:	f800283a 	ret

00804cec <__locale_mb_cur_max>:
  804cec:	00802074 	movhi	r2,129
  804cf0:	108b1d04 	addi	r2,r2,11380
  804cf4:	10800017 	ldw	r2,0(r2)
  804cf8:	f800283a 	ret

00804cfc <__locale_msgcharset>:
  804cfc:	00802074 	movhi	r2,129
  804d00:	1084e804 	addi	r2,r2,5024
  804d04:	f800283a 	ret

00804d08 <__locale_cjk_lang>:
  804d08:	0005883a 	mov	r2,zero
  804d0c:	f800283a 	ret

00804d10 <_localeconv_r>:
  804d10:	00802074 	movhi	r2,129
  804d14:	1084f804 	addi	r2,r2,5088
  804d18:	f800283a 	ret

00804d1c <setlocale>:
  804d1c:	00c02074 	movhi	r3,129
  804d20:	18cb1c04 	addi	r3,r3,11376
  804d24:	2005883a 	mov	r2,r4
  804d28:	19000017 	ldw	r4,0(r3)
  804d2c:	280d883a 	mov	r6,r5
  804d30:	100b883a 	mov	r5,r2
  804d34:	0804c641 	jmpi	804c64 <_setlocale_r>

00804d38 <localeconv>:
  804d38:	00802074 	movhi	r2,129
  804d3c:	1084f804 	addi	r2,r2,5088
  804d40:	f800283a 	ret

00804d44 <__smakebuf_r>:
  804d44:	2880030b 	ldhu	r2,12(r5)
  804d48:	10c0008c 	andi	r3,r2,2
  804d4c:	1800401e 	bne	r3,zero,804e50 <__smakebuf_r+0x10c>
  804d50:	deffec04 	addi	sp,sp,-80
  804d54:	dc000f15 	stw	r16,60(sp)
  804d58:	2821883a 	mov	r16,r5
  804d5c:	2940038f 	ldh	r5,14(r5)
  804d60:	dc401015 	stw	r17,64(sp)
  804d64:	dfc01315 	stw	ra,76(sp)
  804d68:	dcc01215 	stw	r19,72(sp)
  804d6c:	dc801115 	stw	r18,68(sp)
  804d70:	2023883a 	mov	r17,r4
  804d74:	28001b16 	blt	r5,zero,804de4 <__smakebuf_r+0xa0>
  804d78:	d80d883a 	mov	r6,sp
  804d7c:	08085e40 	call	8085e4 <_fstat_r>
  804d80:	10001716 	blt	r2,zero,804de0 <__smakebuf_r+0x9c>
  804d84:	d8800117 	ldw	r2,4(sp)
  804d88:	00e00014 	movui	r3,32768
  804d8c:	10bc000c 	andi	r2,r2,61440
  804d90:	10c03726 	beq	r2,r3,804e70 <__smakebuf_r+0x12c>
  804d94:	80c0030b 	ldhu	r3,12(r16)
  804d98:	18c20014 	ori	r3,r3,2048
  804d9c:	80c0030d 	sth	r3,12(r16)
  804da0:	00c80004 	movi	r3,8192
  804da4:	10c03c1e 	bne	r2,r3,804e98 <__smakebuf_r+0x154>
  804da8:	8140038f 	ldh	r5,14(r16)
  804dac:	8809883a 	mov	r4,r17
  804db0:	0808afc0 	call	808afc <_isatty_r>
  804db4:	10004e26 	beq	r2,zero,804ef0 <__smakebuf_r+0x1ac>
  804db8:	8080030b 	ldhu	r2,12(r16)
  804dbc:	04c00044 	movi	r19,1
  804dc0:	80c010c4 	addi	r3,r16,67
  804dc4:	14c4b03a 	or	r2,r2,r19
  804dc8:	8080030d 	sth	r2,12(r16)
  804dcc:	80c00015 	stw	r3,0(r16)
  804dd0:	80c00415 	stw	r3,16(r16)
  804dd4:	84c00515 	stw	r19,20(r16)
  804dd8:	04810004 	movi	r18,1024
  804ddc:	00000706 	br	804dfc <__smakebuf_r+0xb8>
  804de0:	8080030b 	ldhu	r2,12(r16)
  804de4:	10c0200c 	andi	r3,r2,128
  804de8:	18001f1e 	bne	r3,zero,804e68 <__smakebuf_r+0x124>
  804dec:	04810004 	movi	r18,1024
  804df0:	10820014 	ori	r2,r2,2048
  804df4:	8080030d 	sth	r2,12(r16)
  804df8:	0027883a 	mov	r19,zero
  804dfc:	8809883a 	mov	r4,r17
  804e00:	900b883a 	mov	r5,r18
  804e04:	0804efc0 	call	804efc <_malloc_r>
  804e08:	10002e26 	beq	r2,zero,804ec4 <__smakebuf_r+0x180>
  804e0c:	80c0030b 	ldhu	r3,12(r16)
  804e10:	01002034 	movhi	r4,128
  804e14:	2110ce04 	addi	r4,r4,17208
  804e18:	89000f15 	stw	r4,60(r17)
  804e1c:	18c02014 	ori	r3,r3,128
  804e20:	80c0030d 	sth	r3,12(r16)
  804e24:	80800015 	stw	r2,0(r16)
  804e28:	80800415 	stw	r2,16(r16)
  804e2c:	84800515 	stw	r18,20(r16)
  804e30:	98001c1e 	bne	r19,zero,804ea4 <__smakebuf_r+0x160>
  804e34:	dfc01317 	ldw	ra,76(sp)
  804e38:	dcc01217 	ldw	r19,72(sp)
  804e3c:	dc801117 	ldw	r18,68(sp)
  804e40:	dc401017 	ldw	r17,64(sp)
  804e44:	dc000f17 	ldw	r16,60(sp)
  804e48:	dec01404 	addi	sp,sp,80
  804e4c:	f800283a 	ret
  804e50:	288010c4 	addi	r2,r5,67
  804e54:	28800015 	stw	r2,0(r5)
  804e58:	28800415 	stw	r2,16(r5)
  804e5c:	00800044 	movi	r2,1
  804e60:	28800515 	stw	r2,20(r5)
  804e64:	f800283a 	ret
  804e68:	04801004 	movi	r18,64
  804e6c:	003fe006 	br	804df0 <__alt_data_end+0xff804df0>
  804e70:	81000a17 	ldw	r4,40(r16)
  804e74:	00c02034 	movhi	r3,128
  804e78:	18daca04 	addi	r3,r3,27432
  804e7c:	20ffc51e 	bne	r4,r3,804d94 <__alt_data_end+0xff804d94>
  804e80:	80c0030b 	ldhu	r3,12(r16)
  804e84:	01010004 	movi	r4,1024
  804e88:	81001315 	stw	r4,76(r16)
  804e8c:	1906b03a 	or	r3,r3,r4
  804e90:	80c0030d 	sth	r3,12(r16)
  804e94:	003fc206 	br	804da0 <__alt_data_end+0xff804da0>
  804e98:	0027883a 	mov	r19,zero
  804e9c:	04810004 	movi	r18,1024
  804ea0:	003fd606 	br	804dfc <__alt_data_end+0xff804dfc>
  804ea4:	8140038f 	ldh	r5,14(r16)
  804ea8:	8809883a 	mov	r4,r17
  804eac:	0808afc0 	call	808afc <_isatty_r>
  804eb0:	103fe026 	beq	r2,zero,804e34 <__alt_data_end+0xff804e34>
  804eb4:	8080030b 	ldhu	r2,12(r16)
  804eb8:	10800054 	ori	r2,r2,1
  804ebc:	8080030d 	sth	r2,12(r16)
  804ec0:	003fdc06 	br	804e34 <__alt_data_end+0xff804e34>
  804ec4:	8080030b 	ldhu	r2,12(r16)
  804ec8:	10c0800c 	andi	r3,r2,512
  804ecc:	183fd91e 	bne	r3,zero,804e34 <__alt_data_end+0xff804e34>
  804ed0:	10800094 	ori	r2,r2,2
  804ed4:	80c010c4 	addi	r3,r16,67
  804ed8:	8080030d 	sth	r2,12(r16)
  804edc:	00800044 	movi	r2,1
  804ee0:	80c00015 	stw	r3,0(r16)
  804ee4:	80c00415 	stw	r3,16(r16)
  804ee8:	80800515 	stw	r2,20(r16)
  804eec:	003fd106 	br	804e34 <__alt_data_end+0xff804e34>
  804ef0:	04c00044 	movi	r19,1
  804ef4:	04810004 	movi	r18,1024
  804ef8:	003fc006 	br	804dfc <__alt_data_end+0xff804dfc>

00804efc <_malloc_r>:
  804efc:	defff504 	addi	sp,sp,-44
  804f00:	dc800315 	stw	r18,12(sp)
  804f04:	dfc00a15 	stw	ra,40(sp)
  804f08:	df000915 	stw	fp,36(sp)
  804f0c:	ddc00815 	stw	r23,32(sp)
  804f10:	dd800715 	stw	r22,28(sp)
  804f14:	dd400615 	stw	r21,24(sp)
  804f18:	dd000515 	stw	r20,20(sp)
  804f1c:	dcc00415 	stw	r19,16(sp)
  804f20:	dc400215 	stw	r17,8(sp)
  804f24:	dc000115 	stw	r16,4(sp)
  804f28:	288002c4 	addi	r2,r5,11
  804f2c:	00c00584 	movi	r3,22
  804f30:	2025883a 	mov	r18,r4
  804f34:	18802a2e 	bgeu	r3,r2,804fe0 <_malloc_r+0xe4>
  804f38:	047ffe04 	movi	r17,-8
  804f3c:	1462703a 	and	r17,r2,r17
  804f40:	88009e16 	blt	r17,zero,8051bc <_malloc_r+0x2c0>
  804f44:	89409d36 	bltu	r17,r5,8051bc <_malloc_r+0x2c0>
  804f48:	080ce440 	call	80ce44 <__malloc_lock>
  804f4c:	00807dc4 	movi	r2,503
  804f50:	14402736 	bltu	r2,r17,804ff0 <_malloc_r+0xf4>
  804f54:	8806d0fa 	srli	r3,r17,3
  804f58:	04c02074 	movhi	r19,129
  804f5c:	9cc50604 	addi	r19,r19,5144
  804f60:	18c5883a 	add	r2,r3,r3
  804f64:	1085883a 	add	r2,r2,r2
  804f68:	1085883a 	add	r2,r2,r2
  804f6c:	9885883a 	add	r2,r19,r2
  804f70:	14000317 	ldw	r16,12(r2)
  804f74:	80814a26 	beq	r16,r2,8054a0 <_malloc_r+0x5a4>
  804f78:	80c00117 	ldw	r3,4(r16)
  804f7c:	81000317 	ldw	r4,12(r16)
  804f80:	00bfff04 	movi	r2,-4
  804f84:	1884703a 	and	r2,r3,r2
  804f88:	81400217 	ldw	r5,8(r16)
  804f8c:	8085883a 	add	r2,r16,r2
  804f90:	10c00117 	ldw	r3,4(r2)
  804f94:	29000315 	stw	r4,12(r5)
  804f98:	21400215 	stw	r5,8(r4)
  804f9c:	18c00054 	ori	r3,r3,1
  804fa0:	10c00115 	stw	r3,4(r2)
  804fa4:	9009883a 	mov	r4,r18
  804fa8:	080ce640 	call	80ce64 <__malloc_unlock>
  804fac:	80800204 	addi	r2,r16,8
  804fb0:	dfc00a17 	ldw	ra,40(sp)
  804fb4:	df000917 	ldw	fp,36(sp)
  804fb8:	ddc00817 	ldw	r23,32(sp)
  804fbc:	dd800717 	ldw	r22,28(sp)
  804fc0:	dd400617 	ldw	r21,24(sp)
  804fc4:	dd000517 	ldw	r20,20(sp)
  804fc8:	dcc00417 	ldw	r19,16(sp)
  804fcc:	dc800317 	ldw	r18,12(sp)
  804fd0:	dc400217 	ldw	r17,8(sp)
  804fd4:	dc000117 	ldw	r16,4(sp)
  804fd8:	dec00b04 	addi	sp,sp,44
  804fdc:	f800283a 	ret
  804fe0:	04400404 	movi	r17,16
  804fe4:	89407536 	bltu	r17,r5,8051bc <_malloc_r+0x2c0>
  804fe8:	080ce440 	call	80ce44 <__malloc_lock>
  804fec:	003fd906 	br	804f54 <__alt_data_end+0xff804f54>
  804ff0:	8806d27a 	srli	r3,r17,9
  804ff4:	18007526 	beq	r3,zero,8051cc <_malloc_r+0x2d0>
  804ff8:	00800104 	movi	r2,4
  804ffc:	10c0ef36 	bltu	r2,r3,8053bc <_malloc_r+0x4c0>
  805000:	8806d1ba 	srli	r3,r17,6
  805004:	19c00e04 	addi	r7,r3,56
  805008:	39cb883a 	add	r5,r7,r7
  80500c:	04c02074 	movhi	r19,129
  805010:	294b883a 	add	r5,r5,r5
  805014:	9cc50604 	addi	r19,r19,5144
  805018:	294b883a 	add	r5,r5,r5
  80501c:	994b883a 	add	r5,r19,r5
  805020:	2c000317 	ldw	r16,12(r5)
  805024:	2c000e26 	beq	r5,r16,805060 <_malloc_r+0x164>
  805028:	80800117 	ldw	r2,4(r16)
  80502c:	01bfff04 	movi	r6,-4
  805030:	010003c4 	movi	r4,15
  805034:	1184703a 	and	r2,r2,r6
  805038:	1447c83a 	sub	r3,r2,r17
  80503c:	20c00716 	blt	r4,r3,80505c <_malloc_r+0x160>
  805040:	1800650e 	bge	r3,zero,8051d8 <_malloc_r+0x2dc>
  805044:	84000317 	ldw	r16,12(r16)
  805048:	2c000526 	beq	r5,r16,805060 <_malloc_r+0x164>
  80504c:	80800117 	ldw	r2,4(r16)
  805050:	1184703a 	and	r2,r2,r6
  805054:	1447c83a 	sub	r3,r2,r17
  805058:	20fff90e 	bge	r4,r3,805040 <__alt_data_end+0xff805040>
  80505c:	39ffffc4 	addi	r7,r7,-1
  805060:	38c00044 	addi	r3,r7,1
  805064:	01802074 	movhi	r6,129
  805068:	9c000417 	ldw	r16,16(r19)
  80506c:	31850604 	addi	r6,r6,5144
  805070:	32400204 	addi	r9,r6,8
  805074:	82410326 	beq	r16,r9,805484 <_malloc_r+0x588>
  805078:	81000117 	ldw	r4,4(r16)
  80507c:	00bfff04 	movi	r2,-4
  805080:	208e703a 	and	r7,r4,r2
  805084:	3c45c83a 	sub	r2,r7,r17
  805088:	010003c4 	movi	r4,15
  80508c:	2080ee16 	blt	r4,r2,805448 <_malloc_r+0x54c>
  805090:	32400515 	stw	r9,20(r6)
  805094:	32400415 	stw	r9,16(r6)
  805098:	1000510e 	bge	r2,zero,8051e0 <_malloc_r+0x2e4>
  80509c:	00807fc4 	movi	r2,511
  8050a0:	11c0ce36 	bltu	r2,r7,8053dc <_malloc_r+0x4e0>
  8050a4:	3808d0fa 	srli	r4,r7,3
  8050a8:	01c00044 	movi	r7,1
  8050ac:	30800117 	ldw	r2,4(r6)
  8050b0:	210b883a 	add	r5,r4,r4
  8050b4:	294b883a 	add	r5,r5,r5
  8050b8:	2009d0ba 	srai	r4,r4,2
  8050bc:	294b883a 	add	r5,r5,r5
  8050c0:	298b883a 	add	r5,r5,r6
  8050c4:	2a000217 	ldw	r8,8(r5)
  8050c8:	3908983a 	sll	r4,r7,r4
  8050cc:	81400315 	stw	r5,12(r16)
  8050d0:	82000215 	stw	r8,8(r16)
  8050d4:	2088b03a 	or	r4,r4,r2
  8050d8:	2c000215 	stw	r16,8(r5)
  8050dc:	31000115 	stw	r4,4(r6)
  8050e0:	44000315 	stw	r16,12(r8)
  8050e4:	1805d0ba 	srai	r2,r3,2
  8050e8:	01400044 	movi	r5,1
  8050ec:	288a983a 	sll	r5,r5,r2
  8050f0:	21404336 	bltu	r4,r5,805200 <_malloc_r+0x304>
  8050f4:	2144703a 	and	r2,r4,r5
  8050f8:	10000a1e 	bne	r2,zero,805124 <_malloc_r+0x228>
  8050fc:	00bfff04 	movi	r2,-4
  805100:	294b883a 	add	r5,r5,r5
  805104:	1886703a 	and	r3,r3,r2
  805108:	2144703a 	and	r2,r4,r5
  80510c:	18c00104 	addi	r3,r3,4
  805110:	1000041e 	bne	r2,zero,805124 <_malloc_r+0x228>
  805114:	294b883a 	add	r5,r5,r5
  805118:	2144703a 	and	r2,r4,r5
  80511c:	18c00104 	addi	r3,r3,4
  805120:	103ffc26 	beq	r2,zero,805114 <__alt_data_end+0xff805114>
  805124:	023fff04 	movi	r8,-4
  805128:	01c003c4 	movi	r7,15
  80512c:	18c5883a 	add	r2,r3,r3
  805130:	1085883a 	add	r2,r2,r2
  805134:	1085883a 	add	r2,r2,r2
  805138:	9895883a 	add	r10,r19,r2
  80513c:	52c00304 	addi	r11,r10,12
  805140:	1819883a 	mov	r12,r3
  805144:	5c000017 	ldw	r16,0(r11)
  805148:	59bffd04 	addi	r6,r11,-12
  80514c:	8180041e 	bne	r16,r6,805160 <_malloc_r+0x264>
  805150:	0000ce06 	br	80548c <_malloc_r+0x590>
  805154:	2000d70e 	bge	r4,zero,8054b4 <_malloc_r+0x5b8>
  805158:	84000317 	ldw	r16,12(r16)
  80515c:	8180cb26 	beq	r16,r6,80548c <_malloc_r+0x590>
  805160:	80800117 	ldw	r2,4(r16)
  805164:	1204703a 	and	r2,r2,r8
  805168:	1449c83a 	sub	r4,r2,r17
  80516c:	393ff90e 	bge	r7,r4,805154 <__alt_data_end+0xff805154>
  805170:	80800317 	ldw	r2,12(r16)
  805174:	80c00217 	ldw	r3,8(r16)
  805178:	89400054 	ori	r5,r17,1
  80517c:	81400115 	stw	r5,4(r16)
  805180:	18800315 	stw	r2,12(r3)
  805184:	10c00215 	stw	r3,8(r2)
  805188:	8463883a 	add	r17,r16,r17
  80518c:	9c400515 	stw	r17,20(r19)
  805190:	9c400415 	stw	r17,16(r19)
  805194:	20800054 	ori	r2,r4,1
  805198:	88800115 	stw	r2,4(r17)
  80519c:	8a400315 	stw	r9,12(r17)
  8051a0:	8a400215 	stw	r9,8(r17)
  8051a4:	8923883a 	add	r17,r17,r4
  8051a8:	89000015 	stw	r4,0(r17)
  8051ac:	9009883a 	mov	r4,r18
  8051b0:	080ce640 	call	80ce64 <__malloc_unlock>
  8051b4:	80800204 	addi	r2,r16,8
  8051b8:	003f7d06 	br	804fb0 <__alt_data_end+0xff804fb0>
  8051bc:	00800304 	movi	r2,12
  8051c0:	90800015 	stw	r2,0(r18)
  8051c4:	0005883a 	mov	r2,zero
  8051c8:	003f7906 	br	804fb0 <__alt_data_end+0xff804fb0>
  8051cc:	01401f84 	movi	r5,126
  8051d0:	01c00fc4 	movi	r7,63
  8051d4:	003f8d06 	br	80500c <__alt_data_end+0xff80500c>
  8051d8:	81000317 	ldw	r4,12(r16)
  8051dc:	003f6a06 	br	804f88 <__alt_data_end+0xff804f88>
  8051e0:	81c5883a 	add	r2,r16,r7
  8051e4:	10c00117 	ldw	r3,4(r2)
  8051e8:	9009883a 	mov	r4,r18
  8051ec:	18c00054 	ori	r3,r3,1
  8051f0:	10c00115 	stw	r3,4(r2)
  8051f4:	080ce640 	call	80ce64 <__malloc_unlock>
  8051f8:	80800204 	addi	r2,r16,8
  8051fc:	003f6c06 	br	804fb0 <__alt_data_end+0xff804fb0>
  805200:	9c000217 	ldw	r16,8(r19)
  805204:	00bfff04 	movi	r2,-4
  805208:	85800117 	ldw	r22,4(r16)
  80520c:	b0ac703a 	and	r22,r22,r2
  805210:	b4400336 	bltu	r22,r17,805220 <_malloc_r+0x324>
  805214:	b445c83a 	sub	r2,r22,r17
  805218:	00c003c4 	movi	r3,15
  80521c:	18805d16 	blt	r3,r2,805394 <_malloc_r+0x498>
  805220:	05c02074 	movhi	r23,129
  805224:	00802074 	movhi	r2,129
  805228:	bdcb1e04 	addi	r23,r23,11384
  80522c:	10928104 	addi	r2,r2,18948
  805230:	15400017 	ldw	r21,0(r2)
  805234:	b9000017 	ldw	r4,0(r23)
  805238:	00ffffc4 	movi	r3,-1
  80523c:	858d883a 	add	r6,r16,r22
  805240:	8d6b883a 	add	r21,r17,r21
  805244:	20c0e426 	beq	r4,r3,8055d8 <_malloc_r+0x6dc>
  805248:	ad4403c4 	addi	r21,r21,4111
  80524c:	00fc0004 	movi	r3,-4096
  805250:	a8ea703a 	and	r21,r21,r3
  805254:	9009883a 	mov	r4,r18
  805258:	a80b883a 	mov	r5,r21
  80525c:	d9800015 	stw	r6,0(sp)
  805260:	08069fc0 	call	8069fc <_sbrk_r>
  805264:	00ffffc4 	movi	r3,-1
  805268:	1029883a 	mov	r20,r2
  80526c:	d9800017 	ldw	r6,0(sp)
  805270:	10c0a426 	beq	r2,r3,805504 <_malloc_r+0x608>
  805274:	1180a236 	bltu	r2,r6,805500 <_malloc_r+0x604>
  805278:	07002074 	movhi	fp,129
  80527c:	e7128a04 	addi	fp,fp,18984
  805280:	e0c00017 	ldw	r3,0(fp)
  805284:	a8c7883a 	add	r3,r21,r3
  805288:	e0c00015 	stw	r3,0(fp)
  80528c:	3500da26 	beq	r6,r20,8055f8 <_malloc_r+0x6fc>
  805290:	b9000017 	ldw	r4,0(r23)
  805294:	00bfffc4 	movi	r2,-1
  805298:	2080e426 	beq	r4,r2,80562c <_malloc_r+0x730>
  80529c:	a185c83a 	sub	r2,r20,r6
  8052a0:	1885883a 	add	r2,r3,r2
  8052a4:	e0800015 	stw	r2,0(fp)
  8052a8:	a0c001cc 	andi	r3,r20,7
  8052ac:	1800b526 	beq	r3,zero,805584 <_malloc_r+0x688>
  8052b0:	a0e9c83a 	sub	r20,r20,r3
  8052b4:	00840204 	movi	r2,4104
  8052b8:	a5000204 	addi	r20,r20,8
  8052bc:	10c7c83a 	sub	r3,r2,r3
  8052c0:	a545883a 	add	r2,r20,r21
  8052c4:	1083ffcc 	andi	r2,r2,4095
  8052c8:	18abc83a 	sub	r21,r3,r2
  8052cc:	9009883a 	mov	r4,r18
  8052d0:	a80b883a 	mov	r5,r21
  8052d4:	08069fc0 	call	8069fc <_sbrk_r>
  8052d8:	00ffffc4 	movi	r3,-1
  8052dc:	10c0d026 	beq	r2,r3,805620 <_malloc_r+0x724>
  8052e0:	1507c83a 	sub	r3,r2,r20
  8052e4:	a8c7883a 	add	r3,r21,r3
  8052e8:	18c00054 	ori	r3,r3,1
  8052ec:	e0800017 	ldw	r2,0(fp)
  8052f0:	9d000215 	stw	r20,8(r19)
  8052f4:	a0c00115 	stw	r3,4(r20)
  8052f8:	a887883a 	add	r3,r21,r2
  8052fc:	e0c00015 	stw	r3,0(fp)
  805300:	84c00e26 	beq	r16,r19,80533c <_malloc_r+0x440>
  805304:	018003c4 	movi	r6,15
  805308:	3580a02e 	bgeu	r6,r22,80558c <_malloc_r+0x690>
  80530c:	81400117 	ldw	r5,4(r16)
  805310:	013ffe04 	movi	r4,-8
  805314:	b0bffd04 	addi	r2,r22,-12
  805318:	1104703a 	and	r2,r2,r4
  80531c:	2900004c 	andi	r4,r5,1
  805320:	1108b03a 	or	r4,r2,r4
  805324:	81000115 	stw	r4,4(r16)
  805328:	01400144 	movi	r5,5
  80532c:	8089883a 	add	r4,r16,r2
  805330:	21400115 	stw	r5,4(r4)
  805334:	21400215 	stw	r5,8(r4)
  805338:	3080c036 	bltu	r6,r2,80563c <_malloc_r+0x740>
  80533c:	00802074 	movhi	r2,129
  805340:	10928004 	addi	r2,r2,18944
  805344:	11000017 	ldw	r4,0(r2)
  805348:	20c0012e 	bgeu	r4,r3,805350 <_malloc_r+0x454>
  80534c:	10c00015 	stw	r3,0(r2)
  805350:	00802074 	movhi	r2,129
  805354:	10927f04 	addi	r2,r2,18940
  805358:	11000017 	ldw	r4,0(r2)
  80535c:	9c000217 	ldw	r16,8(r19)
  805360:	20c0012e 	bgeu	r4,r3,805368 <_malloc_r+0x46c>
  805364:	10c00015 	stw	r3,0(r2)
  805368:	80c00117 	ldw	r3,4(r16)
  80536c:	00bfff04 	movi	r2,-4
  805370:	1886703a 	and	r3,r3,r2
  805374:	1c45c83a 	sub	r2,r3,r17
  805378:	1c400236 	bltu	r3,r17,805384 <_malloc_r+0x488>
  80537c:	00c003c4 	movi	r3,15
  805380:	18800416 	blt	r3,r2,805394 <_malloc_r+0x498>
  805384:	9009883a 	mov	r4,r18
  805388:	080ce640 	call	80ce64 <__malloc_unlock>
  80538c:	0005883a 	mov	r2,zero
  805390:	003f0706 	br	804fb0 <__alt_data_end+0xff804fb0>
  805394:	88c00054 	ori	r3,r17,1
  805398:	80c00115 	stw	r3,4(r16)
  80539c:	8463883a 	add	r17,r16,r17
  8053a0:	10800054 	ori	r2,r2,1
  8053a4:	9c400215 	stw	r17,8(r19)
  8053a8:	88800115 	stw	r2,4(r17)
  8053ac:	9009883a 	mov	r4,r18
  8053b0:	080ce640 	call	80ce64 <__malloc_unlock>
  8053b4:	80800204 	addi	r2,r16,8
  8053b8:	003efd06 	br	804fb0 <__alt_data_end+0xff804fb0>
  8053bc:	00800504 	movi	r2,20
  8053c0:	10c0482e 	bgeu	r2,r3,8054e4 <_malloc_r+0x5e8>
  8053c4:	00801504 	movi	r2,84
  8053c8:	10c06836 	bltu	r2,r3,80556c <_malloc_r+0x670>
  8053cc:	8806d33a 	srli	r3,r17,12
  8053d0:	19c01b84 	addi	r7,r3,110
  8053d4:	39cb883a 	add	r5,r7,r7
  8053d8:	003f0c06 	br	80500c <__alt_data_end+0xff80500c>
  8053dc:	3804d27a 	srli	r2,r7,9
  8053e0:	01000104 	movi	r4,4
  8053e4:	2080422e 	bgeu	r4,r2,8054f0 <_malloc_r+0x5f4>
  8053e8:	01000504 	movi	r4,20
  8053ec:	20807c36 	bltu	r4,r2,8055e0 <_malloc_r+0x6e4>
  8053f0:	110016c4 	addi	r4,r2,91
  8053f4:	210b883a 	add	r5,r4,r4
  8053f8:	294b883a 	add	r5,r5,r5
  8053fc:	294b883a 	add	r5,r5,r5
  805400:	994b883a 	add	r5,r19,r5
  805404:	28800217 	ldw	r2,8(r5)
  805408:	02002074 	movhi	r8,129
  80540c:	42050604 	addi	r8,r8,5144
  805410:	11406326 	beq	r2,r5,8055a0 <_malloc_r+0x6a4>
  805414:	01bfff04 	movi	r6,-4
  805418:	11000117 	ldw	r4,4(r2)
  80541c:	2188703a 	and	r4,r4,r6
  805420:	3900022e 	bgeu	r7,r4,80542c <_malloc_r+0x530>
  805424:	10800217 	ldw	r2,8(r2)
  805428:	28bffb1e 	bne	r5,r2,805418 <__alt_data_end+0xff805418>
  80542c:	11800317 	ldw	r6,12(r2)
  805430:	99000117 	ldw	r4,4(r19)
  805434:	81800315 	stw	r6,12(r16)
  805438:	80800215 	stw	r2,8(r16)
  80543c:	34000215 	stw	r16,8(r6)
  805440:	14000315 	stw	r16,12(r2)
  805444:	003f2706 	br	8050e4 <__alt_data_end+0xff8050e4>
  805448:	88c00054 	ori	r3,r17,1
  80544c:	80c00115 	stw	r3,4(r16)
  805450:	8463883a 	add	r17,r16,r17
  805454:	34400515 	stw	r17,20(r6)
  805458:	34400415 	stw	r17,16(r6)
  80545c:	10c00054 	ori	r3,r2,1
  805460:	8a400315 	stw	r9,12(r17)
  805464:	8a400215 	stw	r9,8(r17)
  805468:	88c00115 	stw	r3,4(r17)
  80546c:	88a3883a 	add	r17,r17,r2
  805470:	88800015 	stw	r2,0(r17)
  805474:	9009883a 	mov	r4,r18
  805478:	080ce640 	call	80ce64 <__malloc_unlock>
  80547c:	80800204 	addi	r2,r16,8
  805480:	003ecb06 	br	804fb0 <__alt_data_end+0xff804fb0>
  805484:	31000117 	ldw	r4,4(r6)
  805488:	003f1606 	br	8050e4 <__alt_data_end+0xff8050e4>
  80548c:	63000044 	addi	r12,r12,1
  805490:	608000cc 	andi	r2,r12,3
  805494:	5ac00204 	addi	r11,r11,8
  805498:	103f2a1e 	bne	r2,zero,805144 <__alt_data_end+0xff805144>
  80549c:	00002106 	br	805524 <_malloc_r+0x628>
  8054a0:	80800204 	addi	r2,r16,8
  8054a4:	84000517 	ldw	r16,20(r16)
  8054a8:	143eb31e 	bne	r2,r16,804f78 <__alt_data_end+0xff804f78>
  8054ac:	18c00084 	addi	r3,r3,2
  8054b0:	003eec06 	br	805064 <__alt_data_end+0xff805064>
  8054b4:	8085883a 	add	r2,r16,r2
  8054b8:	10c00117 	ldw	r3,4(r2)
  8054bc:	81000317 	ldw	r4,12(r16)
  8054c0:	81400217 	ldw	r5,8(r16)
  8054c4:	18c00054 	ori	r3,r3,1
  8054c8:	10c00115 	stw	r3,4(r2)
  8054cc:	29000315 	stw	r4,12(r5)
  8054d0:	21400215 	stw	r5,8(r4)
  8054d4:	9009883a 	mov	r4,r18
  8054d8:	080ce640 	call	80ce64 <__malloc_unlock>
  8054dc:	80800204 	addi	r2,r16,8
  8054e0:	003eb306 	br	804fb0 <__alt_data_end+0xff804fb0>
  8054e4:	19c016c4 	addi	r7,r3,91
  8054e8:	39cb883a 	add	r5,r7,r7
  8054ec:	003ec706 	br	80500c <__alt_data_end+0xff80500c>
  8054f0:	3804d1ba 	srli	r2,r7,6
  8054f4:	11000e04 	addi	r4,r2,56
  8054f8:	210b883a 	add	r5,r4,r4
  8054fc:	003fbe06 	br	8053f8 <__alt_data_end+0xff8053f8>
  805500:	84ff5d26 	beq	r16,r19,805278 <__alt_data_end+0xff805278>
  805504:	9c000217 	ldw	r16,8(r19)
  805508:	00bfff04 	movi	r2,-4
  80550c:	80c00117 	ldw	r3,4(r16)
  805510:	1886703a 	and	r3,r3,r2
  805514:	003f9706 	br	805374 <__alt_data_end+0xff805374>
  805518:	52800017 	ldw	r10,0(r10)
  80551c:	18ffffc4 	addi	r3,r3,-1
  805520:	50805c1e 	bne	r10,r2,805694 <_malloc_r+0x798>
  805524:	190000cc 	andi	r4,r3,3
  805528:	50bffe04 	addi	r2,r10,-8
  80552c:	203ffa1e 	bne	r4,zero,805518 <__alt_data_end+0xff805518>
  805530:	98800117 	ldw	r2,4(r19)
  805534:	0146303a 	nor	r3,zero,r5
  805538:	1884703a 	and	r2,r3,r2
  80553c:	98800115 	stw	r2,4(r19)
  805540:	294b883a 	add	r5,r5,r5
  805544:	117f2e36 	bltu	r2,r5,805200 <__alt_data_end+0xff805200>
  805548:	283f2d26 	beq	r5,zero,805200 <__alt_data_end+0xff805200>
  80554c:	1146703a 	and	r3,r2,r5
  805550:	1800521e 	bne	r3,zero,80569c <_malloc_r+0x7a0>
  805554:	6007883a 	mov	r3,r12
  805558:	294b883a 	add	r5,r5,r5
  80555c:	1148703a 	and	r4,r2,r5
  805560:	18c00104 	addi	r3,r3,4
  805564:	203ffc26 	beq	r4,zero,805558 <__alt_data_end+0xff805558>
  805568:	003ef006 	br	80512c <__alt_data_end+0xff80512c>
  80556c:	00805504 	movi	r2,340
  805570:	10c01336 	bltu	r2,r3,8055c0 <_malloc_r+0x6c4>
  805574:	8806d3fa 	srli	r3,r17,15
  805578:	19c01dc4 	addi	r7,r3,119
  80557c:	39cb883a 	add	r5,r7,r7
  805580:	003ea206 	br	80500c <__alt_data_end+0xff80500c>
  805584:	00c40004 	movi	r3,4096
  805588:	003f4d06 	br	8052c0 <__alt_data_end+0xff8052c0>
  80558c:	00800044 	movi	r2,1
  805590:	a0800115 	stw	r2,4(r20)
  805594:	a021883a 	mov	r16,r20
  805598:	0007883a 	mov	r3,zero
  80559c:	003f7506 	br	805374 <__alt_data_end+0xff805374>
  8055a0:	200bd0ba 	srai	r5,r4,2
  8055a4:	01800044 	movi	r6,1
  8055a8:	41000117 	ldw	r4,4(r8)
  8055ac:	314a983a 	sll	r5,r6,r5
  8055b0:	100d883a 	mov	r6,r2
  8055b4:	2908b03a 	or	r4,r5,r4
  8055b8:	41000115 	stw	r4,4(r8)
  8055bc:	003f9d06 	br	805434 <__alt_data_end+0xff805434>
  8055c0:	00815504 	movi	r2,1364
  8055c4:	10c01336 	bltu	r2,r3,805614 <_malloc_r+0x718>
  8055c8:	8806d4ba 	srli	r3,r17,18
  8055cc:	19c01f04 	addi	r7,r3,124
  8055d0:	39cb883a 	add	r5,r7,r7
  8055d4:	003e8d06 	br	80500c <__alt_data_end+0xff80500c>
  8055d8:	ad400404 	addi	r21,r21,16
  8055dc:	003f1d06 	br	805254 <__alt_data_end+0xff805254>
  8055e0:	01001504 	movi	r4,84
  8055e4:	20801c36 	bltu	r4,r2,805658 <_malloc_r+0x75c>
  8055e8:	3804d33a 	srli	r2,r7,12
  8055ec:	11001b84 	addi	r4,r2,110
  8055f0:	210b883a 	add	r5,r4,r4
  8055f4:	003f8006 	br	8053f8 <__alt_data_end+0xff8053f8>
  8055f8:	3083ffcc 	andi	r2,r6,4095
  8055fc:	103f241e 	bne	r2,zero,805290 <__alt_data_end+0xff805290>
  805600:	99000217 	ldw	r4,8(r19)
  805604:	ad85883a 	add	r2,r21,r22
  805608:	10800054 	ori	r2,r2,1
  80560c:	20800115 	stw	r2,4(r4)
  805610:	003f4a06 	br	80533c <__alt_data_end+0xff80533c>
  805614:	01403f04 	movi	r5,252
  805618:	01c01f84 	movi	r7,126
  80561c:	003e7b06 	br	80500c <__alt_data_end+0xff80500c>
  805620:	00c00044 	movi	r3,1
  805624:	002b883a 	mov	r21,zero
  805628:	003f3006 	br	8052ec <__alt_data_end+0xff8052ec>
  80562c:	00802074 	movhi	r2,129
  805630:	108b1e04 	addi	r2,r2,11384
  805634:	15000015 	stw	r20,0(r2)
  805638:	003f1b06 	br	8052a8 <__alt_data_end+0xff8052a8>
  80563c:	9009883a 	mov	r4,r18
  805640:	81400204 	addi	r5,r16,8
  805644:	08047ec0 	call	8047ec <_free_r>
  805648:	00802074 	movhi	r2,129
  80564c:	10928a04 	addi	r2,r2,18984
  805650:	10c00017 	ldw	r3,0(r2)
  805654:	003f3906 	br	80533c <__alt_data_end+0xff80533c>
  805658:	01005504 	movi	r4,340
  80565c:	20800436 	bltu	r4,r2,805670 <_malloc_r+0x774>
  805660:	3804d3fa 	srli	r2,r7,15
  805664:	11001dc4 	addi	r4,r2,119
  805668:	210b883a 	add	r5,r4,r4
  80566c:	003f6206 	br	8053f8 <__alt_data_end+0xff8053f8>
  805670:	01015504 	movi	r4,1364
  805674:	20800436 	bltu	r4,r2,805688 <_malloc_r+0x78c>
  805678:	3804d4ba 	srli	r2,r7,18
  80567c:	11001f04 	addi	r4,r2,124
  805680:	210b883a 	add	r5,r4,r4
  805684:	003f5c06 	br	8053f8 <__alt_data_end+0xff8053f8>
  805688:	01403f04 	movi	r5,252
  80568c:	01001f84 	movi	r4,126
  805690:	003f5906 	br	8053f8 <__alt_data_end+0xff8053f8>
  805694:	98800117 	ldw	r2,4(r19)
  805698:	003fa906 	br	805540 <__alt_data_end+0xff805540>
  80569c:	6007883a 	mov	r3,r12
  8056a0:	003ea206 	br	80512c <__alt_data_end+0xff80512c>

008056a4 <memchr>:
  8056a4:	208000cc 	andi	r2,r4,3
  8056a8:	280f883a 	mov	r7,r5
  8056ac:	10003526 	beq	r2,zero,805784 <memchr+0xe0>
  8056b0:	30bfffc4 	addi	r2,r6,-1
  8056b4:	30001b26 	beq	r6,zero,805724 <memchr+0x80>
  8056b8:	21800003 	ldbu	r6,0(r4)
  8056bc:	28c03fcc 	andi	r3,r5,255
  8056c0:	30c01a26 	beq	r6,r3,80572c <memchr+0x88>
  8056c4:	180d883a 	mov	r6,r3
  8056c8:	00000406 	br	8056dc <memchr+0x38>
  8056cc:	10001526 	beq	r2,zero,805724 <memchr+0x80>
  8056d0:	20c00003 	ldbu	r3,0(r4)
  8056d4:	10bfffc4 	addi	r2,r2,-1
  8056d8:	19801426 	beq	r3,r6,80572c <memchr+0x88>
  8056dc:	21000044 	addi	r4,r4,1
  8056e0:	20c000cc 	andi	r3,r4,3
  8056e4:	183ff91e 	bne	r3,zero,8056cc <__alt_data_end+0xff8056cc>
  8056e8:	024000c4 	movi	r9,3
  8056ec:	48801136 	bltu	r9,r2,805734 <memchr+0x90>
  8056f0:	10000c26 	beq	r2,zero,805724 <memchr+0x80>
  8056f4:	20c00003 	ldbu	r3,0(r4)
  8056f8:	29403fcc 	andi	r5,r5,255
  8056fc:	19400b26 	beq	r3,r5,80572c <memchr+0x88>
  805700:	20c00044 	addi	r3,r4,1
  805704:	2085883a 	add	r2,r4,r2
  805708:	39803fcc 	andi	r6,r7,255
  80570c:	00000306 	br	80571c <memchr+0x78>
  805710:	18c00044 	addi	r3,r3,1
  805714:	197fffc3 	ldbu	r5,-1(r3)
  805718:	29800426 	beq	r5,r6,80572c <memchr+0x88>
  80571c:	1809883a 	mov	r4,r3
  805720:	18bffb1e 	bne	r3,r2,805710 <__alt_data_end+0xff805710>
  805724:	0005883a 	mov	r2,zero
  805728:	f800283a 	ret
  80572c:	2005883a 	mov	r2,r4
  805730:	f800283a 	ret
  805734:	28c03fcc 	andi	r3,r5,255
  805738:	1810923a 	slli	r8,r3,8
  80573c:	02ffbff4 	movhi	r11,65279
  805740:	02a02074 	movhi	r10,32897
  805744:	40c6b03a 	or	r3,r8,r3
  805748:	1810943a 	slli	r8,r3,16
  80574c:	5affbfc4 	addi	r11,r11,-257
  805750:	52a02004 	addi	r10,r10,-32640
  805754:	40d0b03a 	or	r8,r8,r3
  805758:	20c00017 	ldw	r3,0(r4)
  80575c:	40c6f03a 	xor	r3,r8,r3
  805760:	1acd883a 	add	r6,r3,r11
  805764:	00c6303a 	nor	r3,zero,r3
  805768:	30c6703a 	and	r3,r6,r3
  80576c:	1a86703a 	and	r3,r3,r10
  805770:	183fdf1e 	bne	r3,zero,8056f0 <__alt_data_end+0xff8056f0>
  805774:	10bfff04 	addi	r2,r2,-4
  805778:	21000104 	addi	r4,r4,4
  80577c:	48bff636 	bltu	r9,r2,805758 <__alt_data_end+0xff805758>
  805780:	003fdb06 	br	8056f0 <__alt_data_end+0xff8056f0>
  805784:	3005883a 	mov	r2,r6
  805788:	003fd706 	br	8056e8 <__alt_data_end+0xff8056e8>

0080578c <memcpy>:
  80578c:	deffff04 	addi	sp,sp,-4
  805790:	dc000015 	stw	r16,0(sp)
  805794:	00c003c4 	movi	r3,15
  805798:	2005883a 	mov	r2,r4
  80579c:	1980432e 	bgeu	r3,r6,8058ac <memcpy+0x120>
  8057a0:	2146b03a 	or	r3,r4,r5
  8057a4:	18c000cc 	andi	r3,r3,3
  8057a8:	1800421e 	bne	r3,zero,8058b4 <memcpy+0x128>
  8057ac:	343ffc04 	addi	r16,r6,-16
  8057b0:	8020d13a 	srli	r16,r16,4
  8057b4:	28c00104 	addi	r3,r5,4
  8057b8:	23400104 	addi	r13,r4,4
  8057bc:	801e913a 	slli	r15,r16,4
  8057c0:	2b000204 	addi	r12,r5,8
  8057c4:	22c00204 	addi	r11,r4,8
  8057c8:	7bc00504 	addi	r15,r15,20
  8057cc:	2a800304 	addi	r10,r5,12
  8057d0:	22400304 	addi	r9,r4,12
  8057d4:	2bdf883a 	add	r15,r5,r15
  8057d8:	2811883a 	mov	r8,r5
  8057dc:	200f883a 	mov	r7,r4
  8057e0:	41000017 	ldw	r4,0(r8)
  8057e4:	39c00404 	addi	r7,r7,16
  8057e8:	18c00404 	addi	r3,r3,16
  8057ec:	393ffc15 	stw	r4,-16(r7)
  8057f0:	1bbffc17 	ldw	r14,-16(r3)
  8057f4:	6b400404 	addi	r13,r13,16
  8057f8:	5ac00404 	addi	r11,r11,16
  8057fc:	6bbffc15 	stw	r14,-16(r13)
  805800:	63800017 	ldw	r14,0(r12)
  805804:	4a400404 	addi	r9,r9,16
  805808:	42000404 	addi	r8,r8,16
  80580c:	5bbffc15 	stw	r14,-16(r11)
  805810:	53800017 	ldw	r14,0(r10)
  805814:	63000404 	addi	r12,r12,16
  805818:	52800404 	addi	r10,r10,16
  80581c:	4bbffc15 	stw	r14,-16(r9)
  805820:	1bffef1e 	bne	r3,r15,8057e0 <__alt_data_end+0xff8057e0>
  805824:	81c00044 	addi	r7,r16,1
  805828:	380e913a 	slli	r7,r7,4
  80582c:	310003cc 	andi	r4,r6,15
  805830:	02c000c4 	movi	r11,3
  805834:	11c7883a 	add	r3,r2,r7
  805838:	29cb883a 	add	r5,r5,r7
  80583c:	59001f2e 	bgeu	r11,r4,8058bc <memcpy+0x130>
  805840:	1813883a 	mov	r9,r3
  805844:	2811883a 	mov	r8,r5
  805848:	200f883a 	mov	r7,r4
  80584c:	42800017 	ldw	r10,0(r8)
  805850:	4a400104 	addi	r9,r9,4
  805854:	39ffff04 	addi	r7,r7,-4
  805858:	4abfff15 	stw	r10,-4(r9)
  80585c:	42000104 	addi	r8,r8,4
  805860:	59fffa36 	bltu	r11,r7,80584c <__alt_data_end+0xff80584c>
  805864:	213fff04 	addi	r4,r4,-4
  805868:	2008d0ba 	srli	r4,r4,2
  80586c:	318000cc 	andi	r6,r6,3
  805870:	21000044 	addi	r4,r4,1
  805874:	2109883a 	add	r4,r4,r4
  805878:	2109883a 	add	r4,r4,r4
  80587c:	1907883a 	add	r3,r3,r4
  805880:	290b883a 	add	r5,r5,r4
  805884:	30000626 	beq	r6,zero,8058a0 <memcpy+0x114>
  805888:	198d883a 	add	r6,r3,r6
  80588c:	29c00003 	ldbu	r7,0(r5)
  805890:	18c00044 	addi	r3,r3,1
  805894:	29400044 	addi	r5,r5,1
  805898:	19ffffc5 	stb	r7,-1(r3)
  80589c:	19bffb1e 	bne	r3,r6,80588c <__alt_data_end+0xff80588c>
  8058a0:	dc000017 	ldw	r16,0(sp)
  8058a4:	dec00104 	addi	sp,sp,4
  8058a8:	f800283a 	ret
  8058ac:	2007883a 	mov	r3,r4
  8058b0:	003ff406 	br	805884 <__alt_data_end+0xff805884>
  8058b4:	2007883a 	mov	r3,r4
  8058b8:	003ff306 	br	805888 <__alt_data_end+0xff805888>
  8058bc:	200d883a 	mov	r6,r4
  8058c0:	003ff006 	br	805884 <__alt_data_end+0xff805884>

008058c4 <memset>:
  8058c4:	20c000cc 	andi	r3,r4,3
  8058c8:	2005883a 	mov	r2,r4
  8058cc:	18004326 	beq	r3,zero,8059dc <memset+0x118>
  8058d0:	31ffffc4 	addi	r7,r6,-1
  8058d4:	30004026 	beq	r6,zero,8059d8 <memset+0x114>
  8058d8:	2813883a 	mov	r9,r5
  8058dc:	200d883a 	mov	r6,r4
  8058e0:	2007883a 	mov	r3,r4
  8058e4:	00000406 	br	8058f8 <memset+0x34>
  8058e8:	3a3fffc4 	addi	r8,r7,-1
  8058ec:	31800044 	addi	r6,r6,1
  8058f0:	38003926 	beq	r7,zero,8059d8 <memset+0x114>
  8058f4:	400f883a 	mov	r7,r8
  8058f8:	18c00044 	addi	r3,r3,1
  8058fc:	32400005 	stb	r9,0(r6)
  805900:	1a0000cc 	andi	r8,r3,3
  805904:	403ff81e 	bne	r8,zero,8058e8 <__alt_data_end+0xff8058e8>
  805908:	010000c4 	movi	r4,3
  80590c:	21c02d2e 	bgeu	r4,r7,8059c4 <memset+0x100>
  805910:	29803fcc 	andi	r6,r5,255
  805914:	3008923a 	slli	r4,r6,8
  805918:	218cb03a 	or	r6,r4,r6
  80591c:	3008943a 	slli	r4,r6,16
  805920:	218cb03a 	or	r6,r4,r6
  805924:	010003c4 	movi	r4,15
  805928:	21c0182e 	bgeu	r4,r7,80598c <memset+0xc8>
  80592c:	3b3ffc04 	addi	r12,r7,-16
  805930:	6018d13a 	srli	r12,r12,4
  805934:	1a000104 	addi	r8,r3,4
  805938:	1ac00204 	addi	r11,r3,8
  80593c:	6008913a 	slli	r4,r12,4
  805940:	1a800304 	addi	r10,r3,12
  805944:	1813883a 	mov	r9,r3
  805948:	21000504 	addi	r4,r4,20
  80594c:	1909883a 	add	r4,r3,r4
  805950:	49800015 	stw	r6,0(r9)
  805954:	41800015 	stw	r6,0(r8)
  805958:	59800015 	stw	r6,0(r11)
  80595c:	51800015 	stw	r6,0(r10)
  805960:	42000404 	addi	r8,r8,16
  805964:	4a400404 	addi	r9,r9,16
  805968:	5ac00404 	addi	r11,r11,16
  80596c:	52800404 	addi	r10,r10,16
  805970:	413ff71e 	bne	r8,r4,805950 <__alt_data_end+0xff805950>
  805974:	63000044 	addi	r12,r12,1
  805978:	6018913a 	slli	r12,r12,4
  80597c:	39c003cc 	andi	r7,r7,15
  805980:	010000c4 	movi	r4,3
  805984:	1b07883a 	add	r3,r3,r12
  805988:	21c00e2e 	bgeu	r4,r7,8059c4 <memset+0x100>
  80598c:	1813883a 	mov	r9,r3
  805990:	3811883a 	mov	r8,r7
  805994:	010000c4 	movi	r4,3
  805998:	49800015 	stw	r6,0(r9)
  80599c:	423fff04 	addi	r8,r8,-4
  8059a0:	4a400104 	addi	r9,r9,4
  8059a4:	223ffc36 	bltu	r4,r8,805998 <__alt_data_end+0xff805998>
  8059a8:	393fff04 	addi	r4,r7,-4
  8059ac:	2008d0ba 	srli	r4,r4,2
  8059b0:	39c000cc 	andi	r7,r7,3
  8059b4:	21000044 	addi	r4,r4,1
  8059b8:	2109883a 	add	r4,r4,r4
  8059bc:	2109883a 	add	r4,r4,r4
  8059c0:	1907883a 	add	r3,r3,r4
  8059c4:	38000426 	beq	r7,zero,8059d8 <memset+0x114>
  8059c8:	19cf883a 	add	r7,r3,r7
  8059cc:	19400005 	stb	r5,0(r3)
  8059d0:	18c00044 	addi	r3,r3,1
  8059d4:	19fffd1e 	bne	r3,r7,8059cc <__alt_data_end+0xff8059cc>
  8059d8:	f800283a 	ret
  8059dc:	2007883a 	mov	r3,r4
  8059e0:	300f883a 	mov	r7,r6
  8059e4:	003fc806 	br	805908 <__alt_data_end+0xff805908>

008059e8 <_Balloc>:
  8059e8:	20801317 	ldw	r2,76(r4)
  8059ec:	defffc04 	addi	sp,sp,-16
  8059f0:	dc400115 	stw	r17,4(sp)
  8059f4:	dc000015 	stw	r16,0(sp)
  8059f8:	dfc00315 	stw	ra,12(sp)
  8059fc:	dc800215 	stw	r18,8(sp)
  805a00:	2023883a 	mov	r17,r4
  805a04:	2821883a 	mov	r16,r5
  805a08:	10000f26 	beq	r2,zero,805a48 <_Balloc+0x60>
  805a0c:	8407883a 	add	r3,r16,r16
  805a10:	18c7883a 	add	r3,r3,r3
  805a14:	10c7883a 	add	r3,r2,r3
  805a18:	18800017 	ldw	r2,0(r3)
  805a1c:	10001126 	beq	r2,zero,805a64 <_Balloc+0x7c>
  805a20:	11000017 	ldw	r4,0(r2)
  805a24:	19000015 	stw	r4,0(r3)
  805a28:	10000415 	stw	zero,16(r2)
  805a2c:	10000315 	stw	zero,12(r2)
  805a30:	dfc00317 	ldw	ra,12(sp)
  805a34:	dc800217 	ldw	r18,8(sp)
  805a38:	dc400117 	ldw	r17,4(sp)
  805a3c:	dc000017 	ldw	r16,0(sp)
  805a40:	dec00404 	addi	sp,sp,16
  805a44:	f800283a 	ret
  805a48:	01400104 	movi	r5,4
  805a4c:	01800844 	movi	r6,33
  805a50:	080823c0 	call	80823c <_calloc_r>
  805a54:	88801315 	stw	r2,76(r17)
  805a58:	103fec1e 	bne	r2,zero,805a0c <__alt_data_end+0xff805a0c>
  805a5c:	0005883a 	mov	r2,zero
  805a60:	003ff306 	br	805a30 <__alt_data_end+0xff805a30>
  805a64:	01400044 	movi	r5,1
  805a68:	2c24983a 	sll	r18,r5,r16
  805a6c:	8809883a 	mov	r4,r17
  805a70:	91800144 	addi	r6,r18,5
  805a74:	318d883a 	add	r6,r6,r6
  805a78:	318d883a 	add	r6,r6,r6
  805a7c:	080823c0 	call	80823c <_calloc_r>
  805a80:	103ff626 	beq	r2,zero,805a5c <__alt_data_end+0xff805a5c>
  805a84:	14000115 	stw	r16,4(r2)
  805a88:	14800215 	stw	r18,8(r2)
  805a8c:	003fe606 	br	805a28 <__alt_data_end+0xff805a28>

00805a90 <_Bfree>:
  805a90:	28000826 	beq	r5,zero,805ab4 <_Bfree+0x24>
  805a94:	28c00117 	ldw	r3,4(r5)
  805a98:	20801317 	ldw	r2,76(r4)
  805a9c:	18c7883a 	add	r3,r3,r3
  805aa0:	18c7883a 	add	r3,r3,r3
  805aa4:	10c5883a 	add	r2,r2,r3
  805aa8:	10c00017 	ldw	r3,0(r2)
  805aac:	28c00015 	stw	r3,0(r5)
  805ab0:	11400015 	stw	r5,0(r2)
  805ab4:	f800283a 	ret

00805ab8 <__multadd>:
  805ab8:	defffa04 	addi	sp,sp,-24
  805abc:	dc000115 	stw	r16,4(sp)
  805ac0:	2c000417 	ldw	r16,16(r5)
  805ac4:	dc800315 	stw	r18,12(sp)
  805ac8:	dc400215 	stw	r17,8(sp)
  805acc:	dfc00515 	stw	ra,20(sp)
  805ad0:	dcc00415 	stw	r19,16(sp)
  805ad4:	2823883a 	mov	r17,r5
  805ad8:	2025883a 	mov	r18,r4
  805adc:	2a400504 	addi	r9,r5,20
  805ae0:	0015883a 	mov	r10,zero
  805ae4:	4a000017 	ldw	r8,0(r9)
  805ae8:	4a400104 	addi	r9,r9,4
  805aec:	52800044 	addi	r10,r10,1
  805af0:	40ffffcc 	andi	r3,r8,65535
  805af4:	1987383a 	mul	r3,r3,r6
  805af8:	4010d43a 	srli	r8,r8,16
  805afc:	19cf883a 	add	r7,r3,r7
  805b00:	4191383a 	mul	r8,r8,r6
  805b04:	3816d43a 	srli	r11,r7,16
  805b08:	38ffffcc 	andi	r3,r7,65535
  805b0c:	5a0f883a 	add	r7,r11,r8
  805b10:	3810943a 	slli	r8,r7,16
  805b14:	380ed43a 	srli	r7,r7,16
  805b18:	40c7883a 	add	r3,r8,r3
  805b1c:	48ffff15 	stw	r3,-4(r9)
  805b20:	543ff016 	blt	r10,r16,805ae4 <__alt_data_end+0xff805ae4>
  805b24:	38000926 	beq	r7,zero,805b4c <__multadd+0x94>
  805b28:	88800217 	ldw	r2,8(r17)
  805b2c:	80800f0e 	bge	r16,r2,805b6c <__multadd+0xb4>
  805b30:	80800144 	addi	r2,r16,5
  805b34:	1085883a 	add	r2,r2,r2
  805b38:	1085883a 	add	r2,r2,r2
  805b3c:	8885883a 	add	r2,r17,r2
  805b40:	11c00015 	stw	r7,0(r2)
  805b44:	84000044 	addi	r16,r16,1
  805b48:	8c000415 	stw	r16,16(r17)
  805b4c:	8805883a 	mov	r2,r17
  805b50:	dfc00517 	ldw	ra,20(sp)
  805b54:	dcc00417 	ldw	r19,16(sp)
  805b58:	dc800317 	ldw	r18,12(sp)
  805b5c:	dc400217 	ldw	r17,8(sp)
  805b60:	dc000117 	ldw	r16,4(sp)
  805b64:	dec00604 	addi	sp,sp,24
  805b68:	f800283a 	ret
  805b6c:	89400117 	ldw	r5,4(r17)
  805b70:	9009883a 	mov	r4,r18
  805b74:	d9c00015 	stw	r7,0(sp)
  805b78:	29400044 	addi	r5,r5,1
  805b7c:	08059e80 	call	8059e8 <_Balloc>
  805b80:	89800417 	ldw	r6,16(r17)
  805b84:	11000304 	addi	r4,r2,12
  805b88:	89400304 	addi	r5,r17,12
  805b8c:	31800084 	addi	r6,r6,2
  805b90:	318d883a 	add	r6,r6,r6
  805b94:	318d883a 	add	r6,r6,r6
  805b98:	1027883a 	mov	r19,r2
  805b9c:	080578c0 	call	80578c <memcpy>
  805ba0:	d9c00017 	ldw	r7,0(sp)
  805ba4:	88000a26 	beq	r17,zero,805bd0 <__multadd+0x118>
  805ba8:	89000117 	ldw	r4,4(r17)
  805bac:	90c01317 	ldw	r3,76(r18)
  805bb0:	2109883a 	add	r4,r4,r4
  805bb4:	2109883a 	add	r4,r4,r4
  805bb8:	1907883a 	add	r3,r3,r4
  805bbc:	18800017 	ldw	r2,0(r3)
  805bc0:	88800015 	stw	r2,0(r17)
  805bc4:	1c400015 	stw	r17,0(r3)
  805bc8:	9823883a 	mov	r17,r19
  805bcc:	003fd806 	br	805b30 <__alt_data_end+0xff805b30>
  805bd0:	9823883a 	mov	r17,r19
  805bd4:	003fd606 	br	805b30 <__alt_data_end+0xff805b30>

00805bd8 <__s2b>:
  805bd8:	defff904 	addi	sp,sp,-28
  805bdc:	dc400115 	stw	r17,4(sp)
  805be0:	dc000015 	stw	r16,0(sp)
  805be4:	2023883a 	mov	r17,r4
  805be8:	2821883a 	mov	r16,r5
  805bec:	39000204 	addi	r4,r7,8
  805bf0:	01400244 	movi	r5,9
  805bf4:	dcc00315 	stw	r19,12(sp)
  805bf8:	dc800215 	stw	r18,8(sp)
  805bfc:	dfc00615 	stw	ra,24(sp)
  805c00:	dd400515 	stw	r21,20(sp)
  805c04:	dd000415 	stw	r20,16(sp)
  805c08:	3825883a 	mov	r18,r7
  805c0c:	3027883a 	mov	r19,r6
  805c10:	080a1c40 	call	80a1c4 <__divsi3>
  805c14:	00c00044 	movi	r3,1
  805c18:	000b883a 	mov	r5,zero
  805c1c:	1880030e 	bge	r3,r2,805c2c <__s2b+0x54>
  805c20:	18c7883a 	add	r3,r3,r3
  805c24:	29400044 	addi	r5,r5,1
  805c28:	18bffd16 	blt	r3,r2,805c20 <__alt_data_end+0xff805c20>
  805c2c:	8809883a 	mov	r4,r17
  805c30:	08059e80 	call	8059e8 <_Balloc>
  805c34:	d8c00717 	ldw	r3,28(sp)
  805c38:	10c00515 	stw	r3,20(r2)
  805c3c:	00c00044 	movi	r3,1
  805c40:	10c00415 	stw	r3,16(r2)
  805c44:	00c00244 	movi	r3,9
  805c48:	1cc0210e 	bge	r3,r19,805cd0 <__s2b+0xf8>
  805c4c:	80eb883a 	add	r21,r16,r3
  805c50:	a829883a 	mov	r20,r21
  805c54:	84e1883a 	add	r16,r16,r19
  805c58:	a1c00007 	ldb	r7,0(r20)
  805c5c:	8809883a 	mov	r4,r17
  805c60:	a5000044 	addi	r20,r20,1
  805c64:	100b883a 	mov	r5,r2
  805c68:	01800284 	movi	r6,10
  805c6c:	39fff404 	addi	r7,r7,-48
  805c70:	0805ab80 	call	805ab8 <__multadd>
  805c74:	a43ff81e 	bne	r20,r16,805c58 <__alt_data_end+0xff805c58>
  805c78:	ace1883a 	add	r16,r21,r19
  805c7c:	843ffe04 	addi	r16,r16,-8
  805c80:	9c800a0e 	bge	r19,r18,805cac <__s2b+0xd4>
  805c84:	94e5c83a 	sub	r18,r18,r19
  805c88:	84a5883a 	add	r18,r16,r18
  805c8c:	81c00007 	ldb	r7,0(r16)
  805c90:	8809883a 	mov	r4,r17
  805c94:	84000044 	addi	r16,r16,1
  805c98:	100b883a 	mov	r5,r2
  805c9c:	01800284 	movi	r6,10
  805ca0:	39fff404 	addi	r7,r7,-48
  805ca4:	0805ab80 	call	805ab8 <__multadd>
  805ca8:	84bff81e 	bne	r16,r18,805c8c <__alt_data_end+0xff805c8c>
  805cac:	dfc00617 	ldw	ra,24(sp)
  805cb0:	dd400517 	ldw	r21,20(sp)
  805cb4:	dd000417 	ldw	r20,16(sp)
  805cb8:	dcc00317 	ldw	r19,12(sp)
  805cbc:	dc800217 	ldw	r18,8(sp)
  805cc0:	dc400117 	ldw	r17,4(sp)
  805cc4:	dc000017 	ldw	r16,0(sp)
  805cc8:	dec00704 	addi	sp,sp,28
  805ccc:	f800283a 	ret
  805cd0:	84000284 	addi	r16,r16,10
  805cd4:	1827883a 	mov	r19,r3
  805cd8:	003fe906 	br	805c80 <__alt_data_end+0xff805c80>

00805cdc <__hi0bits>:
  805cdc:	20bfffec 	andhi	r2,r4,65535
  805ce0:	1000141e 	bne	r2,zero,805d34 <__hi0bits+0x58>
  805ce4:	2008943a 	slli	r4,r4,16
  805ce8:	00800404 	movi	r2,16
  805cec:	20ffc02c 	andhi	r3,r4,65280
  805cf0:	1800021e 	bne	r3,zero,805cfc <__hi0bits+0x20>
  805cf4:	2008923a 	slli	r4,r4,8
  805cf8:	10800204 	addi	r2,r2,8
  805cfc:	20fc002c 	andhi	r3,r4,61440
  805d00:	1800021e 	bne	r3,zero,805d0c <__hi0bits+0x30>
  805d04:	2008913a 	slli	r4,r4,4
  805d08:	10800104 	addi	r2,r2,4
  805d0c:	20f0002c 	andhi	r3,r4,49152
  805d10:	1800031e 	bne	r3,zero,805d20 <__hi0bits+0x44>
  805d14:	2109883a 	add	r4,r4,r4
  805d18:	10800084 	addi	r2,r2,2
  805d1c:	2109883a 	add	r4,r4,r4
  805d20:	20000316 	blt	r4,zero,805d30 <__hi0bits+0x54>
  805d24:	2110002c 	andhi	r4,r4,16384
  805d28:	2000041e 	bne	r4,zero,805d3c <__hi0bits+0x60>
  805d2c:	00800804 	movi	r2,32
  805d30:	f800283a 	ret
  805d34:	0005883a 	mov	r2,zero
  805d38:	003fec06 	br	805cec <__alt_data_end+0xff805cec>
  805d3c:	10800044 	addi	r2,r2,1
  805d40:	f800283a 	ret

00805d44 <__lo0bits>:
  805d44:	20c00017 	ldw	r3,0(r4)
  805d48:	188001cc 	andi	r2,r3,7
  805d4c:	10000826 	beq	r2,zero,805d70 <__lo0bits+0x2c>
  805d50:	1880004c 	andi	r2,r3,1
  805d54:	1000211e 	bne	r2,zero,805ddc <__lo0bits+0x98>
  805d58:	1880008c 	andi	r2,r3,2
  805d5c:	1000211e 	bne	r2,zero,805de4 <__lo0bits+0xa0>
  805d60:	1806d0ba 	srli	r3,r3,2
  805d64:	00800084 	movi	r2,2
  805d68:	20c00015 	stw	r3,0(r4)
  805d6c:	f800283a 	ret
  805d70:	18bfffcc 	andi	r2,r3,65535
  805d74:	10001326 	beq	r2,zero,805dc4 <__lo0bits+0x80>
  805d78:	0005883a 	mov	r2,zero
  805d7c:	19403fcc 	andi	r5,r3,255
  805d80:	2800021e 	bne	r5,zero,805d8c <__lo0bits+0x48>
  805d84:	1806d23a 	srli	r3,r3,8
  805d88:	10800204 	addi	r2,r2,8
  805d8c:	194003cc 	andi	r5,r3,15
  805d90:	2800021e 	bne	r5,zero,805d9c <__lo0bits+0x58>
  805d94:	1806d13a 	srli	r3,r3,4
  805d98:	10800104 	addi	r2,r2,4
  805d9c:	194000cc 	andi	r5,r3,3
  805da0:	2800021e 	bne	r5,zero,805dac <__lo0bits+0x68>
  805da4:	1806d0ba 	srli	r3,r3,2
  805da8:	10800084 	addi	r2,r2,2
  805dac:	1940004c 	andi	r5,r3,1
  805db0:	2800081e 	bne	r5,zero,805dd4 <__lo0bits+0x90>
  805db4:	1806d07a 	srli	r3,r3,1
  805db8:	1800051e 	bne	r3,zero,805dd0 <__lo0bits+0x8c>
  805dbc:	00800804 	movi	r2,32
  805dc0:	f800283a 	ret
  805dc4:	1806d43a 	srli	r3,r3,16
  805dc8:	00800404 	movi	r2,16
  805dcc:	003feb06 	br	805d7c <__alt_data_end+0xff805d7c>
  805dd0:	10800044 	addi	r2,r2,1
  805dd4:	20c00015 	stw	r3,0(r4)
  805dd8:	f800283a 	ret
  805ddc:	0005883a 	mov	r2,zero
  805de0:	f800283a 	ret
  805de4:	1806d07a 	srli	r3,r3,1
  805de8:	00800044 	movi	r2,1
  805dec:	20c00015 	stw	r3,0(r4)
  805df0:	f800283a 	ret

00805df4 <__i2b>:
  805df4:	defffd04 	addi	sp,sp,-12
  805df8:	dc000015 	stw	r16,0(sp)
  805dfc:	04000044 	movi	r16,1
  805e00:	dc400115 	stw	r17,4(sp)
  805e04:	2823883a 	mov	r17,r5
  805e08:	800b883a 	mov	r5,r16
  805e0c:	dfc00215 	stw	ra,8(sp)
  805e10:	08059e80 	call	8059e8 <_Balloc>
  805e14:	14400515 	stw	r17,20(r2)
  805e18:	14000415 	stw	r16,16(r2)
  805e1c:	dfc00217 	ldw	ra,8(sp)
  805e20:	dc400117 	ldw	r17,4(sp)
  805e24:	dc000017 	ldw	r16,0(sp)
  805e28:	dec00304 	addi	sp,sp,12
  805e2c:	f800283a 	ret

00805e30 <__multiply>:
  805e30:	defffa04 	addi	sp,sp,-24
  805e34:	dcc00315 	stw	r19,12(sp)
  805e38:	dc800215 	stw	r18,8(sp)
  805e3c:	2cc00417 	ldw	r19,16(r5)
  805e40:	34800417 	ldw	r18,16(r6)
  805e44:	dd000415 	stw	r20,16(sp)
  805e48:	dc400115 	stw	r17,4(sp)
  805e4c:	dfc00515 	stw	ra,20(sp)
  805e50:	dc000015 	stw	r16,0(sp)
  805e54:	2829883a 	mov	r20,r5
  805e58:	3023883a 	mov	r17,r6
  805e5c:	9c807016 	blt	r19,r18,806020 <__multiply+0x1f0>
  805e60:	9005883a 	mov	r2,r18
  805e64:	9825883a 	mov	r18,r19
  805e68:	1027883a 	mov	r19,r2
  805e6c:	a0800217 	ldw	r2,8(r20)
  805e70:	94e1883a 	add	r16,r18,r19
  805e74:	a1400117 	ldw	r5,4(r20)
  805e78:	1400010e 	bge	r2,r16,805e80 <__multiply+0x50>
  805e7c:	29400044 	addi	r5,r5,1
  805e80:	08059e80 	call	8059e8 <_Balloc>
  805e84:	8417883a 	add	r11,r16,r16
  805e88:	13000504 	addi	r12,r2,20
  805e8c:	5ad7883a 	add	r11,r11,r11
  805e90:	62d7883a 	add	r11,r12,r11
  805e94:	6007883a 	mov	r3,r12
  805e98:	62c0032e 	bgeu	r12,r11,805ea8 <__multiply+0x78>
  805e9c:	18000015 	stw	zero,0(r3)
  805ea0:	18c00104 	addi	r3,r3,4
  805ea4:	1afffd36 	bltu	r3,r11,805e9c <__alt_data_end+0xff805e9c>
  805ea8:	9ce7883a 	add	r19,r19,r19
  805eac:	94a5883a 	add	r18,r18,r18
  805eb0:	89800504 	addi	r6,r17,20
  805eb4:	9ce7883a 	add	r19,r19,r19
  805eb8:	a3800504 	addi	r14,r20,20
  805ebc:	94a5883a 	add	r18,r18,r18
  805ec0:	34db883a 	add	r13,r6,r19
  805ec4:	7495883a 	add	r10,r14,r18
  805ec8:	3340422e 	bgeu	r6,r13,805fd4 <__multiply+0x1a4>
  805ecc:	34400017 	ldw	r17,0(r6)
  805ed0:	8cbfffcc 	andi	r18,r17,65535
  805ed4:	90001b26 	beq	r18,zero,805f44 <__multiply+0x114>
  805ed8:	6013883a 	mov	r9,r12
  805edc:	7023883a 	mov	r17,r14
  805ee0:	0011883a 	mov	r8,zero
  805ee4:	88c00017 	ldw	r3,0(r17)
  805ee8:	4bc00017 	ldw	r15,0(r9)
  805eec:	8c400104 	addi	r17,r17,4
  805ef0:	19ffffcc 	andi	r7,r3,65535
  805ef4:	3c8f383a 	mul	r7,r7,r18
  805ef8:	1808d43a 	srli	r4,r3,16
  805efc:	797fffcc 	andi	r5,r15,65535
  805f00:	29cb883a 	add	r5,r5,r7
  805f04:	2a0b883a 	add	r5,r5,r8
  805f08:	2489383a 	mul	r4,r4,r18
  805f0c:	7806d43a 	srli	r3,r15,16
  805f10:	2810d43a 	srli	r8,r5,16
  805f14:	297fffcc 	andi	r5,r5,65535
  805f18:	1907883a 	add	r3,r3,r4
  805f1c:	1a07883a 	add	r3,r3,r8
  805f20:	1808943a 	slli	r4,r3,16
  805f24:	480f883a 	mov	r7,r9
  805f28:	1810d43a 	srli	r8,r3,16
  805f2c:	214ab03a 	or	r5,r4,r5
  805f30:	49400015 	stw	r5,0(r9)
  805f34:	4a400104 	addi	r9,r9,4
  805f38:	8abfea36 	bltu	r17,r10,805ee4 <__alt_data_end+0xff805ee4>
  805f3c:	3a000115 	stw	r8,4(r7)
  805f40:	34400017 	ldw	r17,0(r6)
  805f44:	8822d43a 	srli	r17,r17,16
  805f48:	88001f26 	beq	r17,zero,805fc8 <__multiply+0x198>
  805f4c:	60c00017 	ldw	r3,0(r12)
  805f50:	7013883a 	mov	r9,r14
  805f54:	601f883a 	mov	r15,r12
  805f58:	1811883a 	mov	r8,r3
  805f5c:	6027883a 	mov	r19,r12
  805f60:	000f883a 	mov	r7,zero
  805f64:	00000106 	br	805f6c <__multiply+0x13c>
  805f68:	9027883a 	mov	r19,r18
  805f6c:	4940000b 	ldhu	r5,0(r9)
  805f70:	4010d43a 	srli	r8,r8,16
  805f74:	193fffcc 	andi	r4,r3,65535
  805f78:	2c4b383a 	mul	r5,r5,r17
  805f7c:	7bc00104 	addi	r15,r15,4
  805f80:	4a400104 	addi	r9,r9,4
  805f84:	2a0b883a 	add	r5,r5,r8
  805f88:	29cb883a 	add	r5,r5,r7
  805f8c:	2806943a 	slli	r3,r5,16
  805f90:	9c800104 	addi	r18,r19,4
  805f94:	280ad43a 	srli	r5,r5,16
  805f98:	1908b03a 	or	r4,r3,r4
  805f9c:	793fff15 	stw	r4,-4(r15)
  805fa0:	48ffff17 	ldw	r3,-4(r9)
  805fa4:	92000017 	ldw	r8,0(r18)
  805fa8:	1806d43a 	srli	r3,r3,16
  805fac:	413fffcc 	andi	r4,r8,65535
  805fb0:	1c47383a 	mul	r3,r3,r17
  805fb4:	1907883a 	add	r3,r3,r4
  805fb8:	1947883a 	add	r3,r3,r5
  805fbc:	180ed43a 	srli	r7,r3,16
  805fc0:	4abfe936 	bltu	r9,r10,805f68 <__alt_data_end+0xff805f68>
  805fc4:	98c00115 	stw	r3,4(r19)
  805fc8:	31800104 	addi	r6,r6,4
  805fcc:	63000104 	addi	r12,r12,4
  805fd0:	337fbe36 	bltu	r6,r13,805ecc <__alt_data_end+0xff805ecc>
  805fd4:	0400090e 	bge	zero,r16,805ffc <__multiply+0x1cc>
  805fd8:	58ffff17 	ldw	r3,-4(r11)
  805fdc:	5affff04 	addi	r11,r11,-4
  805fe0:	18000326 	beq	r3,zero,805ff0 <__multiply+0x1c0>
  805fe4:	00000506 	br	805ffc <__multiply+0x1cc>
  805fe8:	58c00017 	ldw	r3,0(r11)
  805fec:	1800031e 	bne	r3,zero,805ffc <__multiply+0x1cc>
  805ff0:	843fffc4 	addi	r16,r16,-1
  805ff4:	5affff04 	addi	r11,r11,-4
  805ff8:	803ffb1e 	bne	r16,zero,805fe8 <__alt_data_end+0xff805fe8>
  805ffc:	14000415 	stw	r16,16(r2)
  806000:	dfc00517 	ldw	ra,20(sp)
  806004:	dd000417 	ldw	r20,16(sp)
  806008:	dcc00317 	ldw	r19,12(sp)
  80600c:	dc800217 	ldw	r18,8(sp)
  806010:	dc400117 	ldw	r17,4(sp)
  806014:	dc000017 	ldw	r16,0(sp)
  806018:	dec00604 	addi	sp,sp,24
  80601c:	f800283a 	ret
  806020:	3029883a 	mov	r20,r6
  806024:	2823883a 	mov	r17,r5
  806028:	003f9006 	br	805e6c <__alt_data_end+0xff805e6c>

0080602c <__pow5mult>:
  80602c:	defffa04 	addi	sp,sp,-24
  806030:	dcc00315 	stw	r19,12(sp)
  806034:	dc800215 	stw	r18,8(sp)
  806038:	dc000015 	stw	r16,0(sp)
  80603c:	dfc00515 	stw	ra,20(sp)
  806040:	dd000415 	stw	r20,16(sp)
  806044:	dc400115 	stw	r17,4(sp)
  806048:	308000cc 	andi	r2,r6,3
  80604c:	3021883a 	mov	r16,r6
  806050:	2027883a 	mov	r19,r4
  806054:	2825883a 	mov	r18,r5
  806058:	10002e1e 	bne	r2,zero,806114 <__pow5mult+0xe8>
  80605c:	8021d0ba 	srai	r16,r16,2
  806060:	80001a26 	beq	r16,zero,8060cc <__pow5mult+0xa0>
  806064:	9c401217 	ldw	r17,72(r19)
  806068:	8800061e 	bne	r17,zero,806084 <__pow5mult+0x58>
  80606c:	00003406 	br	806140 <__pow5mult+0x114>
  806070:	8021d07a 	srai	r16,r16,1
  806074:	80001526 	beq	r16,zero,8060cc <__pow5mult+0xa0>
  806078:	88800017 	ldw	r2,0(r17)
  80607c:	10001c26 	beq	r2,zero,8060f0 <__pow5mult+0xc4>
  806080:	1023883a 	mov	r17,r2
  806084:	80c0004c 	andi	r3,r16,1
  806088:	183ff926 	beq	r3,zero,806070 <__alt_data_end+0xff806070>
  80608c:	900b883a 	mov	r5,r18
  806090:	880d883a 	mov	r6,r17
  806094:	9809883a 	mov	r4,r19
  806098:	0805e300 	call	805e30 <__multiply>
  80609c:	90001b26 	beq	r18,zero,80610c <__pow5mult+0xe0>
  8060a0:	91c00117 	ldw	r7,4(r18)
  8060a4:	98c01317 	ldw	r3,76(r19)
  8060a8:	8021d07a 	srai	r16,r16,1
  8060ac:	39cf883a 	add	r7,r7,r7
  8060b0:	39cf883a 	add	r7,r7,r7
  8060b4:	19c7883a 	add	r3,r3,r7
  8060b8:	19000017 	ldw	r4,0(r3)
  8060bc:	91000015 	stw	r4,0(r18)
  8060c0:	1c800015 	stw	r18,0(r3)
  8060c4:	1025883a 	mov	r18,r2
  8060c8:	803feb1e 	bne	r16,zero,806078 <__alt_data_end+0xff806078>
  8060cc:	9005883a 	mov	r2,r18
  8060d0:	dfc00517 	ldw	ra,20(sp)
  8060d4:	dd000417 	ldw	r20,16(sp)
  8060d8:	dcc00317 	ldw	r19,12(sp)
  8060dc:	dc800217 	ldw	r18,8(sp)
  8060e0:	dc400117 	ldw	r17,4(sp)
  8060e4:	dc000017 	ldw	r16,0(sp)
  8060e8:	dec00604 	addi	sp,sp,24
  8060ec:	f800283a 	ret
  8060f0:	9809883a 	mov	r4,r19
  8060f4:	880b883a 	mov	r5,r17
  8060f8:	880d883a 	mov	r6,r17
  8060fc:	0805e300 	call	805e30 <__multiply>
  806100:	88800015 	stw	r2,0(r17)
  806104:	10000015 	stw	zero,0(r2)
  806108:	003fdd06 	br	806080 <__alt_data_end+0xff806080>
  80610c:	1025883a 	mov	r18,r2
  806110:	003fd706 	br	806070 <__alt_data_end+0xff806070>
  806114:	10bfffc4 	addi	r2,r2,-1
  806118:	1085883a 	add	r2,r2,r2
  80611c:	00c02074 	movhi	r3,129
  806120:	18c28f04 	addi	r3,r3,2620
  806124:	1085883a 	add	r2,r2,r2
  806128:	1885883a 	add	r2,r3,r2
  80612c:	11800017 	ldw	r6,0(r2)
  806130:	000f883a 	mov	r7,zero
  806134:	0805ab80 	call	805ab8 <__multadd>
  806138:	1025883a 	mov	r18,r2
  80613c:	003fc706 	br	80605c <__alt_data_end+0xff80605c>
  806140:	05000044 	movi	r20,1
  806144:	9809883a 	mov	r4,r19
  806148:	a00b883a 	mov	r5,r20
  80614c:	08059e80 	call	8059e8 <_Balloc>
  806150:	1023883a 	mov	r17,r2
  806154:	00809c44 	movi	r2,625
  806158:	88800515 	stw	r2,20(r17)
  80615c:	8d000415 	stw	r20,16(r17)
  806160:	9c401215 	stw	r17,72(r19)
  806164:	88000015 	stw	zero,0(r17)
  806168:	003fc606 	br	806084 <__alt_data_end+0xff806084>

0080616c <__lshift>:
  80616c:	defff904 	addi	sp,sp,-28
  806170:	dd000415 	stw	r20,16(sp)
  806174:	dcc00315 	stw	r19,12(sp)
  806178:	3029d17a 	srai	r20,r6,5
  80617c:	2cc00417 	ldw	r19,16(r5)
  806180:	28800217 	ldw	r2,8(r5)
  806184:	dd400515 	stw	r21,20(sp)
  806188:	a4e7883a 	add	r19,r20,r19
  80618c:	dc800215 	stw	r18,8(sp)
  806190:	dc400115 	stw	r17,4(sp)
  806194:	dc000015 	stw	r16,0(sp)
  806198:	dfc00615 	stw	ra,24(sp)
  80619c:	9c000044 	addi	r16,r19,1
  8061a0:	2823883a 	mov	r17,r5
  8061a4:	302b883a 	mov	r21,r6
  8061a8:	2025883a 	mov	r18,r4
  8061ac:	29400117 	ldw	r5,4(r5)
  8061b0:	1400030e 	bge	r2,r16,8061c0 <__lshift+0x54>
  8061b4:	1085883a 	add	r2,r2,r2
  8061b8:	29400044 	addi	r5,r5,1
  8061bc:	143ffd16 	blt	r2,r16,8061b4 <__alt_data_end+0xff8061b4>
  8061c0:	9009883a 	mov	r4,r18
  8061c4:	08059e80 	call	8059e8 <_Balloc>
  8061c8:	11c00504 	addi	r7,r2,20
  8061cc:	0500090e 	bge	zero,r20,8061f4 <__lshift+0x88>
  8061d0:	3811883a 	mov	r8,r7
  8061d4:	0007883a 	mov	r3,zero
  8061d8:	40000015 	stw	zero,0(r8)
  8061dc:	18c00044 	addi	r3,r3,1
  8061e0:	42000104 	addi	r8,r8,4
  8061e4:	1d3ffc1e 	bne	r3,r20,8061d8 <__alt_data_end+0xff8061d8>
  8061e8:	18c7883a 	add	r3,r3,r3
  8061ec:	18c7883a 	add	r3,r3,r3
  8061f0:	38cf883a 	add	r7,r7,r3
  8061f4:	89000417 	ldw	r4,16(r17)
  8061f8:	88c00504 	addi	r3,r17,20
  8061fc:	a98007cc 	andi	r6,r21,31
  806200:	2109883a 	add	r4,r4,r4
  806204:	2109883a 	add	r4,r4,r4
  806208:	1909883a 	add	r4,r3,r4
  80620c:	30002326 	beq	r6,zero,80629c <__lshift+0x130>
  806210:	01400804 	movi	r5,32
  806214:	298bc83a 	sub	r5,r5,r6
  806218:	0013883a 	mov	r9,zero
  80621c:	1a000017 	ldw	r8,0(r3)
  806220:	3815883a 	mov	r10,r7
  806224:	39c00104 	addi	r7,r7,4
  806228:	4190983a 	sll	r8,r8,r6
  80622c:	18c00104 	addi	r3,r3,4
  806230:	4a10b03a 	or	r8,r9,r8
  806234:	3a3fff15 	stw	r8,-4(r7)
  806238:	1a3fff17 	ldw	r8,-4(r3)
  80623c:	4152d83a 	srl	r9,r8,r5
  806240:	193ff636 	bltu	r3,r4,80621c <__alt_data_end+0xff80621c>
  806244:	52400115 	stw	r9,4(r10)
  806248:	48001a1e 	bne	r9,zero,8062b4 <__lshift+0x148>
  80624c:	843fffc4 	addi	r16,r16,-1
  806250:	14000415 	stw	r16,16(r2)
  806254:	88000826 	beq	r17,zero,806278 <__lshift+0x10c>
  806258:	89000117 	ldw	r4,4(r17)
  80625c:	90c01317 	ldw	r3,76(r18)
  806260:	2109883a 	add	r4,r4,r4
  806264:	2109883a 	add	r4,r4,r4
  806268:	1907883a 	add	r3,r3,r4
  80626c:	19000017 	ldw	r4,0(r3)
  806270:	89000015 	stw	r4,0(r17)
  806274:	1c400015 	stw	r17,0(r3)
  806278:	dfc00617 	ldw	ra,24(sp)
  80627c:	dd400517 	ldw	r21,20(sp)
  806280:	dd000417 	ldw	r20,16(sp)
  806284:	dcc00317 	ldw	r19,12(sp)
  806288:	dc800217 	ldw	r18,8(sp)
  80628c:	dc400117 	ldw	r17,4(sp)
  806290:	dc000017 	ldw	r16,0(sp)
  806294:	dec00704 	addi	sp,sp,28
  806298:	f800283a 	ret
  80629c:	19400017 	ldw	r5,0(r3)
  8062a0:	39c00104 	addi	r7,r7,4
  8062a4:	18c00104 	addi	r3,r3,4
  8062a8:	397fff15 	stw	r5,-4(r7)
  8062ac:	193ffb36 	bltu	r3,r4,80629c <__alt_data_end+0xff80629c>
  8062b0:	003fe606 	br	80624c <__alt_data_end+0xff80624c>
  8062b4:	9c000084 	addi	r16,r19,2
  8062b8:	003fe406 	br	80624c <__alt_data_end+0xff80624c>

008062bc <__mcmp>:
  8062bc:	20800417 	ldw	r2,16(r4)
  8062c0:	28c00417 	ldw	r3,16(r5)
  8062c4:	10c5c83a 	sub	r2,r2,r3
  8062c8:	1000111e 	bne	r2,zero,806310 <__mcmp+0x54>
  8062cc:	18c7883a 	add	r3,r3,r3
  8062d0:	18c7883a 	add	r3,r3,r3
  8062d4:	21000504 	addi	r4,r4,20
  8062d8:	29400504 	addi	r5,r5,20
  8062dc:	20c5883a 	add	r2,r4,r3
  8062e0:	28cb883a 	add	r5,r5,r3
  8062e4:	00000106 	br	8062ec <__mcmp+0x30>
  8062e8:	20800a2e 	bgeu	r4,r2,806314 <__mcmp+0x58>
  8062ec:	10bfff04 	addi	r2,r2,-4
  8062f0:	297fff04 	addi	r5,r5,-4
  8062f4:	11800017 	ldw	r6,0(r2)
  8062f8:	28c00017 	ldw	r3,0(r5)
  8062fc:	30fffa26 	beq	r6,r3,8062e8 <__alt_data_end+0xff8062e8>
  806300:	30c00236 	bltu	r6,r3,80630c <__mcmp+0x50>
  806304:	00800044 	movi	r2,1
  806308:	f800283a 	ret
  80630c:	00bfffc4 	movi	r2,-1
  806310:	f800283a 	ret
  806314:	0005883a 	mov	r2,zero
  806318:	f800283a 	ret

0080631c <__mdiff>:
  80631c:	defffb04 	addi	sp,sp,-20
  806320:	dc000015 	stw	r16,0(sp)
  806324:	2821883a 	mov	r16,r5
  806328:	dcc00315 	stw	r19,12(sp)
  80632c:	300b883a 	mov	r5,r6
  806330:	2027883a 	mov	r19,r4
  806334:	8009883a 	mov	r4,r16
  806338:	dc800215 	stw	r18,8(sp)
  80633c:	dfc00415 	stw	ra,16(sp)
  806340:	dc400115 	stw	r17,4(sp)
  806344:	3025883a 	mov	r18,r6
  806348:	08062bc0 	call	8062bc <__mcmp>
  80634c:	10005226 	beq	r2,zero,806498 <__mdiff+0x17c>
  806350:	10004c16 	blt	r2,zero,806484 <__mdiff+0x168>
  806354:	0023883a 	mov	r17,zero
  806358:	81400117 	ldw	r5,4(r16)
  80635c:	9809883a 	mov	r4,r19
  806360:	08059e80 	call	8059e8 <_Balloc>
  806364:	83400417 	ldw	r13,16(r16)
  806368:	93800417 	ldw	r14,16(r18)
  80636c:	81000504 	addi	r4,r16,20
  806370:	6b59883a 	add	r12,r13,r13
  806374:	739d883a 	add	r14,r14,r14
  806378:	6319883a 	add	r12,r12,r12
  80637c:	91800504 	addi	r6,r18,20
  806380:	739d883a 	add	r14,r14,r14
  806384:	14400315 	stw	r17,12(r2)
  806388:	2319883a 	add	r12,r4,r12
  80638c:	339d883a 	add	r14,r6,r14
  806390:	12400504 	addi	r9,r2,20
  806394:	0007883a 	mov	r3,zero
  806398:	22000017 	ldw	r8,0(r4)
  80639c:	32800017 	ldw	r10,0(r6)
  8063a0:	4ac00104 	addi	r11,r9,4
  8063a4:	41ffffcc 	andi	r7,r8,65535
  8063a8:	38c7883a 	add	r3,r7,r3
  8063ac:	51ffffcc 	andi	r7,r10,65535
  8063b0:	19cfc83a 	sub	r7,r3,r7
  8063b4:	4010d43a 	srli	r8,r8,16
  8063b8:	5014d43a 	srli	r10,r10,16
  8063bc:	3807d43a 	srai	r3,r7,16
  8063c0:	39ffffcc 	andi	r7,r7,65535
  8063c4:	4291c83a 	sub	r8,r8,r10
  8063c8:	40c7883a 	add	r3,r8,r3
  8063cc:	1810943a 	slli	r8,r3,16
  8063d0:	31800104 	addi	r6,r6,4
  8063d4:	21000104 	addi	r4,r4,4
  8063d8:	41ceb03a 	or	r7,r8,r7
  8063dc:	49c00015 	stw	r7,0(r9)
  8063e0:	1807d43a 	srai	r3,r3,16
  8063e4:	580b883a 	mov	r5,r11
  8063e8:	5813883a 	mov	r9,r11
  8063ec:	33bfea36 	bltu	r6,r14,806398 <__alt_data_end+0xff806398>
  8063f0:	2011883a 	mov	r8,r4
  8063f4:	2300152e 	bgeu	r4,r12,80644c <__mdiff+0x130>
  8063f8:	21400017 	ldw	r5,0(r4)
  8063fc:	4a400104 	addi	r9,r9,4
  806400:	21000104 	addi	r4,r4,4
  806404:	29ffffcc 	andi	r7,r5,65535
  806408:	38c7883a 	add	r3,r7,r3
  80640c:	280ad43a 	srli	r5,r5,16
  806410:	180dd43a 	srai	r6,r3,16
  806414:	19ffffcc 	andi	r7,r3,65535
  806418:	3147883a 	add	r3,r6,r5
  80641c:	180a943a 	slli	r5,r3,16
  806420:	1807d43a 	srai	r3,r3,16
  806424:	29ceb03a 	or	r7,r5,r7
  806428:	49ffff15 	stw	r7,-4(r9)
  80642c:	233ff236 	bltu	r4,r12,8063f8 <__alt_data_end+0xff8063f8>
  806430:	0206303a 	nor	r3,zero,r8
  806434:	1b07883a 	add	r3,r3,r12
  806438:	1806d0ba 	srli	r3,r3,2
  80643c:	18c00044 	addi	r3,r3,1
  806440:	18c7883a 	add	r3,r3,r3
  806444:	18c7883a 	add	r3,r3,r3
  806448:	58cb883a 	add	r5,r11,r3
  80644c:	28ffff04 	addi	r3,r5,-4
  806450:	3800041e 	bne	r7,zero,806464 <__mdiff+0x148>
  806454:	18ffff04 	addi	r3,r3,-4
  806458:	19000017 	ldw	r4,0(r3)
  80645c:	6b7fffc4 	addi	r13,r13,-1
  806460:	203ffc26 	beq	r4,zero,806454 <__alt_data_end+0xff806454>
  806464:	13400415 	stw	r13,16(r2)
  806468:	dfc00417 	ldw	ra,16(sp)
  80646c:	dcc00317 	ldw	r19,12(sp)
  806470:	dc800217 	ldw	r18,8(sp)
  806474:	dc400117 	ldw	r17,4(sp)
  806478:	dc000017 	ldw	r16,0(sp)
  80647c:	dec00504 	addi	sp,sp,20
  806480:	f800283a 	ret
  806484:	8005883a 	mov	r2,r16
  806488:	04400044 	movi	r17,1
  80648c:	9021883a 	mov	r16,r18
  806490:	1025883a 	mov	r18,r2
  806494:	003fb006 	br	806358 <__alt_data_end+0xff806358>
  806498:	9809883a 	mov	r4,r19
  80649c:	000b883a 	mov	r5,zero
  8064a0:	08059e80 	call	8059e8 <_Balloc>
  8064a4:	00c00044 	movi	r3,1
  8064a8:	10c00415 	stw	r3,16(r2)
  8064ac:	10000515 	stw	zero,20(r2)
  8064b0:	003fed06 	br	806468 <__alt_data_end+0xff806468>

008064b4 <__ulp>:
  8064b4:	295ffc2c 	andhi	r5,r5,32752
  8064b8:	00bf3034 	movhi	r2,64704
  8064bc:	2887883a 	add	r3,r5,r2
  8064c0:	00c0020e 	bge	zero,r3,8064cc <__ulp+0x18>
  8064c4:	0005883a 	mov	r2,zero
  8064c8:	f800283a 	ret
  8064cc:	00c7c83a 	sub	r3,zero,r3
  8064d0:	180bd53a 	srai	r5,r3,20
  8064d4:	008004c4 	movi	r2,19
  8064d8:	11400a0e 	bge	r2,r5,806504 <__ulp+0x50>
  8064dc:	00800c84 	movi	r2,50
  8064e0:	0007883a 	mov	r3,zero
  8064e4:	11400516 	blt	r2,r5,8064fc <__ulp+0x48>
  8064e8:	00800cc4 	movi	r2,51
  8064ec:	114bc83a 	sub	r5,r2,r5
  8064f0:	00800044 	movi	r2,1
  8064f4:	1144983a 	sll	r2,r2,r5
  8064f8:	f800283a 	ret
  8064fc:	00800044 	movi	r2,1
  806500:	f800283a 	ret
  806504:	00800234 	movhi	r2,8
  806508:	1147d83a 	sra	r3,r2,r5
  80650c:	0005883a 	mov	r2,zero
  806510:	f800283a 	ret

00806514 <__b2d>:
  806514:	defffa04 	addi	sp,sp,-24
  806518:	dc000015 	stw	r16,0(sp)
  80651c:	24000417 	ldw	r16,16(r4)
  806520:	dc400115 	stw	r17,4(sp)
  806524:	24400504 	addi	r17,r4,20
  806528:	8421883a 	add	r16,r16,r16
  80652c:	8421883a 	add	r16,r16,r16
  806530:	8c21883a 	add	r16,r17,r16
  806534:	dc800215 	stw	r18,8(sp)
  806538:	84bfff17 	ldw	r18,-4(r16)
  80653c:	dd000415 	stw	r20,16(sp)
  806540:	dcc00315 	stw	r19,12(sp)
  806544:	9009883a 	mov	r4,r18
  806548:	2829883a 	mov	r20,r5
  80654c:	dfc00515 	stw	ra,20(sp)
  806550:	0805cdc0 	call	805cdc <__hi0bits>
  806554:	00c00804 	movi	r3,32
  806558:	1887c83a 	sub	r3,r3,r2
  80655c:	a0c00015 	stw	r3,0(r20)
  806560:	00c00284 	movi	r3,10
  806564:	84ffff04 	addi	r19,r16,-4
  806568:	18801216 	blt	r3,r2,8065b4 <__b2d+0xa0>
  80656c:	014002c4 	movi	r5,11
  806570:	2889c83a 	sub	r4,r5,r2
  806574:	9106d83a 	srl	r3,r18,r4
  806578:	18cffc34 	orhi	r3,r3,16368
  80657c:	8cc0282e 	bgeu	r17,r19,806620 <__b2d+0x10c>
  806580:	817ffe17 	ldw	r5,-8(r16)
  806584:	290ad83a 	srl	r5,r5,r4
  806588:	10800544 	addi	r2,r2,21
  80658c:	9084983a 	sll	r2,r18,r2
  806590:	2884b03a 	or	r2,r5,r2
  806594:	dfc00517 	ldw	ra,20(sp)
  806598:	dd000417 	ldw	r20,16(sp)
  80659c:	dcc00317 	ldw	r19,12(sp)
  8065a0:	dc800217 	ldw	r18,8(sp)
  8065a4:	dc400117 	ldw	r17,4(sp)
  8065a8:	dc000017 	ldw	r16,0(sp)
  8065ac:	dec00604 	addi	sp,sp,24
  8065b0:	f800283a 	ret
  8065b4:	113ffd44 	addi	r4,r2,-11
  8065b8:	8cc00f2e 	bgeu	r17,r19,8065f8 <__b2d+0xe4>
  8065bc:	81bffe04 	addi	r6,r16,-8
  8065c0:	817ffe17 	ldw	r5,-8(r16)
  8065c4:	20001326 	beq	r4,zero,806614 <__b2d+0x100>
  8065c8:	00c00ac4 	movi	r3,43
  8065cc:	1885c83a 	sub	r2,r3,r2
  8065d0:	2886d83a 	srl	r3,r5,r2
  8065d4:	9124983a 	sll	r18,r18,r4
  8065d8:	90e4b03a 	or	r18,r18,r3
  8065dc:	90cffc34 	orhi	r3,r18,16368
  8065e0:	8980112e 	bgeu	r17,r6,806628 <__b2d+0x114>
  8065e4:	81bffd17 	ldw	r6,-12(r16)
  8065e8:	308cd83a 	srl	r6,r6,r2
  8065ec:	2904983a 	sll	r2,r5,r4
  8065f0:	1184b03a 	or	r2,r2,r6
  8065f4:	003fe706 	br	806594 <__alt_data_end+0xff806594>
  8065f8:	20000526 	beq	r4,zero,806610 <__b2d+0xfc>
  8065fc:	9124983a 	sll	r18,r18,r4
  806600:	000d883a 	mov	r6,zero
  806604:	000b883a 	mov	r5,zero
  806608:	90cffc34 	orhi	r3,r18,16368
  80660c:	003ff706 	br	8065ec <__alt_data_end+0xff8065ec>
  806610:	000b883a 	mov	r5,zero
  806614:	90cffc34 	orhi	r3,r18,16368
  806618:	2805883a 	mov	r2,r5
  80661c:	003fdd06 	br	806594 <__alt_data_end+0xff806594>
  806620:	000b883a 	mov	r5,zero
  806624:	003fd806 	br	806588 <__alt_data_end+0xff806588>
  806628:	000d883a 	mov	r6,zero
  80662c:	003fef06 	br	8065ec <__alt_data_end+0xff8065ec>

00806630 <__d2b>:
  806630:	defff704 	addi	sp,sp,-36
  806634:	dc000215 	stw	r16,8(sp)
  806638:	3021883a 	mov	r16,r6
  80663c:	dc400315 	stw	r17,12(sp)
  806640:	8022907a 	slli	r17,r16,1
  806644:	dd400715 	stw	r21,28(sp)
  806648:	282b883a 	mov	r21,r5
  80664c:	01400044 	movi	r5,1
  806650:	dd000615 	stw	r20,24(sp)
  806654:	dcc00515 	stw	r19,20(sp)
  806658:	dc800415 	stw	r18,16(sp)
  80665c:	dfc00815 	stw	ra,32(sp)
  806660:	3829883a 	mov	r20,r7
  806664:	dc800917 	ldw	r18,36(sp)
  806668:	8822d57a 	srli	r17,r17,21
  80666c:	08059e80 	call	8059e8 <_Balloc>
  806670:	1027883a 	mov	r19,r2
  806674:	00800434 	movhi	r2,16
  806678:	10bfffc4 	addi	r2,r2,-1
  80667c:	808c703a 	and	r6,r16,r2
  806680:	88000126 	beq	r17,zero,806688 <__d2b+0x58>
  806684:	31800434 	orhi	r6,r6,16
  806688:	d9800015 	stw	r6,0(sp)
  80668c:	a8001f26 	beq	r21,zero,80670c <__d2b+0xdc>
  806690:	d9000104 	addi	r4,sp,4
  806694:	dd400115 	stw	r21,4(sp)
  806698:	0805d440 	call	805d44 <__lo0bits>
  80669c:	d8c00017 	ldw	r3,0(sp)
  8066a0:	1000291e 	bne	r2,zero,806748 <__d2b+0x118>
  8066a4:	d9000117 	ldw	r4,4(sp)
  8066a8:	99000515 	stw	r4,20(r19)
  8066ac:	1820c03a 	cmpne	r16,r3,zero
  8066b0:	84000044 	addi	r16,r16,1
  8066b4:	98c00615 	stw	r3,24(r19)
  8066b8:	9c000415 	stw	r16,16(r19)
  8066bc:	88001b1e 	bne	r17,zero,80672c <__d2b+0xfc>
  8066c0:	800690ba 	slli	r3,r16,2
  8066c4:	10bef384 	addi	r2,r2,-1074
  8066c8:	a0800015 	stw	r2,0(r20)
  8066cc:	98c5883a 	add	r2,r19,r3
  8066d0:	11000417 	ldw	r4,16(r2)
  8066d4:	8020917a 	slli	r16,r16,5
  8066d8:	0805cdc0 	call	805cdc <__hi0bits>
  8066dc:	8085c83a 	sub	r2,r16,r2
  8066e0:	90800015 	stw	r2,0(r18)
  8066e4:	9805883a 	mov	r2,r19
  8066e8:	dfc00817 	ldw	ra,32(sp)
  8066ec:	dd400717 	ldw	r21,28(sp)
  8066f0:	dd000617 	ldw	r20,24(sp)
  8066f4:	dcc00517 	ldw	r19,20(sp)
  8066f8:	dc800417 	ldw	r18,16(sp)
  8066fc:	dc400317 	ldw	r17,12(sp)
  806700:	dc000217 	ldw	r16,8(sp)
  806704:	dec00904 	addi	sp,sp,36
  806708:	f800283a 	ret
  80670c:	d809883a 	mov	r4,sp
  806710:	0805d440 	call	805d44 <__lo0bits>
  806714:	d8c00017 	ldw	r3,0(sp)
  806718:	04000044 	movi	r16,1
  80671c:	9c000415 	stw	r16,16(r19)
  806720:	98c00515 	stw	r3,20(r19)
  806724:	10800804 	addi	r2,r2,32
  806728:	883fe526 	beq	r17,zero,8066c0 <__alt_data_end+0xff8066c0>
  80672c:	8c7ef344 	addi	r17,r17,-1075
  806730:	88a3883a 	add	r17,r17,r2
  806734:	00c00d44 	movi	r3,53
  806738:	a4400015 	stw	r17,0(r20)
  80673c:	1885c83a 	sub	r2,r3,r2
  806740:	90800015 	stw	r2,0(r18)
  806744:	003fe706 	br	8066e4 <__alt_data_end+0xff8066e4>
  806748:	01000804 	movi	r4,32
  80674c:	2089c83a 	sub	r4,r4,r2
  806750:	1908983a 	sll	r4,r3,r4
  806754:	d9400117 	ldw	r5,4(sp)
  806758:	1886d83a 	srl	r3,r3,r2
  80675c:	2148b03a 	or	r4,r4,r5
  806760:	99000515 	stw	r4,20(r19)
  806764:	d8c00015 	stw	r3,0(sp)
  806768:	003fd006 	br	8066ac <__alt_data_end+0xff8066ac>

0080676c <__ratio>:
  80676c:	defff904 	addi	sp,sp,-28
  806770:	dc400315 	stw	r17,12(sp)
  806774:	2823883a 	mov	r17,r5
  806778:	d9400104 	addi	r5,sp,4
  80677c:	dfc00615 	stw	ra,24(sp)
  806780:	dcc00515 	stw	r19,20(sp)
  806784:	dc800415 	stw	r18,16(sp)
  806788:	2027883a 	mov	r19,r4
  80678c:	dc000215 	stw	r16,8(sp)
  806790:	08065140 	call	806514 <__b2d>
  806794:	8809883a 	mov	r4,r17
  806798:	d80b883a 	mov	r5,sp
  80679c:	1025883a 	mov	r18,r2
  8067a0:	1821883a 	mov	r16,r3
  8067a4:	08065140 	call	806514 <__b2d>
  8067a8:	8a400417 	ldw	r9,16(r17)
  8067ac:	9a000417 	ldw	r8,16(r19)
  8067b0:	100d883a 	mov	r6,r2
  8067b4:	d8800017 	ldw	r2,0(sp)
  8067b8:	4251c83a 	sub	r8,r8,r9
  8067bc:	4012917a 	slli	r9,r8,5
  8067c0:	da000117 	ldw	r8,4(sp)
  8067c4:	4091c83a 	sub	r8,r8,r2
  8067c8:	4251883a 	add	r8,r8,r9
  8067cc:	02000d0e 	bge	zero,r8,806804 <__ratio+0x98>
  8067d0:	4010953a 	slli	r8,r8,20
  8067d4:	4421883a 	add	r16,r8,r16
  8067d8:	9009883a 	mov	r4,r18
  8067dc:	800b883a 	mov	r5,r16
  8067e0:	180f883a 	mov	r7,r3
  8067e4:	080ab200 	call	80ab20 <__divdf3>
  8067e8:	dfc00617 	ldw	ra,24(sp)
  8067ec:	dcc00517 	ldw	r19,20(sp)
  8067f0:	dc800417 	ldw	r18,16(sp)
  8067f4:	dc400317 	ldw	r17,12(sp)
  8067f8:	dc000217 	ldw	r16,8(sp)
  8067fc:	dec00704 	addi	sp,sp,28
  806800:	f800283a 	ret
  806804:	4010953a 	slli	r8,r8,20
  806808:	1a07c83a 	sub	r3,r3,r8
  80680c:	003ff206 	br	8067d8 <__alt_data_end+0xff8067d8>

00806810 <_mprec_log10>:
  806810:	defffe04 	addi	sp,sp,-8
  806814:	dc000015 	stw	r16,0(sp)
  806818:	dfc00115 	stw	ra,4(sp)
  80681c:	008005c4 	movi	r2,23
  806820:	2021883a 	mov	r16,r4
  806824:	11000d0e 	bge	r2,r4,80685c <_mprec_log10+0x4c>
  806828:	0005883a 	mov	r2,zero
  80682c:	00cffc34 	movhi	r3,16368
  806830:	843fffc4 	addi	r16,r16,-1
  806834:	1009883a 	mov	r4,r2
  806838:	180b883a 	mov	r5,r3
  80683c:	000d883a 	mov	r6,zero
  806840:	01d00934 	movhi	r7,16420
  806844:	080b6300 	call	80b630 <__muldf3>
  806848:	803ff91e 	bne	r16,zero,806830 <__alt_data_end+0xff806830>
  80684c:	dfc00117 	ldw	ra,4(sp)
  806850:	dc000017 	ldw	r16,0(sp)
  806854:	dec00204 	addi	sp,sp,8
  806858:	f800283a 	ret
  80685c:	202090fa 	slli	r16,r4,3
  806860:	00802074 	movhi	r2,129
  806864:	1082a604 	addi	r2,r2,2712
  806868:	1421883a 	add	r16,r2,r16
  80686c:	80800017 	ldw	r2,0(r16)
  806870:	80c00117 	ldw	r3,4(r16)
  806874:	dfc00117 	ldw	ra,4(sp)
  806878:	dc000017 	ldw	r16,0(sp)
  80687c:	dec00204 	addi	sp,sp,8
  806880:	f800283a 	ret

00806884 <__copybits>:
  806884:	297fffc4 	addi	r5,r5,-1
  806888:	280fd17a 	srai	r7,r5,5
  80688c:	30c00417 	ldw	r3,16(r6)
  806890:	30800504 	addi	r2,r6,20
  806894:	39c00044 	addi	r7,r7,1
  806898:	18c7883a 	add	r3,r3,r3
  80689c:	39cf883a 	add	r7,r7,r7
  8068a0:	18c7883a 	add	r3,r3,r3
  8068a4:	39cf883a 	add	r7,r7,r7
  8068a8:	10c7883a 	add	r3,r2,r3
  8068ac:	21cf883a 	add	r7,r4,r7
  8068b0:	10c00d2e 	bgeu	r2,r3,8068e8 <__copybits+0x64>
  8068b4:	200b883a 	mov	r5,r4
  8068b8:	12000017 	ldw	r8,0(r2)
  8068bc:	29400104 	addi	r5,r5,4
  8068c0:	10800104 	addi	r2,r2,4
  8068c4:	2a3fff15 	stw	r8,-4(r5)
  8068c8:	10fffb36 	bltu	r2,r3,8068b8 <__alt_data_end+0xff8068b8>
  8068cc:	1985c83a 	sub	r2,r3,r6
  8068d0:	10bffac4 	addi	r2,r2,-21
  8068d4:	1004d0ba 	srli	r2,r2,2
  8068d8:	10800044 	addi	r2,r2,1
  8068dc:	1085883a 	add	r2,r2,r2
  8068e0:	1085883a 	add	r2,r2,r2
  8068e4:	2089883a 	add	r4,r4,r2
  8068e8:	21c0032e 	bgeu	r4,r7,8068f8 <__copybits+0x74>
  8068ec:	20000015 	stw	zero,0(r4)
  8068f0:	21000104 	addi	r4,r4,4
  8068f4:	21fffd36 	bltu	r4,r7,8068ec <__alt_data_end+0xff8068ec>
  8068f8:	f800283a 	ret

008068fc <__any_on>:
  8068fc:	20c00417 	ldw	r3,16(r4)
  806900:	2805d17a 	srai	r2,r5,5
  806904:	21000504 	addi	r4,r4,20
  806908:	18800d0e 	bge	r3,r2,806940 <__any_on+0x44>
  80690c:	18c7883a 	add	r3,r3,r3
  806910:	18c7883a 	add	r3,r3,r3
  806914:	20c7883a 	add	r3,r4,r3
  806918:	20c0192e 	bgeu	r4,r3,806980 <__any_on+0x84>
  80691c:	18bfff17 	ldw	r2,-4(r3)
  806920:	18ffff04 	addi	r3,r3,-4
  806924:	1000041e 	bne	r2,zero,806938 <__any_on+0x3c>
  806928:	20c0142e 	bgeu	r4,r3,80697c <__any_on+0x80>
  80692c:	18ffff04 	addi	r3,r3,-4
  806930:	19400017 	ldw	r5,0(r3)
  806934:	283ffc26 	beq	r5,zero,806928 <__alt_data_end+0xff806928>
  806938:	00800044 	movi	r2,1
  80693c:	f800283a 	ret
  806940:	10c00a0e 	bge	r2,r3,80696c <__any_on+0x70>
  806944:	1085883a 	add	r2,r2,r2
  806948:	1085883a 	add	r2,r2,r2
  80694c:	294007cc 	andi	r5,r5,31
  806950:	2087883a 	add	r3,r4,r2
  806954:	283ff026 	beq	r5,zero,806918 <__alt_data_end+0xff806918>
  806958:	19800017 	ldw	r6,0(r3)
  80695c:	3144d83a 	srl	r2,r6,r5
  806960:	114a983a 	sll	r5,r2,r5
  806964:	29bff41e 	bne	r5,r6,806938 <__alt_data_end+0xff806938>
  806968:	003feb06 	br	806918 <__alt_data_end+0xff806918>
  80696c:	1085883a 	add	r2,r2,r2
  806970:	1085883a 	add	r2,r2,r2
  806974:	2087883a 	add	r3,r4,r2
  806978:	003fe706 	br	806918 <__alt_data_end+0xff806918>
  80697c:	f800283a 	ret
  806980:	0005883a 	mov	r2,zero
  806984:	f800283a 	ret

00806988 <__fpclassifyd>:
  806988:	00a00034 	movhi	r2,32768
  80698c:	10bfffc4 	addi	r2,r2,-1
  806990:	2884703a 	and	r2,r5,r2
  806994:	10000726 	beq	r2,zero,8069b4 <__fpclassifyd+0x2c>
  806998:	00fffc34 	movhi	r3,65520
  80699c:	019ff834 	movhi	r6,32736
  8069a0:	28c7883a 	add	r3,r5,r3
  8069a4:	31bfffc4 	addi	r6,r6,-1
  8069a8:	30c00536 	bltu	r6,r3,8069c0 <__fpclassifyd+0x38>
  8069ac:	00800104 	movi	r2,4
  8069b0:	f800283a 	ret
  8069b4:	2000021e 	bne	r4,zero,8069c0 <__fpclassifyd+0x38>
  8069b8:	00800084 	movi	r2,2
  8069bc:	f800283a 	ret
  8069c0:	00dffc34 	movhi	r3,32752
  8069c4:	019ff834 	movhi	r6,32736
  8069c8:	28cb883a 	add	r5,r5,r3
  8069cc:	31bfffc4 	addi	r6,r6,-1
  8069d0:	317ff62e 	bgeu	r6,r5,8069ac <__alt_data_end+0xff8069ac>
  8069d4:	01400434 	movhi	r5,16
  8069d8:	297fffc4 	addi	r5,r5,-1
  8069dc:	28800236 	bltu	r5,r2,8069e8 <__fpclassifyd+0x60>
  8069e0:	008000c4 	movi	r2,3
  8069e4:	f800283a 	ret
  8069e8:	10c00226 	beq	r2,r3,8069f4 <__fpclassifyd+0x6c>
  8069ec:	0005883a 	mov	r2,zero
  8069f0:	f800283a 	ret
  8069f4:	2005003a 	cmpeq	r2,r4,zero
  8069f8:	f800283a 	ret

008069fc <_sbrk_r>:
  8069fc:	defffd04 	addi	sp,sp,-12
  806a00:	dc000015 	stw	r16,0(sp)
  806a04:	04002074 	movhi	r16,129
  806a08:	dc400115 	stw	r17,4(sp)
  806a0c:	84128204 	addi	r16,r16,18952
  806a10:	2023883a 	mov	r17,r4
  806a14:	2809883a 	mov	r4,r5
  806a18:	dfc00215 	stw	ra,8(sp)
  806a1c:	80000015 	stw	zero,0(r16)
  806a20:	080d0300 	call	80d030 <sbrk>
  806a24:	00ffffc4 	movi	r3,-1
  806a28:	10c00526 	beq	r2,r3,806a40 <_sbrk_r+0x44>
  806a2c:	dfc00217 	ldw	ra,8(sp)
  806a30:	dc400117 	ldw	r17,4(sp)
  806a34:	dc000017 	ldw	r16,0(sp)
  806a38:	dec00304 	addi	sp,sp,12
  806a3c:	f800283a 	ret
  806a40:	80c00017 	ldw	r3,0(r16)
  806a44:	183ff926 	beq	r3,zero,806a2c <__alt_data_end+0xff806a2c>
  806a48:	88c00015 	stw	r3,0(r17)
  806a4c:	003ff706 	br	806a2c <__alt_data_end+0xff806a2c>

00806a50 <__sread>:
  806a50:	defffe04 	addi	sp,sp,-8
  806a54:	dc000015 	stw	r16,0(sp)
  806a58:	2821883a 	mov	r16,r5
  806a5c:	2940038f 	ldh	r5,14(r5)
  806a60:	dfc00115 	stw	ra,4(sp)
  806a64:	0808d080 	call	808d08 <_read_r>
  806a68:	10000716 	blt	r2,zero,806a88 <__sread+0x38>
  806a6c:	80c01417 	ldw	r3,80(r16)
  806a70:	1887883a 	add	r3,r3,r2
  806a74:	80c01415 	stw	r3,80(r16)
  806a78:	dfc00117 	ldw	ra,4(sp)
  806a7c:	dc000017 	ldw	r16,0(sp)
  806a80:	dec00204 	addi	sp,sp,8
  806a84:	f800283a 	ret
  806a88:	80c0030b 	ldhu	r3,12(r16)
  806a8c:	18fbffcc 	andi	r3,r3,61439
  806a90:	80c0030d 	sth	r3,12(r16)
  806a94:	dfc00117 	ldw	ra,4(sp)
  806a98:	dc000017 	ldw	r16,0(sp)
  806a9c:	dec00204 	addi	sp,sp,8
  806aa0:	f800283a 	ret

00806aa4 <__seofread>:
  806aa4:	0005883a 	mov	r2,zero
  806aa8:	f800283a 	ret

00806aac <__swrite>:
  806aac:	2880030b 	ldhu	r2,12(r5)
  806ab0:	defffb04 	addi	sp,sp,-20
  806ab4:	dcc00315 	stw	r19,12(sp)
  806ab8:	dc800215 	stw	r18,8(sp)
  806abc:	dc400115 	stw	r17,4(sp)
  806ac0:	dc000015 	stw	r16,0(sp)
  806ac4:	dfc00415 	stw	ra,16(sp)
  806ac8:	10c0400c 	andi	r3,r2,256
  806acc:	2821883a 	mov	r16,r5
  806ad0:	2027883a 	mov	r19,r4
  806ad4:	3025883a 	mov	r18,r6
  806ad8:	3823883a 	mov	r17,r7
  806adc:	18000526 	beq	r3,zero,806af4 <__swrite+0x48>
  806ae0:	2940038f 	ldh	r5,14(r5)
  806ae4:	000d883a 	mov	r6,zero
  806ae8:	01c00084 	movi	r7,2
  806aec:	0808b500 	call	808b50 <_lseek_r>
  806af0:	8080030b 	ldhu	r2,12(r16)
  806af4:	8140038f 	ldh	r5,14(r16)
  806af8:	10bbffcc 	andi	r2,r2,61439
  806afc:	9809883a 	mov	r4,r19
  806b00:	900d883a 	mov	r6,r18
  806b04:	880f883a 	mov	r7,r17
  806b08:	8080030d 	sth	r2,12(r16)
  806b0c:	dfc00417 	ldw	ra,16(sp)
  806b10:	dcc00317 	ldw	r19,12(sp)
  806b14:	dc800217 	ldw	r18,8(sp)
  806b18:	dc400117 	ldw	r17,4(sp)
  806b1c:	dc000017 	ldw	r16,0(sp)
  806b20:	dec00504 	addi	sp,sp,20
  806b24:	080818c1 	jmpi	80818c <_write_r>

00806b28 <__sseek>:
  806b28:	defffe04 	addi	sp,sp,-8
  806b2c:	dc000015 	stw	r16,0(sp)
  806b30:	2821883a 	mov	r16,r5
  806b34:	2940038f 	ldh	r5,14(r5)
  806b38:	dfc00115 	stw	ra,4(sp)
  806b3c:	0808b500 	call	808b50 <_lseek_r>
  806b40:	00ffffc4 	movi	r3,-1
  806b44:	10c00826 	beq	r2,r3,806b68 <__sseek+0x40>
  806b48:	80c0030b 	ldhu	r3,12(r16)
  806b4c:	80801415 	stw	r2,80(r16)
  806b50:	18c40014 	ori	r3,r3,4096
  806b54:	80c0030d 	sth	r3,12(r16)
  806b58:	dfc00117 	ldw	ra,4(sp)
  806b5c:	dc000017 	ldw	r16,0(sp)
  806b60:	dec00204 	addi	sp,sp,8
  806b64:	f800283a 	ret
  806b68:	80c0030b 	ldhu	r3,12(r16)
  806b6c:	18fbffcc 	andi	r3,r3,61439
  806b70:	80c0030d 	sth	r3,12(r16)
  806b74:	dfc00117 	ldw	ra,4(sp)
  806b78:	dc000017 	ldw	r16,0(sp)
  806b7c:	dec00204 	addi	sp,sp,8
  806b80:	f800283a 	ret

00806b84 <__sclose>:
  806b84:	2940038f 	ldh	r5,14(r5)
  806b88:	08081e81 	jmpi	8081e8 <_close_r>

00806b8c <strcmp>:
  806b8c:	2144b03a 	or	r2,r4,r5
  806b90:	108000cc 	andi	r2,r2,3
  806b94:	1000171e 	bne	r2,zero,806bf4 <strcmp+0x68>
  806b98:	20800017 	ldw	r2,0(r4)
  806b9c:	28c00017 	ldw	r3,0(r5)
  806ba0:	10c0141e 	bne	r2,r3,806bf4 <strcmp+0x68>
  806ba4:	027fbff4 	movhi	r9,65279
  806ba8:	4a7fbfc4 	addi	r9,r9,-257
  806bac:	0086303a 	nor	r3,zero,r2
  806bb0:	02202074 	movhi	r8,32897
  806bb4:	1245883a 	add	r2,r2,r9
  806bb8:	42202004 	addi	r8,r8,-32640
  806bbc:	10c4703a 	and	r2,r2,r3
  806bc0:	1204703a 	and	r2,r2,r8
  806bc4:	10000226 	beq	r2,zero,806bd0 <strcmp+0x44>
  806bc8:	00001706 	br	806c28 <strcmp+0x9c>
  806bcc:	1000161e 	bne	r2,zero,806c28 <strcmp+0x9c>
  806bd0:	21000104 	addi	r4,r4,4
  806bd4:	20c00017 	ldw	r3,0(r4)
  806bd8:	29400104 	addi	r5,r5,4
  806bdc:	29800017 	ldw	r6,0(r5)
  806be0:	1a4f883a 	add	r7,r3,r9
  806be4:	00c4303a 	nor	r2,zero,r3
  806be8:	3884703a 	and	r2,r7,r2
  806bec:	1204703a 	and	r2,r2,r8
  806bf0:	19bff626 	beq	r3,r6,806bcc <__alt_data_end+0xff806bcc>
  806bf4:	20800007 	ldb	r2,0(r4)
  806bf8:	1000051e 	bne	r2,zero,806c10 <strcmp+0x84>
  806bfc:	00000606 	br	806c18 <strcmp+0x8c>
  806c00:	21000044 	addi	r4,r4,1
  806c04:	20800007 	ldb	r2,0(r4)
  806c08:	29400044 	addi	r5,r5,1
  806c0c:	10000226 	beq	r2,zero,806c18 <strcmp+0x8c>
  806c10:	28c00007 	ldb	r3,0(r5)
  806c14:	10fffa26 	beq	r2,r3,806c00 <__alt_data_end+0xff806c00>
  806c18:	20800003 	ldbu	r2,0(r4)
  806c1c:	28c00003 	ldbu	r3,0(r5)
  806c20:	10c5c83a 	sub	r2,r2,r3
  806c24:	f800283a 	ret
  806c28:	0005883a 	mov	r2,zero
  806c2c:	f800283a 	ret

00806c30 <strlen>:
  806c30:	208000cc 	andi	r2,r4,3
  806c34:	10002026 	beq	r2,zero,806cb8 <strlen+0x88>
  806c38:	20800007 	ldb	r2,0(r4)
  806c3c:	10002026 	beq	r2,zero,806cc0 <strlen+0x90>
  806c40:	2005883a 	mov	r2,r4
  806c44:	00000206 	br	806c50 <strlen+0x20>
  806c48:	10c00007 	ldb	r3,0(r2)
  806c4c:	18001826 	beq	r3,zero,806cb0 <strlen+0x80>
  806c50:	10800044 	addi	r2,r2,1
  806c54:	10c000cc 	andi	r3,r2,3
  806c58:	183ffb1e 	bne	r3,zero,806c48 <__alt_data_end+0xff806c48>
  806c5c:	10c00017 	ldw	r3,0(r2)
  806c60:	01ffbff4 	movhi	r7,65279
  806c64:	39ffbfc4 	addi	r7,r7,-257
  806c68:	00ca303a 	nor	r5,zero,r3
  806c6c:	01a02074 	movhi	r6,32897
  806c70:	19c7883a 	add	r3,r3,r7
  806c74:	31a02004 	addi	r6,r6,-32640
  806c78:	1946703a 	and	r3,r3,r5
  806c7c:	1986703a 	and	r3,r3,r6
  806c80:	1800091e 	bne	r3,zero,806ca8 <strlen+0x78>
  806c84:	10800104 	addi	r2,r2,4
  806c88:	10c00017 	ldw	r3,0(r2)
  806c8c:	19cb883a 	add	r5,r3,r7
  806c90:	00c6303a 	nor	r3,zero,r3
  806c94:	28c6703a 	and	r3,r5,r3
  806c98:	1986703a 	and	r3,r3,r6
  806c9c:	183ff926 	beq	r3,zero,806c84 <__alt_data_end+0xff806c84>
  806ca0:	00000106 	br	806ca8 <strlen+0x78>
  806ca4:	10800044 	addi	r2,r2,1
  806ca8:	10c00007 	ldb	r3,0(r2)
  806cac:	183ffd1e 	bne	r3,zero,806ca4 <__alt_data_end+0xff806ca4>
  806cb0:	1105c83a 	sub	r2,r2,r4
  806cb4:	f800283a 	ret
  806cb8:	2005883a 	mov	r2,r4
  806cbc:	003fe706 	br	806c5c <__alt_data_end+0xff806c5c>
  806cc0:	0005883a 	mov	r2,zero
  806cc4:	f800283a 	ret

00806cc8 <__sprint_r.part.0>:
  806cc8:	28801917 	ldw	r2,100(r5)
  806ccc:	defff604 	addi	sp,sp,-40
  806cd0:	dd400515 	stw	r21,20(sp)
  806cd4:	dcc00315 	stw	r19,12(sp)
  806cd8:	dfc00915 	stw	ra,36(sp)
  806cdc:	df000815 	stw	fp,32(sp)
  806ce0:	ddc00715 	stw	r23,28(sp)
  806ce4:	dd800615 	stw	r22,24(sp)
  806ce8:	dd000415 	stw	r20,16(sp)
  806cec:	dc800215 	stw	r18,8(sp)
  806cf0:	dc400115 	stw	r17,4(sp)
  806cf4:	dc000015 	stw	r16,0(sp)
  806cf8:	1088000c 	andi	r2,r2,8192
  806cfc:	2827883a 	mov	r19,r5
  806d00:	302b883a 	mov	r21,r6
  806d04:	10002d26 	beq	r2,zero,806dbc <__sprint_r.part.0+0xf4>
  806d08:	30800217 	ldw	r2,8(r6)
  806d0c:	35800017 	ldw	r22,0(r6)
  806d10:	10002826 	beq	r2,zero,806db4 <__sprint_r.part.0+0xec>
  806d14:	2029883a 	mov	r20,r4
  806d18:	b5c00104 	addi	r23,r22,4
  806d1c:	04bfffc4 	movi	r18,-1
  806d20:	bc400017 	ldw	r17,0(r23)
  806d24:	b4000017 	ldw	r16,0(r22)
  806d28:	0039883a 	mov	fp,zero
  806d2c:	8822d0ba 	srli	r17,r17,2
  806d30:	04400316 	blt	zero,r17,806d40 <__sprint_r.part.0+0x78>
  806d34:	00001806 	br	806d98 <__sprint_r.part.0+0xd0>
  806d38:	84000104 	addi	r16,r16,4
  806d3c:	8f001526 	beq	r17,fp,806d94 <__sprint_r.part.0+0xcc>
  806d40:	81400017 	ldw	r5,0(r16)
  806d44:	a009883a 	mov	r4,r20
  806d48:	980d883a 	mov	r6,r19
  806d4c:	08084040 	call	808404 <_fputwc_r>
  806d50:	e7000044 	addi	fp,fp,1
  806d54:	14bff81e 	bne	r2,r18,806d38 <__alt_data_end+0xff806d38>
  806d58:	9005883a 	mov	r2,r18
  806d5c:	a8000215 	stw	zero,8(r21)
  806d60:	a8000115 	stw	zero,4(r21)
  806d64:	dfc00917 	ldw	ra,36(sp)
  806d68:	df000817 	ldw	fp,32(sp)
  806d6c:	ddc00717 	ldw	r23,28(sp)
  806d70:	dd800617 	ldw	r22,24(sp)
  806d74:	dd400517 	ldw	r21,20(sp)
  806d78:	dd000417 	ldw	r20,16(sp)
  806d7c:	dcc00317 	ldw	r19,12(sp)
  806d80:	dc800217 	ldw	r18,8(sp)
  806d84:	dc400117 	ldw	r17,4(sp)
  806d88:	dc000017 	ldw	r16,0(sp)
  806d8c:	dec00a04 	addi	sp,sp,40
  806d90:	f800283a 	ret
  806d94:	a8800217 	ldw	r2,8(r21)
  806d98:	8c63883a 	add	r17,r17,r17
  806d9c:	8c63883a 	add	r17,r17,r17
  806da0:	1445c83a 	sub	r2,r2,r17
  806da4:	a8800215 	stw	r2,8(r21)
  806da8:	b5800204 	addi	r22,r22,8
  806dac:	bdc00204 	addi	r23,r23,8
  806db0:	103fdb1e 	bne	r2,zero,806d20 <__alt_data_end+0xff806d20>
  806db4:	0005883a 	mov	r2,zero
  806db8:	003fe806 	br	806d5c <__alt_data_end+0xff806d5c>
  806dbc:	080863c0 	call	80863c <__sfvwrite_r>
  806dc0:	003fe606 	br	806d5c <__alt_data_end+0xff806d5c>

00806dc4 <__sprint_r>:
  806dc4:	30c00217 	ldw	r3,8(r6)
  806dc8:	18000126 	beq	r3,zero,806dd0 <__sprint_r+0xc>
  806dcc:	0806cc81 	jmpi	806cc8 <__sprint_r.part.0>
  806dd0:	30000115 	stw	zero,4(r6)
  806dd4:	0005883a 	mov	r2,zero
  806dd8:	f800283a 	ret

00806ddc <___vfiprintf_internal_r>:
  806ddc:	deffca04 	addi	sp,sp,-216
  806de0:	dd803215 	stw	r22,200(sp)
  806de4:	dd403115 	stw	r21,196(sp)
  806de8:	dfc03515 	stw	ra,212(sp)
  806dec:	df003415 	stw	fp,208(sp)
  806df0:	ddc03315 	stw	r23,204(sp)
  806df4:	dd003015 	stw	r20,192(sp)
  806df8:	dcc02f15 	stw	r19,188(sp)
  806dfc:	dc802e15 	stw	r18,184(sp)
  806e00:	dc402d15 	stw	r17,180(sp)
  806e04:	dc002c15 	stw	r16,176(sp)
  806e08:	d9002015 	stw	r4,128(sp)
  806e0c:	d9c02215 	stw	r7,136(sp)
  806e10:	282b883a 	mov	r21,r5
  806e14:	302d883a 	mov	r22,r6
  806e18:	20000226 	beq	r4,zero,806e24 <___vfiprintf_internal_r+0x48>
  806e1c:	20800e17 	ldw	r2,56(r4)
  806e20:	1001b126 	beq	r2,zero,8074e8 <___vfiprintf_internal_r+0x70c>
  806e24:	a880030b 	ldhu	r2,12(r21)
  806e28:	10c8000c 	andi	r3,r2,8192
  806e2c:	1800061e 	bne	r3,zero,806e48 <___vfiprintf_internal_r+0x6c>
  806e30:	a9001917 	ldw	r4,100(r21)
  806e34:	00f7ffc4 	movi	r3,-8193
  806e38:	10880014 	ori	r2,r2,8192
  806e3c:	20c6703a 	and	r3,r4,r3
  806e40:	a880030d 	sth	r2,12(r21)
  806e44:	a8c01915 	stw	r3,100(r21)
  806e48:	10c0020c 	andi	r3,r2,8
  806e4c:	18018926 	beq	r3,zero,807474 <___vfiprintf_internal_r+0x698>
  806e50:	a8c00417 	ldw	r3,16(r21)
  806e54:	18018726 	beq	r3,zero,807474 <___vfiprintf_internal_r+0x698>
  806e58:	1080068c 	andi	r2,r2,26
  806e5c:	00c00284 	movi	r3,10
  806e60:	10c18c26 	beq	r2,r3,807494 <___vfiprintf_internal_r+0x6b8>
  806e64:	d8801a04 	addi	r2,sp,104
  806e68:	d8c019c4 	addi	r3,sp,103
  806e6c:	07002074 	movhi	fp,129
  806e70:	05c02074 	movhi	r23,129
  806e74:	10c9c83a 	sub	r4,r2,r3
  806e78:	e702dc04 	addi	fp,fp,2928
  806e7c:	bdc2d804 	addi	r23,r23,2912
  806e80:	d8801e15 	stw	r2,120(sp)
  806e84:	d8c01f15 	stw	r3,124(sp)
  806e88:	dec01a15 	stw	sp,104(sp)
  806e8c:	d8001c15 	stw	zero,112(sp)
  806e90:	d8001b15 	stw	zero,108(sp)
  806e94:	d8002615 	stw	zero,152(sp)
  806e98:	d8002315 	stw	zero,140(sp)
  806e9c:	d9002715 	stw	r4,156(sp)
  806ea0:	d811883a 	mov	r8,sp
  806ea4:	dd402115 	stw	r21,132(sp)
  806ea8:	b021883a 	mov	r16,r22
  806eac:	80800007 	ldb	r2,0(r16)
  806eb0:	10037226 	beq	r2,zero,807c7c <___vfiprintf_internal_r+0xea0>
  806eb4:	01000944 	movi	r4,37
  806eb8:	11037026 	beq	r2,r4,807c7c <___vfiprintf_internal_r+0xea0>
  806ebc:	8005883a 	mov	r2,r16
  806ec0:	00000106 	br	806ec8 <___vfiprintf_internal_r+0xec>
  806ec4:	19000326 	beq	r3,r4,806ed4 <___vfiprintf_internal_r+0xf8>
  806ec8:	10800044 	addi	r2,r2,1
  806ecc:	10c00007 	ldb	r3,0(r2)
  806ed0:	183ffc1e 	bne	r3,zero,806ec4 <__alt_data_end+0xff806ec4>
  806ed4:	1425c83a 	sub	r18,r2,r16
  806ed8:	1023883a 	mov	r17,r2
  806edc:	90001026 	beq	r18,zero,806f20 <___vfiprintf_internal_r+0x144>
  806ee0:	d8c01c17 	ldw	r3,112(sp)
  806ee4:	d8801b17 	ldw	r2,108(sp)
  806ee8:	44000015 	stw	r16,0(r8)
  806eec:	90c7883a 	add	r3,r18,r3
  806ef0:	10800044 	addi	r2,r2,1
  806ef4:	44800115 	stw	r18,4(r8)
  806ef8:	d8c01c15 	stw	r3,112(sp)
  806efc:	d8801b15 	stw	r2,108(sp)
  806f00:	010001c4 	movi	r4,7
  806f04:	2080750e 	bge	r4,r2,8070dc <___vfiprintf_internal_r+0x300>
  806f08:	18036f1e 	bne	r3,zero,807cc8 <___vfiprintf_internal_r+0xeec>
  806f0c:	d8802317 	ldw	r2,140(sp)
  806f10:	d8001b15 	stw	zero,108(sp)
  806f14:	d811883a 	mov	r8,sp
  806f18:	1485883a 	add	r2,r2,r18
  806f1c:	d8802315 	stw	r2,140(sp)
  806f20:	88800007 	ldb	r2,0(r17)
  806f24:	10041026 	beq	r2,zero,807f68 <___vfiprintf_internal_r+0x118c>
  806f28:	88c00047 	ldb	r3,1(r17)
  806f2c:	88800044 	addi	r2,r17,1
  806f30:	d8001d85 	stb	zero,118(sp)
  806f34:	000f883a 	mov	r7,zero
  806f38:	027fffc4 	movi	r9,-1
  806f3c:	0025883a 	mov	r18,zero
  806f40:	002b883a 	mov	r21,zero
  806f44:	01401604 	movi	r5,88
  806f48:	01800244 	movi	r6,9
  806f4c:	03400a84 	movi	r13,42
  806f50:	03001b04 	movi	r12,108
  806f54:	14000044 	addi	r16,r2,1
  806f58:	18bff804 	addi	r2,r3,-32
  806f5c:	28825536 	bltu	r5,r2,8078b4 <___vfiprintf_internal_r+0xad8>
  806f60:	100490ba 	slli	r2,r2,2
  806f64:	01002034 	movhi	r4,128
  806f68:	211bde04 	addi	r4,r4,28536
  806f6c:	1105883a 	add	r2,r2,r4
  806f70:	10800017 	ldw	r2,0(r2)
  806f74:	1000683a 	jmp	r2
  806f78:	00807678 	rdprs	r2,zero,473
  806f7c:	008078b4 	movhi	r2,482
  806f80:	008078b4 	movhi	r2,482
  806f84:	00807698 	cmpnei	r2,zero,474
  806f88:	008078b4 	movhi	r2,482
  806f8c:	008078b4 	movhi	r2,482
  806f90:	008078b4 	movhi	r2,482
  806f94:	008078b4 	movhi	r2,482
  806f98:	008078b4 	movhi	r2,482
  806f9c:	008078b4 	movhi	r2,482
  806fa0:	008076a8 	cmpgeui	r2,zero,474
  806fa4:	008076c8 	cmpgei	r2,zero,475
  806fa8:	008078b4 	movhi	r2,482
  806fac:	008074f0 	cmpltui	r2,zero,467
  806fb0:	008075dc 	xori	r2,zero,471
  806fb4:	008078b4 	movhi	r2,482
  806fb8:	0080755c 	xori	r2,zero,469
  806fbc:	0080756c 	andhi	r2,zero,469
  806fc0:	0080756c 	andhi	r2,zero,469
  806fc4:	0080756c 	andhi	r2,zero,469
  806fc8:	0080756c 	andhi	r2,zero,469
  806fcc:	0080756c 	andhi	r2,zero,469
  806fd0:	0080756c 	andhi	r2,zero,469
  806fd4:	0080756c 	andhi	r2,zero,469
  806fd8:	0080756c 	andhi	r2,zero,469
  806fdc:	0080756c 	andhi	r2,zero,469
  806fe0:	008078b4 	movhi	r2,482
  806fe4:	008078b4 	movhi	r2,482
  806fe8:	008078b4 	movhi	r2,482
  806fec:	008078b4 	movhi	r2,482
  806ff0:	008078b4 	movhi	r2,482
  806ff4:	008078b4 	movhi	r2,482
  806ff8:	008078b4 	movhi	r2,482
  806ffc:	008078b4 	movhi	r2,482
  807000:	008078b4 	movhi	r2,482
  807004:	008078b4 	movhi	r2,482
  807008:	00807598 	cmpnei	r2,zero,470
  80700c:	008078b4 	movhi	r2,482
  807010:	008078b4 	movhi	r2,482
  807014:	008078b4 	movhi	r2,482
  807018:	008078b4 	movhi	r2,482
  80701c:	008078b4 	movhi	r2,482
  807020:	008078b4 	movhi	r2,482
  807024:	008078b4 	movhi	r2,482
  807028:	008078b4 	movhi	r2,482
  80702c:	008078b4 	movhi	r2,482
  807030:	008078b4 	movhi	r2,482
  807034:	00807124 	muli	r2,zero,452
  807038:	008078b4 	movhi	r2,482
  80703c:	008078b4 	movhi	r2,482
  807040:	008078b4 	movhi	r2,482
  807044:	008078b4 	movhi	r2,482
  807048:	008078b4 	movhi	r2,482
  80704c:	008070f0 	cmpltui	r2,zero,451
  807050:	008078b4 	movhi	r2,482
  807054:	008078b4 	movhi	r2,482
  807058:	00807738 	rdprs	r2,zero,476
  80705c:	008078b4 	movhi	r2,482
  807060:	008078b4 	movhi	r2,482
  807064:	008078b4 	movhi	r2,482
  807068:	008078b4 	movhi	r2,482
  80706c:	008078b4 	movhi	r2,482
  807070:	008078b4 	movhi	r2,482
  807074:	008078b4 	movhi	r2,482
  807078:	008078b4 	movhi	r2,482
  80707c:	008078b4 	movhi	r2,482
  807080:	008078b4 	movhi	r2,482
  807084:	008076d8 	cmpnei	r2,zero,475
  807088:	00807704 	movi	r2,476
  80708c:	008078b4 	movhi	r2,482
  807090:	008078b4 	movhi	r2,482
  807094:	008078b4 	movhi	r2,482
  807098:	008077e0 	cmpeqi	r2,zero,479
  80709c:	00807704 	movi	r2,476
  8070a0:	008078b4 	movhi	r2,482
  8070a4:	008078b4 	movhi	r2,482
  8070a8:	008077f0 	cmpltui	r2,zero,479
  8070ac:	008078b4 	movhi	r2,482
  8070b0:	0080761c 	xori	r2,zero,472
  8070b4:	00807128 	cmpgeui	r2,zero,452
  8070b8:	00807804 	movi	r2,480
  8070bc:	00807844 	movi	r2,481
  8070c0:	008078b4 	movhi	r2,482
  8070c4:	0080778c 	andi	r2,zero,478
  8070c8:	008078b4 	movhi	r2,482
  8070cc:	008070f4 	movhi	r2,451
  8070d0:	008078b4 	movhi	r2,482
  8070d4:	008078b4 	movhi	r2,482
  8070d8:	00807854 	movui	r2,481
  8070dc:	42000204 	addi	r8,r8,8
  8070e0:	d8802317 	ldw	r2,140(sp)
  8070e4:	1485883a 	add	r2,r2,r18
  8070e8:	d8802315 	stw	r2,140(sp)
  8070ec:	003f8c06 	br	806f20 <__alt_data_end+0xff806f20>
  8070f0:	ad400414 	ori	r21,r21,16
  8070f4:	a880080c 	andi	r2,r21,32
  8070f8:	1001e61e 	bne	r2,zero,807894 <___vfiprintf_internal_r+0xab8>
  8070fc:	a880040c 	andi	r2,r21,16
  807100:	10034726 	beq	r2,zero,807e20 <___vfiprintf_internal_r+0x1044>
  807104:	d8802217 	ldw	r2,136(sp)
  807108:	001b883a 	mov	r13,zero
  80710c:	15800017 	ldw	r22,0(r2)
  807110:	10800104 	addi	r2,r2,4
  807114:	d8802215 	stw	r2,136(sp)
  807118:	b009883a 	mov	r4,r22
  80711c:	00800044 	movi	r2,1
  807120:	00000c06 	br	807154 <___vfiprintf_internal_r+0x378>
  807124:	ad400414 	ori	r21,r21,16
  807128:	a880080c 	andi	r2,r21,32
  80712c:	1001491e 	bne	r2,zero,807654 <___vfiprintf_internal_r+0x878>
  807130:	a880040c 	andi	r2,r21,16
  807134:	10032d26 	beq	r2,zero,807dec <___vfiprintf_internal_r+0x1010>
  807138:	d9002217 	ldw	r4,136(sp)
  80713c:	001b883a 	mov	r13,zero
  807140:	0005883a 	mov	r2,zero
  807144:	25800017 	ldw	r22,0(r4)
  807148:	21000104 	addi	r4,r4,4
  80714c:	d9002215 	stw	r4,136(sp)
  807150:	b009883a 	mov	r4,r22
  807154:	d8001d85 	stb	zero,118(sp)
  807158:	4827883a 	mov	r19,r9
  80715c:	001d883a 	mov	r14,zero
  807160:	48000216 	blt	r9,zero,80716c <___vfiprintf_internal_r+0x390>
  807164:	00ffdfc4 	movi	r3,-129
  807168:	a8ea703a 	and	r21,r21,r3
  80716c:	2002071e 	bne	r4,zero,80798c <___vfiprintf_internal_r+0xbb0>
  807170:	4802ad26 	beq	r9,zero,807c28 <___vfiprintf_internal_r+0xe4c>
  807174:	10803fcc 	andi	r2,r2,255
  807178:	00c00044 	movi	r3,1
  80717c:	10c22b26 	beq	r2,r3,807a2c <___vfiprintf_internal_r+0xc50>
  807180:	00c00084 	movi	r3,2
  807184:	dd001a04 	addi	r20,sp,104
  807188:	10c0dd1e 	bne	r2,r3,807500 <___vfiprintf_internal_r+0x724>
  80718c:	d9002617 	ldw	r4,152(sp)
  807190:	b08003cc 	andi	r2,r22,15
  807194:	6806973a 	slli	r3,r13,28
  807198:	2085883a 	add	r2,r4,r2
  80719c:	b02cd13a 	srli	r22,r22,4
  8071a0:	10800003 	ldbu	r2,0(r2)
  8071a4:	681ad13a 	srli	r13,r13,4
  8071a8:	a53fffc4 	addi	r20,r20,-1
  8071ac:	1dacb03a 	or	r22,r3,r22
  8071b0:	a0800005 	stb	r2,0(r20)
  8071b4:	b344b03a 	or	r2,r22,r13
  8071b8:	103ff51e 	bne	r2,zero,807190 <__alt_data_end+0xff807190>
  8071bc:	d9001e17 	ldw	r4,120(sp)
  8071c0:	2527c83a 	sub	r19,r4,r20
  8071c4:	9823883a 	mov	r17,r19
  8071c8:	9a40010e 	bge	r19,r9,8071d0 <___vfiprintf_internal_r+0x3f4>
  8071cc:	4823883a 	mov	r17,r9
  8071d0:	73803fcc 	andi	r14,r14,255
  8071d4:	7380201c 	xori	r14,r14,128
  8071d8:	73bfe004 	addi	r14,r14,-128
  8071dc:	70000126 	beq	r14,zero,8071e4 <___vfiprintf_internal_r+0x408>
  8071e0:	8c400044 	addi	r17,r17,1
  8071e4:	ab40008c 	andi	r13,r21,2
  8071e8:	68000126 	beq	r13,zero,8071f0 <___vfiprintf_internal_r+0x414>
  8071ec:	8c400084 	addi	r17,r17,2
  8071f0:	ad80210c 	andi	r22,r21,132
  8071f4:	b001c51e 	bne	r22,zero,80790c <___vfiprintf_internal_r+0xb30>
  8071f8:	9447c83a 	sub	r3,r18,r17
  8071fc:	00c1c30e 	bge	zero,r3,80790c <___vfiprintf_internal_r+0xb30>
  807200:	01c00404 	movi	r7,16
  807204:	d8801c17 	ldw	r2,112(sp)
  807208:	38c37b0e 	bge	r7,r3,807ff8 <___vfiprintf_internal_r+0x121c>
  80720c:	01002074 	movhi	r4,129
  807210:	2102dc04 	addi	r4,r4,2928
  807214:	dc002915 	stw	r16,164(sp)
  807218:	d9801b17 	ldw	r6,108(sp)
  80721c:	d9002415 	stw	r4,144(sp)
  807220:	03c001c4 	movi	r15,7
  807224:	da402515 	stw	r9,148(sp)
  807228:	db402815 	stw	r13,160(sp)
  80722c:	1821883a 	mov	r16,r3
  807230:	00000506 	br	807248 <___vfiprintf_internal_r+0x46c>
  807234:	31400084 	addi	r5,r6,2
  807238:	42000204 	addi	r8,r8,8
  80723c:	200d883a 	mov	r6,r4
  807240:	843ffc04 	addi	r16,r16,-16
  807244:	3c000d0e 	bge	r7,r16,80727c <___vfiprintf_internal_r+0x4a0>
  807248:	10800404 	addi	r2,r2,16
  80724c:	31000044 	addi	r4,r6,1
  807250:	47000015 	stw	fp,0(r8)
  807254:	41c00115 	stw	r7,4(r8)
  807258:	d8801c15 	stw	r2,112(sp)
  80725c:	d9001b15 	stw	r4,108(sp)
  807260:	793ff40e 	bge	r15,r4,807234 <__alt_data_end+0xff807234>
  807264:	10019b1e 	bne	r2,zero,8078d4 <___vfiprintf_internal_r+0xaf8>
  807268:	843ffc04 	addi	r16,r16,-16
  80726c:	000d883a 	mov	r6,zero
  807270:	01400044 	movi	r5,1
  807274:	d811883a 	mov	r8,sp
  807278:	3c3ff316 	blt	r7,r16,807248 <__alt_data_end+0xff807248>
  80727c:	8007883a 	mov	r3,r16
  807280:	da402517 	ldw	r9,148(sp)
  807284:	db402817 	ldw	r13,160(sp)
  807288:	dc002917 	ldw	r16,164(sp)
  80728c:	d9002417 	ldw	r4,144(sp)
  807290:	1885883a 	add	r2,r3,r2
  807294:	40c00115 	stw	r3,4(r8)
  807298:	41000015 	stw	r4,0(r8)
  80729c:	d8801c15 	stw	r2,112(sp)
  8072a0:	d9401b15 	stw	r5,108(sp)
  8072a4:	00c001c4 	movi	r3,7
  8072a8:	19426a16 	blt	r3,r5,807c54 <___vfiprintf_internal_r+0xe78>
  8072ac:	d8c01d87 	ldb	r3,118(sp)
  8072b0:	42000204 	addi	r8,r8,8
  8072b4:	29000044 	addi	r4,r5,1
  8072b8:	1801991e 	bne	r3,zero,807920 <___vfiprintf_internal_r+0xb44>
  8072bc:	68000c26 	beq	r13,zero,8072f0 <___vfiprintf_internal_r+0x514>
  8072c0:	d8c01d04 	addi	r3,sp,116
  8072c4:	10800084 	addi	r2,r2,2
  8072c8:	40c00015 	stw	r3,0(r8)
  8072cc:	00c00084 	movi	r3,2
  8072d0:	40c00115 	stw	r3,4(r8)
  8072d4:	d8801c15 	stw	r2,112(sp)
  8072d8:	d9001b15 	stw	r4,108(sp)
  8072dc:	00c001c4 	movi	r3,7
  8072e0:	19024c16 	blt	r3,r4,807c14 <___vfiprintf_internal_r+0xe38>
  8072e4:	200b883a 	mov	r5,r4
  8072e8:	42000204 	addi	r8,r8,8
  8072ec:	21000044 	addi	r4,r4,1
  8072f0:	00c02004 	movi	r3,128
  8072f4:	b0c20126 	beq	r22,r3,807afc <___vfiprintf_internal_r+0xd20>
  8072f8:	4cedc83a 	sub	r22,r9,r19
  8072fc:	0580230e 	bge	zero,r22,80738c <___vfiprintf_internal_r+0x5b0>
  807300:	01c00404 	movi	r7,16
  807304:	3d83140e 	bge	r7,r22,807f58 <___vfiprintf_internal_r+0x117c>
  807308:	01002074 	movhi	r4,129
  80730c:	2102d804 	addi	r4,r4,2912
  807310:	d9002415 	stw	r4,144(sp)
  807314:	034001c4 	movi	r13,7
  807318:	00000506 	br	807330 <___vfiprintf_internal_r+0x554>
  80731c:	29000084 	addi	r4,r5,2
  807320:	42000204 	addi	r8,r8,8
  807324:	180b883a 	mov	r5,r3
  807328:	b5bffc04 	addi	r22,r22,-16
  80732c:	3d800d0e 	bge	r7,r22,807364 <___vfiprintf_internal_r+0x588>
  807330:	10800404 	addi	r2,r2,16
  807334:	28c00044 	addi	r3,r5,1
  807338:	45c00015 	stw	r23,0(r8)
  80733c:	41c00115 	stw	r7,4(r8)
  807340:	d8801c15 	stw	r2,112(sp)
  807344:	d8c01b15 	stw	r3,108(sp)
  807348:	68fff40e 	bge	r13,r3,80731c <__alt_data_end+0xff80731c>
  80734c:	1001811e 	bne	r2,zero,807954 <___vfiprintf_internal_r+0xb78>
  807350:	b5bffc04 	addi	r22,r22,-16
  807354:	01000044 	movi	r4,1
  807358:	000b883a 	mov	r5,zero
  80735c:	d811883a 	mov	r8,sp
  807360:	3dbff316 	blt	r7,r22,807330 <__alt_data_end+0xff807330>
  807364:	d8c02417 	ldw	r3,144(sp)
  807368:	1585883a 	add	r2,r2,r22
  80736c:	45800115 	stw	r22,4(r8)
  807370:	40c00015 	stw	r3,0(r8)
  807374:	d8801c15 	stw	r2,112(sp)
  807378:	d9001b15 	stw	r4,108(sp)
  80737c:	00c001c4 	movi	r3,7
  807380:	1901d016 	blt	r3,r4,807ac4 <___vfiprintf_internal_r+0xce8>
  807384:	42000204 	addi	r8,r8,8
  807388:	21000044 	addi	r4,r4,1
  80738c:	14c5883a 	add	r2,r2,r19
  807390:	45000015 	stw	r20,0(r8)
  807394:	44c00115 	stw	r19,4(r8)
  807398:	d8801c15 	stw	r2,112(sp)
  80739c:	d9001b15 	stw	r4,108(sp)
  8073a0:	00c001c4 	movi	r3,7
  8073a4:	1901cf0e 	bge	r3,r4,807ae4 <___vfiprintf_internal_r+0xd08>
  8073a8:	1002361e 	bne	r2,zero,807c84 <___vfiprintf_internal_r+0xea8>
  8073ac:	d8001b15 	stw	zero,108(sp)
  8073b0:	aac0010c 	andi	r11,r21,4
  8073b4:	58002826 	beq	r11,zero,807458 <___vfiprintf_internal_r+0x67c>
  8073b8:	9467c83a 	sub	r19,r18,r17
  8073bc:	d811883a 	mov	r8,sp
  8073c0:	04c3340e 	bge	zero,r19,808094 <___vfiprintf_internal_r+0x12b8>
  8073c4:	01c00404 	movi	r7,16
  8073c8:	3cc31b0e 	bge	r7,r19,808038 <___vfiprintf_internal_r+0x125c>
  8073cc:	00c02074 	movhi	r3,129
  8073d0:	18c2dc04 	addi	r3,r3,2928
  8073d4:	d9001b17 	ldw	r4,108(sp)
  8073d8:	d8c02415 	stw	r3,144(sp)
  8073dc:	382b883a 	mov	r21,r7
  8073e0:	050001c4 	movi	r20,7
  8073e4:	dd802017 	ldw	r22,128(sp)
  8073e8:	00000506 	br	807400 <___vfiprintf_internal_r+0x624>
  8073ec:	21400084 	addi	r5,r4,2
  8073f0:	42000204 	addi	r8,r8,8
  8073f4:	1809883a 	mov	r4,r3
  8073f8:	9cfffc04 	addi	r19,r19,-16
  8073fc:	acc00d0e 	bge	r21,r19,807434 <___vfiprintf_internal_r+0x658>
  807400:	10800404 	addi	r2,r2,16
  807404:	20c00044 	addi	r3,r4,1
  807408:	47000015 	stw	fp,0(r8)
  80740c:	45400115 	stw	r21,4(r8)
  807410:	d8801c15 	stw	r2,112(sp)
  807414:	d8c01b15 	stw	r3,108(sp)
  807418:	a0fff40e 	bge	r20,r3,8073ec <__alt_data_end+0xff8073ec>
  80741c:	10019f1e 	bne	r2,zero,807a9c <___vfiprintf_internal_r+0xcc0>
  807420:	9cfffc04 	addi	r19,r19,-16
  807424:	01400044 	movi	r5,1
  807428:	0009883a 	mov	r4,zero
  80742c:	d811883a 	mov	r8,sp
  807430:	acfff316 	blt	r21,r19,807400 <__alt_data_end+0xff807400>
  807434:	d8c02417 	ldw	r3,144(sp)
  807438:	14c5883a 	add	r2,r2,r19
  80743c:	44c00115 	stw	r19,4(r8)
  807440:	40c00015 	stw	r3,0(r8)
  807444:	d8801c15 	stw	r2,112(sp)
  807448:	d9401b15 	stw	r5,108(sp)
  80744c:	00c001c4 	movi	r3,7
  807450:	1941810e 	bge	r3,r5,807a58 <___vfiprintf_internal_r+0xc7c>
  807454:	10017a1e 	bne	r2,zero,807a40 <___vfiprintf_internal_r+0xc64>
  807458:	8c82a416 	blt	r17,r18,807eec <___vfiprintf_internal_r+0x1110>
  80745c:	d9002317 	ldw	r4,140(sp)
  807460:	2449883a 	add	r4,r4,r17
  807464:	d9002315 	stw	r4,140(sp)
  807468:	d8001b15 	stw	zero,108(sp)
  80746c:	d811883a 	mov	r8,sp
  807470:	003e8e06 	br	806eac <__alt_data_end+0xff806eac>
  807474:	d9002017 	ldw	r4,128(sp)
  807478:	a80b883a 	mov	r5,r21
  80747c:	08026180 	call	802618 <__swsetup_r>
  807480:	10000c1e 	bne	r2,zero,8074b4 <___vfiprintf_internal_r+0x6d8>
  807484:	a880030b 	ldhu	r2,12(r21)
  807488:	00c00284 	movi	r3,10
  80748c:	1080068c 	andi	r2,r2,26
  807490:	10fe741e 	bne	r2,r3,806e64 <__alt_data_end+0xff806e64>
  807494:	a880038f 	ldh	r2,14(r21)
  807498:	103e7216 	blt	r2,zero,806e64 <__alt_data_end+0xff806e64>
  80749c:	d9002017 	ldw	r4,128(sp)
  8074a0:	d9c02217 	ldw	r7,136(sp)
  8074a4:	a80b883a 	mov	r5,r21
  8074a8:	b00d883a 	mov	r6,r22
  8074ac:	08080d00 	call	8080d0 <__sbprintf>
  8074b0:	00000106 	br	8074b8 <___vfiprintf_internal_r+0x6dc>
  8074b4:	00bfffc4 	movi	r2,-1
  8074b8:	dfc03517 	ldw	ra,212(sp)
  8074bc:	df003417 	ldw	fp,208(sp)
  8074c0:	ddc03317 	ldw	r23,204(sp)
  8074c4:	dd803217 	ldw	r22,200(sp)
  8074c8:	dd403117 	ldw	r21,196(sp)
  8074cc:	dd003017 	ldw	r20,192(sp)
  8074d0:	dcc02f17 	ldw	r19,188(sp)
  8074d4:	dc802e17 	ldw	r18,184(sp)
  8074d8:	dc402d17 	ldw	r17,180(sp)
  8074dc:	dc002c17 	ldw	r16,176(sp)
  8074e0:	dec03604 	addi	sp,sp,216
  8074e4:	f800283a 	ret
  8074e8:	08046780 	call	804678 <__sinit>
  8074ec:	003e4d06 	br	806e24 <__alt_data_end+0xff806e24>
  8074f0:	8005883a 	mov	r2,r16
  8074f4:	ad400114 	ori	r21,r21,4
  8074f8:	80c00007 	ldb	r3,0(r16)
  8074fc:	003e9506 	br	806f54 <__alt_data_end+0xff806f54>
  807500:	b006d0fa 	srli	r3,r22,3
  807504:	6808977a 	slli	r4,r13,29
  807508:	681ad0fa 	srli	r13,r13,3
  80750c:	b58001cc 	andi	r22,r22,7
  807510:	b0800c04 	addi	r2,r22,48
  807514:	a53fffc4 	addi	r20,r20,-1
  807518:	20ecb03a 	or	r22,r4,r3
  80751c:	a0800005 	stb	r2,0(r20)
  807520:	b346b03a 	or	r3,r22,r13
  807524:	183ff61e 	bne	r3,zero,807500 <__alt_data_end+0xff807500>
  807528:	a8c0004c 	andi	r3,r21,1
  80752c:	a009883a 	mov	r4,r20
  807530:	18013b26 	beq	r3,zero,807a20 <___vfiprintf_internal_r+0xc44>
  807534:	10803fcc 	andi	r2,r2,255
  807538:	1080201c 	xori	r2,r2,128
  80753c:	10bfe004 	addi	r2,r2,-128
  807540:	00c00c04 	movi	r3,48
  807544:	10ff1d26 	beq	r2,r3,8071bc <__alt_data_end+0xff8071bc>
  807548:	d8801e17 	ldw	r2,120(sp)
  80754c:	a53fffc4 	addi	r20,r20,-1
  807550:	20ffffc5 	stb	r3,-1(r4)
  807554:	1527c83a 	sub	r19,r2,r20
  807558:	003f1a06 	br	8071c4 <__alt_data_end+0xff8071c4>
  80755c:	ad402014 	ori	r21,r21,128
  807560:	8005883a 	mov	r2,r16
  807564:	80c00007 	ldb	r3,0(r16)
  807568:	003e7a06 	br	806f54 <__alt_data_end+0xff806f54>
  80756c:	8005883a 	mov	r2,r16
  807570:	0025883a 	mov	r18,zero
  807574:	193ff404 	addi	r4,r3,-48
  807578:	10c00007 	ldb	r3,0(r2)
  80757c:	948002a4 	muli	r18,r18,10
  807580:	84000044 	addi	r16,r16,1
  807584:	8005883a 	mov	r2,r16
  807588:	9125883a 	add	r18,r18,r4
  80758c:	193ff404 	addi	r4,r3,-48
  807590:	313ff92e 	bgeu	r6,r4,807578 <__alt_data_end+0xff807578>
  807594:	003e7006 	br	806f58 <__alt_data_end+0xff806f58>
  807598:	ad400414 	ori	r21,r21,16
  80759c:	d9c01d85 	stb	r7,118(sp)
  8075a0:	a880080c 	andi	r2,r21,32
  8075a4:	d8c02217 	ldw	r3,136(sp)
  8075a8:	10005a26 	beq	r2,zero,807714 <___vfiprintf_internal_r+0x938>
  8075ac:	d9002217 	ldw	r4,136(sp)
  8075b0:	18800117 	ldw	r2,4(r3)
  8075b4:	1d800017 	ldw	r22,0(r3)
  8075b8:	21000204 	addi	r4,r4,8
  8075bc:	d9002215 	stw	r4,136(sp)
  8075c0:	101b883a 	mov	r13,r2
  8075c4:	1001f416 	blt	r2,zero,807d98 <___vfiprintf_internal_r+0xfbc>
  8075c8:	db801d83 	ldbu	r14,118(sp)
  8075cc:	4827883a 	mov	r19,r9
  8075d0:	00800044 	movi	r2,1
  8075d4:	b348b03a 	or	r4,r22,r13
  8075d8:	003ee106 	br	807160 <__alt_data_end+0xff807160>
  8075dc:	80c00007 	ldb	r3,0(r16)
  8075e0:	80800044 	addi	r2,r16,1
  8075e4:	1b42a326 	beq	r3,r13,808074 <___vfiprintf_internal_r+0x1298>
  8075e8:	193ff404 	addi	r4,r3,-48
  8075ec:	1021883a 	mov	r16,r2
  8075f0:	0013883a 	mov	r9,zero
  8075f4:	313e5836 	bltu	r6,r4,806f58 <__alt_data_end+0xff806f58>
  8075f8:	80c00007 	ldb	r3,0(r16)
  8075fc:	4a4002a4 	muli	r9,r9,10
  807600:	84000044 	addi	r16,r16,1
  807604:	2253883a 	add	r9,r4,r9
  807608:	193ff404 	addi	r4,r3,-48
  80760c:	313ffa2e 	bgeu	r6,r4,8075f8 <__alt_data_end+0xff8075f8>
  807610:	483e510e 	bge	r9,zero,806f58 <__alt_data_end+0xff806f58>
  807614:	027fffc4 	movi	r9,-1
  807618:	003e4f06 	br	806f58 <__alt_data_end+0xff806f58>
  80761c:	d9c01d85 	stb	r7,118(sp)
  807620:	a880080c 	andi	r2,r21,32
  807624:	10020826 	beq	r2,zero,807e48 <___vfiprintf_internal_r+0x106c>
  807628:	d8c02217 	ldw	r3,136(sp)
  80762c:	d9002317 	ldw	r4,140(sp)
  807630:	18800017 	ldw	r2,0(r3)
  807634:	2007d7fa 	srai	r3,r4,31
  807638:	d9002217 	ldw	r4,136(sp)
  80763c:	10c00115 	stw	r3,4(r2)
  807640:	21000104 	addi	r4,r4,4
  807644:	d9002215 	stw	r4,136(sp)
  807648:	d9002317 	ldw	r4,140(sp)
  80764c:	11000015 	stw	r4,0(r2)
  807650:	003e1606 	br	806eac <__alt_data_end+0xff806eac>
  807654:	d8802217 	ldw	r2,136(sp)
  807658:	d8c02217 	ldw	r3,136(sp)
  80765c:	15800017 	ldw	r22,0(r2)
  807660:	13400117 	ldw	r13,4(r2)
  807664:	18c00204 	addi	r3,r3,8
  807668:	0005883a 	mov	r2,zero
  80766c:	d8c02215 	stw	r3,136(sp)
  807670:	b348b03a 	or	r4,r22,r13
  807674:	003eb706 	br	807154 <__alt_data_end+0xff807154>
  807678:	38803fcc 	andi	r2,r7,255
  80767c:	1080201c 	xori	r2,r2,128
  807680:	10bfe004 	addi	r2,r2,-128
  807684:	1001e31e 	bne	r2,zero,807e14 <___vfiprintf_internal_r+0x1038>
  807688:	8005883a 	mov	r2,r16
  80768c:	01c00804 	movi	r7,32
  807690:	80c00007 	ldb	r3,0(r16)
  807694:	003e2f06 	br	806f54 <__alt_data_end+0xff806f54>
  807698:	ad400054 	ori	r21,r21,1
  80769c:	8005883a 	mov	r2,r16
  8076a0:	80c00007 	ldb	r3,0(r16)
  8076a4:	003e2b06 	br	806f54 <__alt_data_end+0xff806f54>
  8076a8:	d8c02217 	ldw	r3,136(sp)
  8076ac:	1c800017 	ldw	r18,0(r3)
  8076b0:	18c00104 	addi	r3,r3,4
  8076b4:	90023816 	blt	r18,zero,807f98 <___vfiprintf_internal_r+0x11bc>
  8076b8:	d8c02215 	stw	r3,136(sp)
  8076bc:	8005883a 	mov	r2,r16
  8076c0:	80c00007 	ldb	r3,0(r16)
  8076c4:	003e2306 	br	806f54 <__alt_data_end+0xff806f54>
  8076c8:	8005883a 	mov	r2,r16
  8076cc:	01c00ac4 	movi	r7,43
  8076d0:	80c00007 	ldb	r3,0(r16)
  8076d4:	003e1f06 	br	806f54 <__alt_data_end+0xff806f54>
  8076d8:	d8c02217 	ldw	r3,136(sp)
  8076dc:	04400044 	movi	r17,1
  8076e0:	d8001d85 	stb	zero,118(sp)
  8076e4:	18800017 	ldw	r2,0(r3)
  8076e8:	18c00104 	addi	r3,r3,4
  8076ec:	d8c02215 	stw	r3,136(sp)
  8076f0:	d8801005 	stb	r2,64(sp)
  8076f4:	8827883a 	mov	r19,r17
  8076f8:	dd001004 	addi	r20,sp,64
  8076fc:	0013883a 	mov	r9,zero
  807700:	003eb806 	br	8071e4 <__alt_data_end+0xff8071e4>
  807704:	d9c01d85 	stb	r7,118(sp)
  807708:	a880080c 	andi	r2,r21,32
  80770c:	d8c02217 	ldw	r3,136(sp)
  807710:	103fa61e 	bne	r2,zero,8075ac <__alt_data_end+0xff8075ac>
  807714:	a880040c 	andi	r2,r21,16
  807718:	1001dd26 	beq	r2,zero,807e90 <___vfiprintf_internal_r+0x10b4>
  80771c:	1d800017 	ldw	r22,0(r3)
  807720:	d8802217 	ldw	r2,136(sp)
  807724:	b01bd7fa 	srai	r13,r22,31
  807728:	10800104 	addi	r2,r2,4
  80772c:	d8802215 	stw	r2,136(sp)
  807730:	6805883a 	mov	r2,r13
  807734:	003fa306 	br	8075c4 <__alt_data_end+0xff8075c4>
  807738:	00802074 	movhi	r2,129
  80773c:	10827204 	addi	r2,r2,2504
  807740:	d8802615 	stw	r2,152(sp)
  807744:	d9c01d85 	stb	r7,118(sp)
  807748:	a880080c 	andi	r2,r21,32
  80774c:	10004726 	beq	r2,zero,80786c <___vfiprintf_internal_r+0xa90>
  807750:	d9002217 	ldw	r4,136(sp)
  807754:	25800017 	ldw	r22,0(r4)
  807758:	23400117 	ldw	r13,4(r4)
  80775c:	21000204 	addi	r4,r4,8
  807760:	d9002215 	stw	r4,136(sp)
  807764:	a880004c 	andi	r2,r21,1
  807768:	10014e26 	beq	r2,zero,807ca4 <___vfiprintf_internal_r+0xec8>
  80776c:	b348b03a 	or	r4,r22,r13
  807770:	20019c26 	beq	r4,zero,807de4 <___vfiprintf_internal_r+0x1008>
  807774:	00800c04 	movi	r2,48
  807778:	d8801d05 	stb	r2,116(sp)
  80777c:	d8c01d45 	stb	r3,117(sp)
  807780:	ad400094 	ori	r21,r21,2
  807784:	00800084 	movi	r2,2
  807788:	003e7206 	br	807154 <__alt_data_end+0xff807154>
  80778c:	d8c02217 	ldw	r3,136(sp)
  807790:	d8001d85 	stb	zero,118(sp)
  807794:	1d000017 	ldw	r20,0(r3)
  807798:	1d800104 	addi	r22,r3,4
  80779c:	a0021c26 	beq	r20,zero,808010 <___vfiprintf_internal_r+0x1234>
  8077a0:	a009883a 	mov	r4,r20
  8077a4:	48020016 	blt	r9,zero,807fa8 <___vfiprintf_internal_r+0x11cc>
  8077a8:	480d883a 	mov	r6,r9
  8077ac:	000b883a 	mov	r5,zero
  8077b0:	da002a15 	stw	r8,168(sp)
  8077b4:	da402b15 	stw	r9,172(sp)
  8077b8:	08056a40 	call	8056a4 <memchr>
  8077bc:	da002a17 	ldw	r8,168(sp)
  8077c0:	da402b17 	ldw	r9,172(sp)
  8077c4:	10022226 	beq	r2,zero,808050 <___vfiprintf_internal_r+0x1274>
  8077c8:	1527c83a 	sub	r19,r2,r20
  8077cc:	4cc1c916 	blt	r9,r19,807ef4 <___vfiprintf_internal_r+0x1118>
  8077d0:	db801d83 	ldbu	r14,118(sp)
  8077d4:	dd802215 	stw	r22,136(sp)
  8077d8:	0013883a 	mov	r9,zero
  8077dc:	003e7906 	br	8071c4 <__alt_data_end+0xff8071c4>
  8077e0:	ad401014 	ori	r21,r21,64
  8077e4:	8005883a 	mov	r2,r16
  8077e8:	80c00007 	ldb	r3,0(r16)
  8077ec:	003dd906 	br	806f54 <__alt_data_end+0xff806f54>
  8077f0:	80c00007 	ldb	r3,0(r16)
  8077f4:	8005883a 	mov	r2,r16
  8077f8:	1b01e326 	beq	r3,r12,807f88 <___vfiprintf_internal_r+0x11ac>
  8077fc:	ad400414 	ori	r21,r21,16
  807800:	003dd406 	br	806f54 <__alt_data_end+0xff806f54>
  807804:	d9002217 	ldw	r4,136(sp)
  807808:	00800c04 	movi	r2,48
  80780c:	d8801d05 	stb	r2,116(sp)
  807810:	25800017 	ldw	r22,0(r4)
  807814:	00801e04 	movi	r2,120
  807818:	d8801d45 	stb	r2,117(sp)
  80781c:	00802074 	movhi	r2,129
  807820:	21000104 	addi	r4,r4,4
  807824:	10827704 	addi	r2,r2,2524
  807828:	d9002215 	stw	r4,136(sp)
  80782c:	d8802615 	stw	r2,152(sp)
  807830:	001b883a 	mov	r13,zero
  807834:	ad400094 	ori	r21,r21,2
  807838:	00800084 	movi	r2,2
  80783c:	b009883a 	mov	r4,r22
  807840:	003e4406 	br	807154 <__alt_data_end+0xff807154>
  807844:	ad400814 	ori	r21,r21,32
  807848:	8005883a 	mov	r2,r16
  80784c:	80c00007 	ldb	r3,0(r16)
  807850:	003dc006 	br	806f54 <__alt_data_end+0xff806f54>
  807854:	00802074 	movhi	r2,129
  807858:	10827704 	addi	r2,r2,2524
  80785c:	d8802615 	stw	r2,152(sp)
  807860:	d9c01d85 	stb	r7,118(sp)
  807864:	a880080c 	andi	r2,r21,32
  807868:	103fb91e 	bne	r2,zero,807750 <__alt_data_end+0xff807750>
  80786c:	a880040c 	andi	r2,r21,16
  807870:	10010f1e 	bne	r2,zero,807cb0 <___vfiprintf_internal_r+0xed4>
  807874:	a880100c 	andi	r2,r21,64
  807878:	10010d26 	beq	r2,zero,807cb0 <___vfiprintf_internal_r+0xed4>
  80787c:	d9002217 	ldw	r4,136(sp)
  807880:	001b883a 	mov	r13,zero
  807884:	2580000b 	ldhu	r22,0(r4)
  807888:	21000104 	addi	r4,r4,4
  80788c:	d9002215 	stw	r4,136(sp)
  807890:	003fb406 	br	807764 <__alt_data_end+0xff807764>
  807894:	d9002217 	ldw	r4,136(sp)
  807898:	00800044 	movi	r2,1
  80789c:	25800017 	ldw	r22,0(r4)
  8078a0:	23400117 	ldw	r13,4(r4)
  8078a4:	21000204 	addi	r4,r4,8
  8078a8:	d9002215 	stw	r4,136(sp)
  8078ac:	b348b03a 	or	r4,r22,r13
  8078b0:	003e2806 	br	807154 <__alt_data_end+0xff807154>
  8078b4:	d9c01d85 	stb	r7,118(sp)
  8078b8:	1801ab26 	beq	r3,zero,807f68 <___vfiprintf_internal_r+0x118c>
  8078bc:	04400044 	movi	r17,1
  8078c0:	d8c01005 	stb	r3,64(sp)
  8078c4:	d8001d85 	stb	zero,118(sp)
  8078c8:	8827883a 	mov	r19,r17
  8078cc:	dd001004 	addi	r20,sp,64
  8078d0:	003f8a06 	br	8076fc <__alt_data_end+0xff8076fc>
  8078d4:	d9002017 	ldw	r4,128(sp)
  8078d8:	d9402117 	ldw	r5,132(sp)
  8078dc:	d9801a04 	addi	r6,sp,104
  8078e0:	d9c02b15 	stw	r7,172(sp)
  8078e4:	dbc02a15 	stw	r15,168(sp)
  8078e8:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  8078ec:	d9c02b17 	ldw	r7,172(sp)
  8078f0:	dbc02a17 	ldw	r15,168(sp)
  8078f4:	1000631e 	bne	r2,zero,807a84 <___vfiprintf_internal_r+0xca8>
  8078f8:	d9801b17 	ldw	r6,108(sp)
  8078fc:	d8801c17 	ldw	r2,112(sp)
  807900:	d811883a 	mov	r8,sp
  807904:	31400044 	addi	r5,r6,1
  807908:	003e4d06 	br	807240 <__alt_data_end+0xff807240>
  80790c:	d9401b17 	ldw	r5,108(sp)
  807910:	d8801c17 	ldw	r2,112(sp)
  807914:	29000044 	addi	r4,r5,1
  807918:	d8c01d87 	ldb	r3,118(sp)
  80791c:	183e6726 	beq	r3,zero,8072bc <__alt_data_end+0xff8072bc>
  807920:	00c00044 	movi	r3,1
  807924:	d9401d84 	addi	r5,sp,118
  807928:	10c5883a 	add	r2,r2,r3
  80792c:	41400015 	stw	r5,0(r8)
  807930:	40c00115 	stw	r3,4(r8)
  807934:	d8801c15 	stw	r2,112(sp)
  807938:	d9001b15 	stw	r4,108(sp)
  80793c:	014001c4 	movi	r5,7
  807940:	2900ab16 	blt	r5,r4,807bf0 <___vfiprintf_internal_r+0xe14>
  807944:	200b883a 	mov	r5,r4
  807948:	42000204 	addi	r8,r8,8
  80794c:	21000044 	addi	r4,r4,1
  807950:	003e5a06 	br	8072bc <__alt_data_end+0xff8072bc>
  807954:	d9002017 	ldw	r4,128(sp)
  807958:	d9402117 	ldw	r5,132(sp)
  80795c:	d9801a04 	addi	r6,sp,104
  807960:	d9c02b15 	stw	r7,172(sp)
  807964:	db402a15 	stw	r13,168(sp)
  807968:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  80796c:	d9c02b17 	ldw	r7,172(sp)
  807970:	db402a17 	ldw	r13,168(sp)
  807974:	1000431e 	bne	r2,zero,807a84 <___vfiprintf_internal_r+0xca8>
  807978:	d9401b17 	ldw	r5,108(sp)
  80797c:	d8801c17 	ldw	r2,112(sp)
  807980:	d811883a 	mov	r8,sp
  807984:	29000044 	addi	r4,r5,1
  807988:	003e6706 	br	807328 <__alt_data_end+0xff807328>
  80798c:	10803fcc 	andi	r2,r2,255
  807990:	00c00044 	movi	r3,1
  807994:	10fdfa1e 	bne	r2,r3,807180 <__alt_data_end+0xff807180>
  807998:	6800021e 	bne	r13,zero,8079a4 <___vfiprintf_internal_r+0xbc8>
  80799c:	00800244 	movi	r2,9
  8079a0:	1580222e 	bgeu	r2,r22,807a2c <___vfiprintf_internal_r+0xc50>
  8079a4:	dc802415 	stw	r18,144(sp)
  8079a8:	dc002515 	stw	r16,148(sp)
  8079ac:	dc401a04 	addi	r17,sp,104
  8079b0:	b021883a 	mov	r16,r22
  8079b4:	4827883a 	mov	r19,r9
  8079b8:	4029883a 	mov	r20,r8
  8079bc:	702d883a 	mov	r22,r14
  8079c0:	6825883a 	mov	r18,r13
  8079c4:	8009883a 	mov	r4,r16
  8079c8:	900b883a 	mov	r5,r18
  8079cc:	01800284 	movi	r6,10
  8079d0:	000f883a 	mov	r7,zero
  8079d4:	0809bc80 	call	809bc8 <__umoddi3>
  8079d8:	10800c04 	addi	r2,r2,48
  8079dc:	8c7fffc4 	addi	r17,r17,-1
  8079e0:	8009883a 	mov	r4,r16
  8079e4:	900b883a 	mov	r5,r18
  8079e8:	01800284 	movi	r6,10
  8079ec:	000f883a 	mov	r7,zero
  8079f0:	88800005 	stb	r2,0(r17)
  8079f4:	08096080 	call	809608 <__udivdi3>
  8079f8:	1021883a 	mov	r16,r2
  8079fc:	10c4b03a 	or	r2,r2,r3
  807a00:	1825883a 	mov	r18,r3
  807a04:	103fef1e 	bne	r2,zero,8079c4 <__alt_data_end+0xff8079c4>
  807a08:	dc802417 	ldw	r18,144(sp)
  807a0c:	dc002517 	ldw	r16,148(sp)
  807a10:	a011883a 	mov	r8,r20
  807a14:	9813883a 	mov	r9,r19
  807a18:	b01d883a 	mov	r14,r22
  807a1c:	8829883a 	mov	r20,r17
  807a20:	d8c01e17 	ldw	r3,120(sp)
  807a24:	1d27c83a 	sub	r19,r3,r20
  807a28:	003de606 	br	8071c4 <__alt_data_end+0xff8071c4>
  807a2c:	b5800c04 	addi	r22,r22,48
  807a30:	dd8019c5 	stb	r22,103(sp)
  807a34:	dcc02717 	ldw	r19,156(sp)
  807a38:	dd0019c4 	addi	r20,sp,103
  807a3c:	003de106 	br	8071c4 <__alt_data_end+0xff8071c4>
  807a40:	d9002017 	ldw	r4,128(sp)
  807a44:	d9402117 	ldw	r5,132(sp)
  807a48:	d9801a04 	addi	r6,sp,104
  807a4c:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807a50:	10000c1e 	bne	r2,zero,807a84 <___vfiprintf_internal_r+0xca8>
  807a54:	d8801c17 	ldw	r2,112(sp)
  807a58:	8c80010e 	bge	r17,r18,807a60 <___vfiprintf_internal_r+0xc84>
  807a5c:	9023883a 	mov	r17,r18
  807a60:	d8c02317 	ldw	r3,140(sp)
  807a64:	1c47883a 	add	r3,r3,r17
  807a68:	d8c02315 	stw	r3,140(sp)
  807a6c:	103e7e26 	beq	r2,zero,807468 <__alt_data_end+0xff807468>
  807a70:	d9002017 	ldw	r4,128(sp)
  807a74:	d9402117 	ldw	r5,132(sp)
  807a78:	d9801a04 	addi	r6,sp,104
  807a7c:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807a80:	103e7926 	beq	r2,zero,807468 <__alt_data_end+0xff807468>
  807a84:	dd402117 	ldw	r21,132(sp)
  807a88:	a880030b 	ldhu	r2,12(r21)
  807a8c:	1080100c 	andi	r2,r2,64
  807a90:	103e881e 	bne	r2,zero,8074b4 <__alt_data_end+0xff8074b4>
  807a94:	d8802317 	ldw	r2,140(sp)
  807a98:	003e8706 	br	8074b8 <__alt_data_end+0xff8074b8>
  807a9c:	d9402117 	ldw	r5,132(sp)
  807aa0:	b009883a 	mov	r4,r22
  807aa4:	d9801a04 	addi	r6,sp,104
  807aa8:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807aac:	103ff51e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807ab0:	d9001b17 	ldw	r4,108(sp)
  807ab4:	d8801c17 	ldw	r2,112(sp)
  807ab8:	d811883a 	mov	r8,sp
  807abc:	21400044 	addi	r5,r4,1
  807ac0:	003e4d06 	br	8073f8 <__alt_data_end+0xff8073f8>
  807ac4:	1000aa1e 	bne	r2,zero,807d70 <___vfiprintf_internal_r+0xf94>
  807ac8:	00c00044 	movi	r3,1
  807acc:	9805883a 	mov	r2,r19
  807ad0:	dd000015 	stw	r20,0(sp)
  807ad4:	dcc00115 	stw	r19,4(sp)
  807ad8:	dcc01c15 	stw	r19,112(sp)
  807adc:	d8c01b15 	stw	r3,108(sp)
  807ae0:	d811883a 	mov	r8,sp
  807ae4:	42000204 	addi	r8,r8,8
  807ae8:	aac0010c 	andi	r11,r21,4
  807aec:	583fda26 	beq	r11,zero,807a58 <__alt_data_end+0xff807a58>
  807af0:	9467c83a 	sub	r19,r18,r17
  807af4:	04fe3316 	blt	zero,r19,8073c4 <__alt_data_end+0xff8073c4>
  807af8:	003fd706 	br	807a58 <__alt_data_end+0xff807a58>
  807afc:	946dc83a 	sub	r22,r18,r17
  807b00:	05bdfd0e 	bge	zero,r22,8072f8 <__alt_data_end+0xff8072f8>
  807b04:	00c02074 	movhi	r3,129
  807b08:	18c2d804 	addi	r3,r3,2912
  807b0c:	01c00404 	movi	r7,16
  807b10:	d8c02415 	stw	r3,144(sp)
  807b14:	3d81530e 	bge	r7,r22,808064 <___vfiprintf_internal_r+0x1288>
  807b18:	8007883a 	mov	r3,r16
  807b1c:	034001c4 	movi	r13,7
  807b20:	b021883a 	mov	r16,r22
  807b24:	da402515 	stw	r9,148(sp)
  807b28:	182d883a 	mov	r22,r3
  807b2c:	00000506 	br	807b44 <___vfiprintf_internal_r+0xd68>
  807b30:	29800084 	addi	r6,r5,2
  807b34:	42000204 	addi	r8,r8,8
  807b38:	180b883a 	mov	r5,r3
  807b3c:	843ffc04 	addi	r16,r16,-16
  807b40:	3c000d0e 	bge	r7,r16,807b78 <___vfiprintf_internal_r+0xd9c>
  807b44:	10800404 	addi	r2,r2,16
  807b48:	28c00044 	addi	r3,r5,1
  807b4c:	45c00015 	stw	r23,0(r8)
  807b50:	41c00115 	stw	r7,4(r8)
  807b54:	d8801c15 	stw	r2,112(sp)
  807b58:	d8c01b15 	stw	r3,108(sp)
  807b5c:	68fff40e 	bge	r13,r3,807b30 <__alt_data_end+0xff807b30>
  807b60:	1000151e 	bne	r2,zero,807bb8 <___vfiprintf_internal_r+0xddc>
  807b64:	843ffc04 	addi	r16,r16,-16
  807b68:	01800044 	movi	r6,1
  807b6c:	000b883a 	mov	r5,zero
  807b70:	d811883a 	mov	r8,sp
  807b74:	3c3ff316 	blt	r7,r16,807b44 <__alt_data_end+0xff807b44>
  807b78:	da402517 	ldw	r9,148(sp)
  807b7c:	b007883a 	mov	r3,r22
  807b80:	802d883a 	mov	r22,r16
  807b84:	1821883a 	mov	r16,r3
  807b88:	d8c02417 	ldw	r3,144(sp)
  807b8c:	1585883a 	add	r2,r2,r22
  807b90:	45800115 	stw	r22,4(r8)
  807b94:	40c00015 	stw	r3,0(r8)
  807b98:	d8801c15 	stw	r2,112(sp)
  807b9c:	d9801b15 	stw	r6,108(sp)
  807ba0:	00c001c4 	movi	r3,7
  807ba4:	19806d16 	blt	r3,r6,807d5c <___vfiprintf_internal_r+0xf80>
  807ba8:	42000204 	addi	r8,r8,8
  807bac:	31000044 	addi	r4,r6,1
  807bb0:	300b883a 	mov	r5,r6
  807bb4:	003dd006 	br	8072f8 <__alt_data_end+0xff8072f8>
  807bb8:	d9002017 	ldw	r4,128(sp)
  807bbc:	d9402117 	ldw	r5,132(sp)
  807bc0:	d9801a04 	addi	r6,sp,104
  807bc4:	d9c02b15 	stw	r7,172(sp)
  807bc8:	db402a15 	stw	r13,168(sp)
  807bcc:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807bd0:	d9c02b17 	ldw	r7,172(sp)
  807bd4:	db402a17 	ldw	r13,168(sp)
  807bd8:	103faa1e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807bdc:	d9401b17 	ldw	r5,108(sp)
  807be0:	d8801c17 	ldw	r2,112(sp)
  807be4:	d811883a 	mov	r8,sp
  807be8:	29800044 	addi	r6,r5,1
  807bec:	003fd306 	br	807b3c <__alt_data_end+0xff807b3c>
  807bf0:	1000401e 	bne	r2,zero,807cf4 <___vfiprintf_internal_r+0xf18>
  807bf4:	68003b26 	beq	r13,zero,807ce4 <___vfiprintf_internal_r+0xf08>
  807bf8:	d9001d04 	addi	r4,sp,116
  807bfc:	00800084 	movi	r2,2
  807c00:	d9000015 	stw	r4,0(sp)
  807c04:	d8800115 	stw	r2,4(sp)
  807c08:	1809883a 	mov	r4,r3
  807c0c:	d811883a 	mov	r8,sp
  807c10:	003db406 	br	8072e4 <__alt_data_end+0xff8072e4>
  807c14:	1000451e 	bne	r2,zero,807d2c <___vfiprintf_internal_r+0xf50>
  807c18:	01000044 	movi	r4,1
  807c1c:	000b883a 	mov	r5,zero
  807c20:	d811883a 	mov	r8,sp
  807c24:	003db206 	br	8072f0 <__alt_data_end+0xff8072f0>
  807c28:	10803fcc 	andi	r2,r2,255
  807c2c:	1000071e 	bne	r2,zero,807c4c <___vfiprintf_internal_r+0xe70>
  807c30:	a880004c 	andi	r2,r21,1
  807c34:	10000526 	beq	r2,zero,807c4c <___vfiprintf_internal_r+0xe70>
  807c38:	00800c04 	movi	r2,48
  807c3c:	d88019c5 	stb	r2,103(sp)
  807c40:	dcc02717 	ldw	r19,156(sp)
  807c44:	dd0019c4 	addi	r20,sp,103
  807c48:	003d5e06 	br	8071c4 <__alt_data_end+0xff8071c4>
  807c4c:	dd001a04 	addi	r20,sp,104
  807c50:	003d5c06 	br	8071c4 <__alt_data_end+0xff8071c4>
  807c54:	1000971e 	bne	r2,zero,807eb4 <___vfiprintf_internal_r+0x10d8>
  807c58:	d8c01d87 	ldb	r3,118(sp)
  807c5c:	18005826 	beq	r3,zero,807dc0 <___vfiprintf_internal_r+0xfe4>
  807c60:	00800044 	movi	r2,1
  807c64:	d8c01d84 	addi	r3,sp,118
  807c68:	1009883a 	mov	r4,r2
  807c6c:	d8c00015 	stw	r3,0(sp)
  807c70:	d8800115 	stw	r2,4(sp)
  807c74:	d811883a 	mov	r8,sp
  807c78:	003f3206 	br	807944 <__alt_data_end+0xff807944>
  807c7c:	8023883a 	mov	r17,r16
  807c80:	003ca706 	br	806f20 <__alt_data_end+0xff806f20>
  807c84:	d9002017 	ldw	r4,128(sp)
  807c88:	d9402117 	ldw	r5,132(sp)
  807c8c:	d9801a04 	addi	r6,sp,104
  807c90:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807c94:	103f7b1e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807c98:	d8801c17 	ldw	r2,112(sp)
  807c9c:	d811883a 	mov	r8,sp
  807ca0:	003f9106 	br	807ae8 <__alt_data_end+0xff807ae8>
  807ca4:	00800084 	movi	r2,2
  807ca8:	b348b03a 	or	r4,r22,r13
  807cac:	003d2906 	br	807154 <__alt_data_end+0xff807154>
  807cb0:	d8802217 	ldw	r2,136(sp)
  807cb4:	001b883a 	mov	r13,zero
  807cb8:	15800017 	ldw	r22,0(r2)
  807cbc:	10800104 	addi	r2,r2,4
  807cc0:	d8802215 	stw	r2,136(sp)
  807cc4:	003ea706 	br	807764 <__alt_data_end+0xff807764>
  807cc8:	d9002017 	ldw	r4,128(sp)
  807ccc:	d9402117 	ldw	r5,132(sp)
  807cd0:	d9801a04 	addi	r6,sp,104
  807cd4:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807cd8:	103f6a1e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807cdc:	d811883a 	mov	r8,sp
  807ce0:	003cff06 	br	8070e0 <__alt_data_end+0xff8070e0>
  807ce4:	000b883a 	mov	r5,zero
  807ce8:	1809883a 	mov	r4,r3
  807cec:	d811883a 	mov	r8,sp
  807cf0:	003d7f06 	br	8072f0 <__alt_data_end+0xff8072f0>
  807cf4:	d9002017 	ldw	r4,128(sp)
  807cf8:	d9402117 	ldw	r5,132(sp)
  807cfc:	d9801a04 	addi	r6,sp,104
  807d00:	da402b15 	stw	r9,172(sp)
  807d04:	db402a15 	stw	r13,168(sp)
  807d08:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807d0c:	da402b17 	ldw	r9,172(sp)
  807d10:	db402a17 	ldw	r13,168(sp)
  807d14:	103f5b1e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807d18:	d9401b17 	ldw	r5,108(sp)
  807d1c:	d8801c17 	ldw	r2,112(sp)
  807d20:	d811883a 	mov	r8,sp
  807d24:	29000044 	addi	r4,r5,1
  807d28:	003d6406 	br	8072bc <__alt_data_end+0xff8072bc>
  807d2c:	d9002017 	ldw	r4,128(sp)
  807d30:	d9402117 	ldw	r5,132(sp)
  807d34:	d9801a04 	addi	r6,sp,104
  807d38:	da402b15 	stw	r9,172(sp)
  807d3c:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807d40:	da402b17 	ldw	r9,172(sp)
  807d44:	103f4f1e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807d48:	d9401b17 	ldw	r5,108(sp)
  807d4c:	d8801c17 	ldw	r2,112(sp)
  807d50:	d811883a 	mov	r8,sp
  807d54:	29000044 	addi	r4,r5,1
  807d58:	003d6506 	br	8072f0 <__alt_data_end+0xff8072f0>
  807d5c:	10009a1e 	bne	r2,zero,807fc8 <___vfiprintf_internal_r+0x11ec>
  807d60:	01000044 	movi	r4,1
  807d64:	000b883a 	mov	r5,zero
  807d68:	d811883a 	mov	r8,sp
  807d6c:	003d6206 	br	8072f8 <__alt_data_end+0xff8072f8>
  807d70:	d9002017 	ldw	r4,128(sp)
  807d74:	d9402117 	ldw	r5,132(sp)
  807d78:	d9801a04 	addi	r6,sp,104
  807d7c:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807d80:	103f401e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807d84:	d9001b17 	ldw	r4,108(sp)
  807d88:	d8801c17 	ldw	r2,112(sp)
  807d8c:	d811883a 	mov	r8,sp
  807d90:	21000044 	addi	r4,r4,1
  807d94:	003d7d06 	br	80738c <__alt_data_end+0xff80738c>
  807d98:	05adc83a 	sub	r22,zero,r22
  807d9c:	b004c03a 	cmpne	r2,r22,zero
  807da0:	035bc83a 	sub	r13,zero,r13
  807da4:	689bc83a 	sub	r13,r13,r2
  807da8:	03800b44 	movi	r14,45
  807dac:	db801d85 	stb	r14,118(sp)
  807db0:	4827883a 	mov	r19,r9
  807db4:	00800044 	movi	r2,1
  807db8:	b348b03a 	or	r4,r22,r13
  807dbc:	003ce806 	br	807160 <__alt_data_end+0xff807160>
  807dc0:	000b883a 	mov	r5,zero
  807dc4:	01000044 	movi	r4,1
  807dc8:	d811883a 	mov	r8,sp
  807dcc:	683d4826 	beq	r13,zero,8072f0 <__alt_data_end+0xff8072f0>
  807dd0:	00800084 	movi	r2,2
  807dd4:	d8c01d04 	addi	r3,sp,116
  807dd8:	d8c00015 	stw	r3,0(sp)
  807ddc:	d8800115 	stw	r2,4(sp)
  807de0:	003d4006 	br	8072e4 <__alt_data_end+0xff8072e4>
  807de4:	00800084 	movi	r2,2
  807de8:	003cda06 	br	807154 <__alt_data_end+0xff807154>
  807dec:	a880100c 	andi	r2,r21,64
  807df0:	10004226 	beq	r2,zero,807efc <___vfiprintf_internal_r+0x1120>
  807df4:	d8802217 	ldw	r2,136(sp)
  807df8:	001b883a 	mov	r13,zero
  807dfc:	1580000b 	ldhu	r22,0(r2)
  807e00:	10800104 	addi	r2,r2,4
  807e04:	d8802215 	stw	r2,136(sp)
  807e08:	b009883a 	mov	r4,r22
  807e0c:	0005883a 	mov	r2,zero
  807e10:	003cd006 	br	807154 <__alt_data_end+0xff807154>
  807e14:	80c00007 	ldb	r3,0(r16)
  807e18:	8005883a 	mov	r2,r16
  807e1c:	003c4d06 	br	806f54 <__alt_data_end+0xff806f54>
  807e20:	a880100c 	andi	r2,r21,64
  807e24:	10004426 	beq	r2,zero,807f38 <___vfiprintf_internal_r+0x115c>
  807e28:	d8c02217 	ldw	r3,136(sp)
  807e2c:	001b883a 	mov	r13,zero
  807e30:	00800044 	movi	r2,1
  807e34:	1d80000b 	ldhu	r22,0(r3)
  807e38:	18c00104 	addi	r3,r3,4
  807e3c:	d8c02215 	stw	r3,136(sp)
  807e40:	b009883a 	mov	r4,r22
  807e44:	003cc306 	br	807154 <__alt_data_end+0xff807154>
  807e48:	a880040c 	andi	r2,r21,16
  807e4c:	1000091e 	bne	r2,zero,807e74 <___vfiprintf_internal_r+0x1098>
  807e50:	aac0100c 	andi	r11,r21,64
  807e54:	58000726 	beq	r11,zero,807e74 <___vfiprintf_internal_r+0x1098>
  807e58:	d8c02217 	ldw	r3,136(sp)
  807e5c:	d9002317 	ldw	r4,140(sp)
  807e60:	18800017 	ldw	r2,0(r3)
  807e64:	18c00104 	addi	r3,r3,4
  807e68:	d8c02215 	stw	r3,136(sp)
  807e6c:	1100000d 	sth	r4,0(r2)
  807e70:	003c0e06 	br	806eac <__alt_data_end+0xff806eac>
  807e74:	d8c02217 	ldw	r3,136(sp)
  807e78:	d9002317 	ldw	r4,140(sp)
  807e7c:	18800017 	ldw	r2,0(r3)
  807e80:	18c00104 	addi	r3,r3,4
  807e84:	d8c02215 	stw	r3,136(sp)
  807e88:	11000015 	stw	r4,0(r2)
  807e8c:	003c0706 	br	806eac <__alt_data_end+0xff806eac>
  807e90:	a880100c 	andi	r2,r21,64
  807e94:	10002126 	beq	r2,zero,807f1c <___vfiprintf_internal_r+0x1140>
  807e98:	1d80000f 	ldh	r22,0(r3)
  807e9c:	d8c02217 	ldw	r3,136(sp)
  807ea0:	b01bd7fa 	srai	r13,r22,31
  807ea4:	18c00104 	addi	r3,r3,4
  807ea8:	d8c02215 	stw	r3,136(sp)
  807eac:	6805883a 	mov	r2,r13
  807eb0:	003dc406 	br	8075c4 <__alt_data_end+0xff8075c4>
  807eb4:	d9002017 	ldw	r4,128(sp)
  807eb8:	d9402117 	ldw	r5,132(sp)
  807ebc:	d9801a04 	addi	r6,sp,104
  807ec0:	da402b15 	stw	r9,172(sp)
  807ec4:	db402a15 	stw	r13,168(sp)
  807ec8:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807ecc:	da402b17 	ldw	r9,172(sp)
  807ed0:	db402a17 	ldw	r13,168(sp)
  807ed4:	103eeb1e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807ed8:	d9401b17 	ldw	r5,108(sp)
  807edc:	d8801c17 	ldw	r2,112(sp)
  807ee0:	d811883a 	mov	r8,sp
  807ee4:	29000044 	addi	r4,r5,1
  807ee8:	003e8b06 	br	807918 <__alt_data_end+0xff807918>
  807eec:	9023883a 	mov	r17,r18
  807ef0:	003d5a06 	br	80745c <__alt_data_end+0xff80745c>
  807ef4:	4827883a 	mov	r19,r9
  807ef8:	003e3506 	br	8077d0 <__alt_data_end+0xff8077d0>
  807efc:	d8c02217 	ldw	r3,136(sp)
  807f00:	001b883a 	mov	r13,zero
  807f04:	0005883a 	mov	r2,zero
  807f08:	1d800017 	ldw	r22,0(r3)
  807f0c:	18c00104 	addi	r3,r3,4
  807f10:	d8c02215 	stw	r3,136(sp)
  807f14:	b009883a 	mov	r4,r22
  807f18:	003c8e06 	br	807154 <__alt_data_end+0xff807154>
  807f1c:	1d800017 	ldw	r22,0(r3)
  807f20:	d9002217 	ldw	r4,136(sp)
  807f24:	b01bd7fa 	srai	r13,r22,31
  807f28:	21000104 	addi	r4,r4,4
  807f2c:	d9002215 	stw	r4,136(sp)
  807f30:	6805883a 	mov	r2,r13
  807f34:	003da306 	br	8075c4 <__alt_data_end+0xff8075c4>
  807f38:	d9002217 	ldw	r4,136(sp)
  807f3c:	001b883a 	mov	r13,zero
  807f40:	00800044 	movi	r2,1
  807f44:	25800017 	ldw	r22,0(r4)
  807f48:	21000104 	addi	r4,r4,4
  807f4c:	d9002215 	stw	r4,136(sp)
  807f50:	b009883a 	mov	r4,r22
  807f54:	003c7f06 	br	807154 <__alt_data_end+0xff807154>
  807f58:	00c02074 	movhi	r3,129
  807f5c:	18c2d804 	addi	r3,r3,2912
  807f60:	d8c02415 	stw	r3,144(sp)
  807f64:	003cff06 	br	807364 <__alt_data_end+0xff807364>
  807f68:	d8801c17 	ldw	r2,112(sp)
  807f6c:	dd402117 	ldw	r21,132(sp)
  807f70:	103ec526 	beq	r2,zero,807a88 <__alt_data_end+0xff807a88>
  807f74:	d9002017 	ldw	r4,128(sp)
  807f78:	a80b883a 	mov	r5,r21
  807f7c:	d9801a04 	addi	r6,sp,104
  807f80:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807f84:	003ec006 	br	807a88 <__alt_data_end+0xff807a88>
  807f88:	80800044 	addi	r2,r16,1
  807f8c:	ad400814 	ori	r21,r21,32
  807f90:	80c00047 	ldb	r3,1(r16)
  807f94:	003bef06 	br	806f54 <__alt_data_end+0xff806f54>
  807f98:	04a5c83a 	sub	r18,zero,r18
  807f9c:	8005883a 	mov	r2,r16
  807fa0:	d8c02215 	stw	r3,136(sp)
  807fa4:	003d5306 	br	8074f4 <__alt_data_end+0xff8074f4>
  807fa8:	da002a15 	stw	r8,168(sp)
  807fac:	0806c300 	call	806c30 <strlen>
  807fb0:	1027883a 	mov	r19,r2
  807fb4:	db801d83 	ldbu	r14,118(sp)
  807fb8:	dd802215 	stw	r22,136(sp)
  807fbc:	0013883a 	mov	r9,zero
  807fc0:	da002a17 	ldw	r8,168(sp)
  807fc4:	003c7f06 	br	8071c4 <__alt_data_end+0xff8071c4>
  807fc8:	d9002017 	ldw	r4,128(sp)
  807fcc:	d9402117 	ldw	r5,132(sp)
  807fd0:	d9801a04 	addi	r6,sp,104
  807fd4:	da402b15 	stw	r9,172(sp)
  807fd8:	0806cc80 	call	806cc8 <__sprint_r.part.0>
  807fdc:	da402b17 	ldw	r9,172(sp)
  807fe0:	103ea81e 	bne	r2,zero,807a84 <__alt_data_end+0xff807a84>
  807fe4:	d9401b17 	ldw	r5,108(sp)
  807fe8:	d8801c17 	ldw	r2,112(sp)
  807fec:	d811883a 	mov	r8,sp
  807ff0:	29000044 	addi	r4,r5,1
  807ff4:	003cc006 	br	8072f8 <__alt_data_end+0xff8072f8>
  807ff8:	d9401b17 	ldw	r5,108(sp)
  807ffc:	01002074 	movhi	r4,129
  808000:	2102dc04 	addi	r4,r4,2928
  808004:	d9002415 	stw	r4,144(sp)
  808008:	29400044 	addi	r5,r5,1
  80800c:	003c9f06 	br	80728c <__alt_data_end+0xff80728c>
  808010:	00800184 	movi	r2,6
  808014:	1240012e 	bgeu	r2,r9,80801c <___vfiprintf_internal_r+0x1240>
  808018:	1013883a 	mov	r9,r2
  80801c:	4827883a 	mov	r19,r9
  808020:	4823883a 	mov	r17,r9
  808024:	48001116 	blt	r9,zero,80806c <___vfiprintf_internal_r+0x1290>
  808028:	05002074 	movhi	r20,129
  80802c:	dd802215 	stw	r22,136(sp)
  808030:	a5027c04 	addi	r20,r20,2544
  808034:	003db106 	br	8076fc <__alt_data_end+0xff8076fc>
  808038:	d9401b17 	ldw	r5,108(sp)
  80803c:	01002074 	movhi	r4,129
  808040:	2102dc04 	addi	r4,r4,2928
  808044:	d9002415 	stw	r4,144(sp)
  808048:	29400044 	addi	r5,r5,1
  80804c:	003cf906 	br	807434 <__alt_data_end+0xff807434>
  808050:	4827883a 	mov	r19,r9
  808054:	db801d83 	ldbu	r14,118(sp)
  808058:	dd802215 	stw	r22,136(sp)
  80805c:	0013883a 	mov	r9,zero
  808060:	003c5806 	br	8071c4 <__alt_data_end+0xff8071c4>
  808064:	200d883a 	mov	r6,r4
  808068:	003ec706 	br	807b88 <__alt_data_end+0xff807b88>
  80806c:	0023883a 	mov	r17,zero
  808070:	003fed06 	br	808028 <__alt_data_end+0xff808028>
  808074:	d9002217 	ldw	r4,136(sp)
  808078:	22400017 	ldw	r9,0(r4)
  80807c:	20c00104 	addi	r3,r4,4
  808080:	d8c02215 	stw	r3,136(sp)
  808084:	483fc20e 	bge	r9,zero,807f90 <__alt_data_end+0xff807f90>
  808088:	027fffc4 	movi	r9,-1
  80808c:	80c00047 	ldb	r3,1(r16)
  808090:	003bb006 	br	806f54 <__alt_data_end+0xff806f54>
  808094:	8c80010e 	bge	r17,r18,80809c <___vfiprintf_internal_r+0x12c0>
  808098:	9023883a 	mov	r17,r18
  80809c:	d8802317 	ldw	r2,140(sp)
  8080a0:	1445883a 	add	r2,r2,r17
  8080a4:	d8802315 	stw	r2,140(sp)
  8080a8:	003cef06 	br	807468 <__alt_data_end+0xff807468>

008080ac <__vfiprintf_internal>:
  8080ac:	2007883a 	mov	r3,r4
  8080b0:	01002074 	movhi	r4,129
  8080b4:	210b1c04 	addi	r4,r4,11376
  8080b8:	21000017 	ldw	r4,0(r4)
  8080bc:	2805883a 	mov	r2,r5
  8080c0:	300f883a 	mov	r7,r6
  8080c4:	180b883a 	mov	r5,r3
  8080c8:	100d883a 	mov	r6,r2
  8080cc:	0806ddc1 	jmpi	806ddc <___vfiprintf_internal_r>

008080d0 <__sbprintf>:
  8080d0:	2880030b 	ldhu	r2,12(r5)
  8080d4:	2ac01917 	ldw	r11,100(r5)
  8080d8:	2a80038b 	ldhu	r10,14(r5)
  8080dc:	2a400717 	ldw	r9,28(r5)
  8080e0:	2a000917 	ldw	r8,36(r5)
  8080e4:	defee204 	addi	sp,sp,-1144
  8080e8:	00c10004 	movi	r3,1024
  8080ec:	dc011a15 	stw	r16,1128(sp)
  8080f0:	10bfff4c 	andi	r2,r2,65533
  8080f4:	2821883a 	mov	r16,r5
  8080f8:	d8cb883a 	add	r5,sp,r3
  8080fc:	dc811c15 	stw	r18,1136(sp)
  808100:	dc411b15 	stw	r17,1132(sp)
  808104:	dfc11d15 	stw	ra,1140(sp)
  808108:	2025883a 	mov	r18,r4
  80810c:	d881030d 	sth	r2,1036(sp)
  808110:	dac11915 	stw	r11,1124(sp)
  808114:	da81038d 	sth	r10,1038(sp)
  808118:	da410715 	stw	r9,1052(sp)
  80811c:	da010915 	stw	r8,1060(sp)
  808120:	dec10015 	stw	sp,1024(sp)
  808124:	dec10415 	stw	sp,1040(sp)
  808128:	d8c10215 	stw	r3,1032(sp)
  80812c:	d8c10515 	stw	r3,1044(sp)
  808130:	d8010615 	stw	zero,1048(sp)
  808134:	0806ddc0 	call	806ddc <___vfiprintf_internal_r>
  808138:	1023883a 	mov	r17,r2
  80813c:	10000416 	blt	r2,zero,808150 <__sbprintf+0x80>
  808140:	9009883a 	mov	r4,r18
  808144:	d9410004 	addi	r5,sp,1024
  808148:	080429c0 	call	80429c <_fflush_r>
  80814c:	10000d1e 	bne	r2,zero,808184 <__sbprintf+0xb4>
  808150:	d8c1030b 	ldhu	r3,1036(sp)
  808154:	18c0100c 	andi	r3,r3,64
  808158:	18000326 	beq	r3,zero,808168 <__sbprintf+0x98>
  80815c:	8080030b 	ldhu	r2,12(r16)
  808160:	10801014 	ori	r2,r2,64
  808164:	8080030d 	sth	r2,12(r16)
  808168:	8805883a 	mov	r2,r17
  80816c:	dfc11d17 	ldw	ra,1140(sp)
  808170:	dc811c17 	ldw	r18,1136(sp)
  808174:	dc411b17 	ldw	r17,1132(sp)
  808178:	dc011a17 	ldw	r16,1128(sp)
  80817c:	dec11e04 	addi	sp,sp,1144
  808180:	f800283a 	ret
  808184:	047fffc4 	movi	r17,-1
  808188:	003ff106 	br	808150 <__alt_data_end+0xff808150>

0080818c <_write_r>:
  80818c:	defffd04 	addi	sp,sp,-12
  808190:	dc000015 	stw	r16,0(sp)
  808194:	04002074 	movhi	r16,129
  808198:	dc400115 	stw	r17,4(sp)
  80819c:	84128204 	addi	r16,r16,18952
  8081a0:	2023883a 	mov	r17,r4
  8081a4:	2809883a 	mov	r4,r5
  8081a8:	300b883a 	mov	r5,r6
  8081ac:	380d883a 	mov	r6,r7
  8081b0:	dfc00215 	stw	ra,8(sp)
  8081b4:	80000015 	stw	zero,0(r16)
  8081b8:	080d1300 	call	80d130 <write>
  8081bc:	00ffffc4 	movi	r3,-1
  8081c0:	10c00526 	beq	r2,r3,8081d8 <_write_r+0x4c>
  8081c4:	dfc00217 	ldw	ra,8(sp)
  8081c8:	dc400117 	ldw	r17,4(sp)
  8081cc:	dc000017 	ldw	r16,0(sp)
  8081d0:	dec00304 	addi	sp,sp,12
  8081d4:	f800283a 	ret
  8081d8:	80c00017 	ldw	r3,0(r16)
  8081dc:	183ff926 	beq	r3,zero,8081c4 <__alt_data_end+0xff8081c4>
  8081e0:	88c00015 	stw	r3,0(r17)
  8081e4:	003ff706 	br	8081c4 <__alt_data_end+0xff8081c4>

008081e8 <_close_r>:
  8081e8:	defffd04 	addi	sp,sp,-12
  8081ec:	dc000015 	stw	r16,0(sp)
  8081f0:	04002074 	movhi	r16,129
  8081f4:	dc400115 	stw	r17,4(sp)
  8081f8:	84128204 	addi	r16,r16,18952
  8081fc:	2023883a 	mov	r17,r4
  808200:	2809883a 	mov	r4,r5
  808204:	dfc00215 	stw	ra,8(sp)
  808208:	80000015 	stw	zero,0(r16)
  80820c:	080c8d40 	call	80c8d4 <close>
  808210:	00ffffc4 	movi	r3,-1
  808214:	10c00526 	beq	r2,r3,80822c <_close_r+0x44>
  808218:	dfc00217 	ldw	ra,8(sp)
  80821c:	dc400117 	ldw	r17,4(sp)
  808220:	dc000017 	ldw	r16,0(sp)
  808224:	dec00304 	addi	sp,sp,12
  808228:	f800283a 	ret
  80822c:	80c00017 	ldw	r3,0(r16)
  808230:	183ff926 	beq	r3,zero,808218 <__alt_data_end+0xff808218>
  808234:	88c00015 	stw	r3,0(r17)
  808238:	003ff706 	br	808218 <__alt_data_end+0xff808218>

0080823c <_calloc_r>:
  80823c:	298b383a 	mul	r5,r5,r6
  808240:	defffe04 	addi	sp,sp,-8
  808244:	dc000015 	stw	r16,0(sp)
  808248:	dfc00115 	stw	ra,4(sp)
  80824c:	0804efc0 	call	804efc <_malloc_r>
  808250:	1021883a 	mov	r16,r2
  808254:	10002826 	beq	r2,zero,8082f8 <_calloc_r+0xbc>
  808258:	11bfff17 	ldw	r6,-4(r2)
  80825c:	00bfff04 	movi	r2,-4
  808260:	00c00904 	movi	r3,36
  808264:	308c703a 	and	r6,r6,r2
  808268:	308d883a 	add	r6,r6,r2
  80826c:	19801436 	bltu	r3,r6,8082c0 <_calloc_r+0x84>
  808270:	008004c4 	movi	r2,19
  808274:	11800936 	bltu	r2,r6,80829c <_calloc_r+0x60>
  808278:	8005883a 	mov	r2,r16
  80827c:	10000015 	stw	zero,0(r2)
  808280:	10000115 	stw	zero,4(r2)
  808284:	10000215 	stw	zero,8(r2)
  808288:	8005883a 	mov	r2,r16
  80828c:	dfc00117 	ldw	ra,4(sp)
  808290:	dc000017 	ldw	r16,0(sp)
  808294:	dec00204 	addi	sp,sp,8
  808298:	f800283a 	ret
  80829c:	80000015 	stw	zero,0(r16)
  8082a0:	80000115 	stw	zero,4(r16)
  8082a4:	008006c4 	movi	r2,27
  8082a8:	11800d2e 	bgeu	r2,r6,8082e0 <_calloc_r+0xa4>
  8082ac:	80000215 	stw	zero,8(r16)
  8082b0:	80000315 	stw	zero,12(r16)
  8082b4:	30c00c26 	beq	r6,r3,8082e8 <_calloc_r+0xac>
  8082b8:	80800404 	addi	r2,r16,16
  8082bc:	003fef06 	br	80827c <__alt_data_end+0xff80827c>
  8082c0:	8009883a 	mov	r4,r16
  8082c4:	000b883a 	mov	r5,zero
  8082c8:	08058c40 	call	8058c4 <memset>
  8082cc:	8005883a 	mov	r2,r16
  8082d0:	dfc00117 	ldw	ra,4(sp)
  8082d4:	dc000017 	ldw	r16,0(sp)
  8082d8:	dec00204 	addi	sp,sp,8
  8082dc:	f800283a 	ret
  8082e0:	80800204 	addi	r2,r16,8
  8082e4:	003fe506 	br	80827c <__alt_data_end+0xff80827c>
  8082e8:	80000415 	stw	zero,16(r16)
  8082ec:	80800604 	addi	r2,r16,24
  8082f0:	80000515 	stw	zero,20(r16)
  8082f4:	003fe106 	br	80827c <__alt_data_end+0xff80827c>
  8082f8:	0005883a 	mov	r2,zero
  8082fc:	003fe306 	br	80828c <__alt_data_end+0xff80828c>

00808300 <_fclose_r>:
  808300:	28003926 	beq	r5,zero,8083e8 <_fclose_r+0xe8>
  808304:	defffc04 	addi	sp,sp,-16
  808308:	dc400115 	stw	r17,4(sp)
  80830c:	dc000015 	stw	r16,0(sp)
  808310:	dfc00315 	stw	ra,12(sp)
  808314:	dc800215 	stw	r18,8(sp)
  808318:	2023883a 	mov	r17,r4
  80831c:	2821883a 	mov	r16,r5
  808320:	20000226 	beq	r4,zero,80832c <_fclose_r+0x2c>
  808324:	20800e17 	ldw	r2,56(r4)
  808328:	10002726 	beq	r2,zero,8083c8 <_fclose_r+0xc8>
  80832c:	8080030f 	ldh	r2,12(r16)
  808330:	1000071e 	bne	r2,zero,808350 <_fclose_r+0x50>
  808334:	0005883a 	mov	r2,zero
  808338:	dfc00317 	ldw	ra,12(sp)
  80833c:	dc800217 	ldw	r18,8(sp)
  808340:	dc400117 	ldw	r17,4(sp)
  808344:	dc000017 	ldw	r16,0(sp)
  808348:	dec00404 	addi	sp,sp,16
  80834c:	f800283a 	ret
  808350:	8809883a 	mov	r4,r17
  808354:	800b883a 	mov	r5,r16
  808358:	08040940 	call	804094 <__sflush_r>
  80835c:	1025883a 	mov	r18,r2
  808360:	80800b17 	ldw	r2,44(r16)
  808364:	10000426 	beq	r2,zero,808378 <_fclose_r+0x78>
  808368:	81400717 	ldw	r5,28(r16)
  80836c:	8809883a 	mov	r4,r17
  808370:	103ee83a 	callr	r2
  808374:	10001616 	blt	r2,zero,8083d0 <_fclose_r+0xd0>
  808378:	8080030b 	ldhu	r2,12(r16)
  80837c:	1080200c 	andi	r2,r2,128
  808380:	1000151e 	bne	r2,zero,8083d8 <_fclose_r+0xd8>
  808384:	81400c17 	ldw	r5,48(r16)
  808388:	28000526 	beq	r5,zero,8083a0 <_fclose_r+0xa0>
  80838c:	80801004 	addi	r2,r16,64
  808390:	28800226 	beq	r5,r2,80839c <_fclose_r+0x9c>
  808394:	8809883a 	mov	r4,r17
  808398:	08047ec0 	call	8047ec <_free_r>
  80839c:	80000c15 	stw	zero,48(r16)
  8083a0:	81401117 	ldw	r5,68(r16)
  8083a4:	28000326 	beq	r5,zero,8083b4 <_fclose_r+0xb4>
  8083a8:	8809883a 	mov	r4,r17
  8083ac:	08047ec0 	call	8047ec <_free_r>
  8083b0:	80001115 	stw	zero,68(r16)
  8083b4:	08046880 	call	804688 <__sfp_lock_acquire>
  8083b8:	8000030d 	sth	zero,12(r16)
  8083bc:	080468c0 	call	80468c <__sfp_lock_release>
  8083c0:	9005883a 	mov	r2,r18
  8083c4:	003fdc06 	br	808338 <__alt_data_end+0xff808338>
  8083c8:	08046780 	call	804678 <__sinit>
  8083cc:	003fd706 	br	80832c <__alt_data_end+0xff80832c>
  8083d0:	04bfffc4 	movi	r18,-1
  8083d4:	003fe806 	br	808378 <__alt_data_end+0xff808378>
  8083d8:	81400417 	ldw	r5,16(r16)
  8083dc:	8809883a 	mov	r4,r17
  8083e0:	08047ec0 	call	8047ec <_free_r>
  8083e4:	003fe706 	br	808384 <__alt_data_end+0xff808384>
  8083e8:	0005883a 	mov	r2,zero
  8083ec:	f800283a 	ret

008083f0 <fclose>:
  8083f0:	00802074 	movhi	r2,129
  8083f4:	108b1c04 	addi	r2,r2,11376
  8083f8:	200b883a 	mov	r5,r4
  8083fc:	11000017 	ldw	r4,0(r2)
  808400:	08083001 	jmpi	808300 <_fclose_r>

00808404 <_fputwc_r>:
  808404:	3080030b 	ldhu	r2,12(r6)
  808408:	defff804 	addi	sp,sp,-32
  80840c:	dcc00415 	stw	r19,16(sp)
  808410:	dc800315 	stw	r18,12(sp)
  808414:	dc000115 	stw	r16,4(sp)
  808418:	dfc00715 	stw	ra,28(sp)
  80841c:	dd400615 	stw	r21,24(sp)
  808420:	dd000515 	stw	r20,20(sp)
  808424:	dc400215 	stw	r17,8(sp)
  808428:	10c8000c 	andi	r3,r2,8192
  80842c:	3021883a 	mov	r16,r6
  808430:	2027883a 	mov	r19,r4
  808434:	2825883a 	mov	r18,r5
  808438:	1800051e 	bne	r3,zero,808450 <_fputwc_r+0x4c>
  80843c:	30c01917 	ldw	r3,100(r6)
  808440:	10880014 	ori	r2,r2,8192
  808444:	3080030d 	sth	r2,12(r6)
  808448:	18880014 	ori	r2,r3,8192
  80844c:	30801915 	stw	r2,100(r6)
  808450:	0804cec0 	call	804cec <__locale_mb_cur_max>
  808454:	00c00044 	movi	r3,1
  808458:	10c03e26 	beq	r2,r3,808554 <_fputwc_r+0x150>
  80845c:	9809883a 	mov	r4,r19
  808460:	d80b883a 	mov	r5,sp
  808464:	900d883a 	mov	r6,r18
  808468:	81c01704 	addi	r7,r16,92
  80846c:	08094200 	call	809420 <_wcrtomb_r>
  808470:	1029883a 	mov	r20,r2
  808474:	00bfffc4 	movi	r2,-1
  808478:	a0802026 	beq	r20,r2,8084fc <_fputwc_r+0xf8>
  80847c:	d9400003 	ldbu	r5,0(sp)
  808480:	a0001c26 	beq	r20,zero,8084f4 <_fputwc_r+0xf0>
  808484:	0023883a 	mov	r17,zero
  808488:	05400284 	movi	r21,10
  80848c:	00000906 	br	8084b4 <_fputwc_r+0xb0>
  808490:	80800017 	ldw	r2,0(r16)
  808494:	11400005 	stb	r5,0(r2)
  808498:	80c00017 	ldw	r3,0(r16)
  80849c:	18c00044 	addi	r3,r3,1
  8084a0:	80c00015 	stw	r3,0(r16)
  8084a4:	8c400044 	addi	r17,r17,1
  8084a8:	dc45883a 	add	r2,sp,r17
  8084ac:	8d00112e 	bgeu	r17,r20,8084f4 <_fputwc_r+0xf0>
  8084b0:	11400003 	ldbu	r5,0(r2)
  8084b4:	80c00217 	ldw	r3,8(r16)
  8084b8:	18ffffc4 	addi	r3,r3,-1
  8084bc:	80c00215 	stw	r3,8(r16)
  8084c0:	183ff30e 	bge	r3,zero,808490 <__alt_data_end+0xff808490>
  8084c4:	80800617 	ldw	r2,24(r16)
  8084c8:	18801916 	blt	r3,r2,808530 <_fputwc_r+0x12c>
  8084cc:	80800017 	ldw	r2,0(r16)
  8084d0:	11400005 	stb	r5,0(r2)
  8084d4:	80800017 	ldw	r2,0(r16)
  8084d8:	10c00003 	ldbu	r3,0(r2)
  8084dc:	10800044 	addi	r2,r2,1
  8084e0:	1d402326 	beq	r3,r21,808570 <_fputwc_r+0x16c>
  8084e4:	80800015 	stw	r2,0(r16)
  8084e8:	8c400044 	addi	r17,r17,1
  8084ec:	dc45883a 	add	r2,sp,r17
  8084f0:	8d3fef36 	bltu	r17,r20,8084b0 <__alt_data_end+0xff8084b0>
  8084f4:	9005883a 	mov	r2,r18
  8084f8:	00000406 	br	80850c <_fputwc_r+0x108>
  8084fc:	80c0030b 	ldhu	r3,12(r16)
  808500:	a005883a 	mov	r2,r20
  808504:	18c01014 	ori	r3,r3,64
  808508:	80c0030d 	sth	r3,12(r16)
  80850c:	dfc00717 	ldw	ra,28(sp)
  808510:	dd400617 	ldw	r21,24(sp)
  808514:	dd000517 	ldw	r20,20(sp)
  808518:	dcc00417 	ldw	r19,16(sp)
  80851c:	dc800317 	ldw	r18,12(sp)
  808520:	dc400217 	ldw	r17,8(sp)
  808524:	dc000117 	ldw	r16,4(sp)
  808528:	dec00804 	addi	sp,sp,32
  80852c:	f800283a 	ret
  808530:	9809883a 	mov	r4,r19
  808534:	29403fcc 	andi	r5,r5,255
  808538:	800d883a 	mov	r6,r16
  80853c:	08092cc0 	call	8092cc <__swbuf_r>
  808540:	10bfffe0 	cmpeqi	r2,r2,-1
  808544:	10803fcc 	andi	r2,r2,255
  808548:	103fd626 	beq	r2,zero,8084a4 <__alt_data_end+0xff8084a4>
  80854c:	00bfffc4 	movi	r2,-1
  808550:	003fee06 	br	80850c <__alt_data_end+0xff80850c>
  808554:	90ffffc4 	addi	r3,r18,-1
  808558:	01003f84 	movi	r4,254
  80855c:	20ffbf36 	bltu	r4,r3,80845c <__alt_data_end+0xff80845c>
  808560:	900b883a 	mov	r5,r18
  808564:	dc800005 	stb	r18,0(sp)
  808568:	1029883a 	mov	r20,r2
  80856c:	003fc506 	br	808484 <__alt_data_end+0xff808484>
  808570:	9809883a 	mov	r4,r19
  808574:	a80b883a 	mov	r5,r21
  808578:	800d883a 	mov	r6,r16
  80857c:	08092cc0 	call	8092cc <__swbuf_r>
  808580:	10bfffe0 	cmpeqi	r2,r2,-1
  808584:	003fef06 	br	808544 <__alt_data_end+0xff808544>

00808588 <fputwc>:
  808588:	00802074 	movhi	r2,129
  80858c:	defffc04 	addi	sp,sp,-16
  808590:	108b1c04 	addi	r2,r2,11376
  808594:	dc000115 	stw	r16,4(sp)
  808598:	14000017 	ldw	r16,0(r2)
  80859c:	dc400215 	stw	r17,8(sp)
  8085a0:	dfc00315 	stw	ra,12(sp)
  8085a4:	2023883a 	mov	r17,r4
  8085a8:	280d883a 	mov	r6,r5
  8085ac:	80000626 	beq	r16,zero,8085c8 <fputwc+0x40>
  8085b0:	80800e17 	ldw	r2,56(r16)
  8085b4:	1000041e 	bne	r2,zero,8085c8 <fputwc+0x40>
  8085b8:	8009883a 	mov	r4,r16
  8085bc:	d9400015 	stw	r5,0(sp)
  8085c0:	08046780 	call	804678 <__sinit>
  8085c4:	d9800017 	ldw	r6,0(sp)
  8085c8:	8009883a 	mov	r4,r16
  8085cc:	880b883a 	mov	r5,r17
  8085d0:	dfc00317 	ldw	ra,12(sp)
  8085d4:	dc400217 	ldw	r17,8(sp)
  8085d8:	dc000117 	ldw	r16,4(sp)
  8085dc:	dec00404 	addi	sp,sp,16
  8085e0:	08084041 	jmpi	808404 <_fputwc_r>

008085e4 <_fstat_r>:
  8085e4:	defffd04 	addi	sp,sp,-12
  8085e8:	dc000015 	stw	r16,0(sp)
  8085ec:	04002074 	movhi	r16,129
  8085f0:	dc400115 	stw	r17,4(sp)
  8085f4:	84128204 	addi	r16,r16,18952
  8085f8:	2023883a 	mov	r17,r4
  8085fc:	2809883a 	mov	r4,r5
  808600:	300b883a 	mov	r5,r6
  808604:	dfc00215 	stw	ra,8(sp)
  808608:	80000015 	stw	zero,0(r16)
  80860c:	080ca200 	call	80ca20 <fstat>
  808610:	00ffffc4 	movi	r3,-1
  808614:	10c00526 	beq	r2,r3,80862c <_fstat_r+0x48>
  808618:	dfc00217 	ldw	ra,8(sp)
  80861c:	dc400117 	ldw	r17,4(sp)
  808620:	dc000017 	ldw	r16,0(sp)
  808624:	dec00304 	addi	sp,sp,12
  808628:	f800283a 	ret
  80862c:	80c00017 	ldw	r3,0(r16)
  808630:	183ff926 	beq	r3,zero,808618 <__alt_data_end+0xff808618>
  808634:	88c00015 	stw	r3,0(r17)
  808638:	003ff706 	br	808618 <__alt_data_end+0xff808618>

0080863c <__sfvwrite_r>:
  80863c:	30800217 	ldw	r2,8(r6)
  808640:	10006726 	beq	r2,zero,8087e0 <__sfvwrite_r+0x1a4>
  808644:	defff404 	addi	sp,sp,-48
  808648:	dd000615 	stw	r20,24(sp)
  80864c:	2029883a 	mov	r20,r4
  808650:	2900030b 	ldhu	r4,12(r5)
  808654:	ddc00915 	stw	r23,36(sp)
  808658:	dc000215 	stw	r16,8(sp)
  80865c:	dfc00b15 	stw	ra,44(sp)
  808660:	df000a15 	stw	fp,40(sp)
  808664:	dd800815 	stw	r22,32(sp)
  808668:	dd400715 	stw	r21,28(sp)
  80866c:	dcc00515 	stw	r19,20(sp)
  808670:	dc800415 	stw	r18,16(sp)
  808674:	dc400315 	stw	r17,12(sp)
  808678:	2080020c 	andi	r2,r4,8
  80867c:	2821883a 	mov	r16,r5
  808680:	302f883a 	mov	r23,r6
  808684:	10002726 	beq	r2,zero,808724 <__sfvwrite_r+0xe8>
  808688:	28800417 	ldw	r2,16(r5)
  80868c:	10002526 	beq	r2,zero,808724 <__sfvwrite_r+0xe8>
  808690:	2080008c 	andi	r2,r4,2
  808694:	bc400017 	ldw	r17,0(r23)
  808698:	10002a26 	beq	r2,zero,808744 <__sfvwrite_r+0x108>
  80869c:	05600034 	movhi	r21,32768
  8086a0:	0027883a 	mov	r19,zero
  8086a4:	0025883a 	mov	r18,zero
  8086a8:	ad7f0004 	addi	r21,r21,-1024
  8086ac:	980d883a 	mov	r6,r19
  8086b0:	a009883a 	mov	r4,r20
  8086b4:	90004626 	beq	r18,zero,8087d0 <__sfvwrite_r+0x194>
  8086b8:	900f883a 	mov	r7,r18
  8086bc:	81400717 	ldw	r5,28(r16)
  8086c0:	ac80022e 	bgeu	r21,r18,8086cc <__sfvwrite_r+0x90>
  8086c4:	01e00034 	movhi	r7,32768
  8086c8:	39ff0004 	addi	r7,r7,-1024
  8086cc:	80800917 	ldw	r2,36(r16)
  8086d0:	103ee83a 	callr	r2
  8086d4:	0080520e 	bge	zero,r2,808820 <__sfvwrite_r+0x1e4>
  8086d8:	b8c00217 	ldw	r3,8(r23)
  8086dc:	98a7883a 	add	r19,r19,r2
  8086e0:	90a5c83a 	sub	r18,r18,r2
  8086e4:	1885c83a 	sub	r2,r3,r2
  8086e8:	b8800215 	stw	r2,8(r23)
  8086ec:	103fef1e 	bne	r2,zero,8086ac <__alt_data_end+0xff8086ac>
  8086f0:	0005883a 	mov	r2,zero
  8086f4:	dfc00b17 	ldw	ra,44(sp)
  8086f8:	df000a17 	ldw	fp,40(sp)
  8086fc:	ddc00917 	ldw	r23,36(sp)
  808700:	dd800817 	ldw	r22,32(sp)
  808704:	dd400717 	ldw	r21,28(sp)
  808708:	dd000617 	ldw	r20,24(sp)
  80870c:	dcc00517 	ldw	r19,20(sp)
  808710:	dc800417 	ldw	r18,16(sp)
  808714:	dc400317 	ldw	r17,12(sp)
  808718:	dc000217 	ldw	r16,8(sp)
  80871c:	dec00c04 	addi	sp,sp,48
  808720:	f800283a 	ret
  808724:	a009883a 	mov	r4,r20
  808728:	800b883a 	mov	r5,r16
  80872c:	08026180 	call	802618 <__swsetup_r>
  808730:	1000ec1e 	bne	r2,zero,808ae4 <__sfvwrite_r+0x4a8>
  808734:	8100030b 	ldhu	r4,12(r16)
  808738:	bc400017 	ldw	r17,0(r23)
  80873c:	2080008c 	andi	r2,r4,2
  808740:	103fd61e 	bne	r2,zero,80869c <__alt_data_end+0xff80869c>
  808744:	2080004c 	andi	r2,r4,1
  808748:	10003a1e 	bne	r2,zero,808834 <__sfvwrite_r+0x1f8>
  80874c:	0039883a 	mov	fp,zero
  808750:	0025883a 	mov	r18,zero
  808754:	90001a26 	beq	r18,zero,8087c0 <__sfvwrite_r+0x184>
  808758:	2080800c 	andi	r2,r4,512
  80875c:	85800217 	ldw	r22,8(r16)
  808760:	10007626 	beq	r2,zero,80893c <__sfvwrite_r+0x300>
  808764:	b027883a 	mov	r19,r22
  808768:	95809436 	bltu	r18,r22,8089bc <__sfvwrite_r+0x380>
  80876c:	2081200c 	andi	r2,r4,1152
  808770:	10009f1e 	bne	r2,zero,8089f0 <__sfvwrite_r+0x3b4>
  808774:	81000017 	ldw	r4,0(r16)
  808778:	e00b883a 	mov	r5,fp
  80877c:	980d883a 	mov	r6,r19
  808780:	0808bac0 	call	808bac <memmove>
  808784:	81000217 	ldw	r4,8(r16)
  808788:	81400017 	ldw	r5,0(r16)
  80878c:	9005883a 	mov	r2,r18
  808790:	2587c83a 	sub	r3,r4,r22
  808794:	2ce7883a 	add	r19,r5,r19
  808798:	80c00215 	stw	r3,8(r16)
  80879c:	84c00015 	stw	r19,0(r16)
  8087a0:	b8c00217 	ldw	r3,8(r23)
  8087a4:	e0b9883a 	add	fp,fp,r2
  8087a8:	90a5c83a 	sub	r18,r18,r2
  8087ac:	1885c83a 	sub	r2,r3,r2
  8087b0:	b8800215 	stw	r2,8(r23)
  8087b4:	103fce26 	beq	r2,zero,8086f0 <__alt_data_end+0xff8086f0>
  8087b8:	8100030b 	ldhu	r4,12(r16)
  8087bc:	903fe61e 	bne	r18,zero,808758 <__alt_data_end+0xff808758>
  8087c0:	8f000017 	ldw	fp,0(r17)
  8087c4:	8c800117 	ldw	r18,4(r17)
  8087c8:	8c400204 	addi	r17,r17,8
  8087cc:	003fe106 	br	808754 <__alt_data_end+0xff808754>
  8087d0:	8cc00017 	ldw	r19,0(r17)
  8087d4:	8c800117 	ldw	r18,4(r17)
  8087d8:	8c400204 	addi	r17,r17,8
  8087dc:	003fb306 	br	8086ac <__alt_data_end+0xff8086ac>
  8087e0:	0005883a 	mov	r2,zero
  8087e4:	f800283a 	ret
  8087e8:	00a00034 	movhi	r2,32768
  8087ec:	10bfffc4 	addi	r2,r2,-1
  8087f0:	9009883a 	mov	r4,r18
  8087f4:	1480012e 	bgeu	r2,r18,8087fc <__sfvwrite_r+0x1c0>
  8087f8:	1009883a 	mov	r4,r2
  8087fc:	980b883a 	mov	r5,r19
  808800:	080a1c40 	call	80a1c4 <__divsi3>
  808804:	81400717 	ldw	r5,28(r16)
  808808:	80c00917 	ldw	r3,36(r16)
  80880c:	988f383a 	mul	r7,r19,r2
  808810:	a009883a 	mov	r4,r20
  808814:	e00d883a 	mov	r6,fp
  808818:	183ee83a 	callr	r3
  80881c:	00bfe016 	blt	zero,r2,8087a0 <__alt_data_end+0xff8087a0>
  808820:	8080030b 	ldhu	r2,12(r16)
  808824:	10801014 	ori	r2,r2,64
  808828:	8080030d 	sth	r2,12(r16)
  80882c:	00bfffc4 	movi	r2,-1
  808830:	003fb006 	br	8086f4 <__alt_data_end+0xff8086f4>
  808834:	0027883a 	mov	r19,zero
  808838:	0011883a 	mov	r8,zero
  80883c:	0039883a 	mov	fp,zero
  808840:	0025883a 	mov	r18,zero
  808844:	90001f26 	beq	r18,zero,8088c4 <__sfvwrite_r+0x288>
  808848:	40006026 	beq	r8,zero,8089cc <__sfvwrite_r+0x390>
  80884c:	982b883a 	mov	r21,r19
  808850:	94c0012e 	bgeu	r18,r19,808858 <__sfvwrite_r+0x21c>
  808854:	902b883a 	mov	r21,r18
  808858:	81000017 	ldw	r4,0(r16)
  80885c:	80800417 	ldw	r2,16(r16)
  808860:	a82d883a 	mov	r22,r21
  808864:	81800217 	ldw	r6,8(r16)
  808868:	81c00517 	ldw	r7,20(r16)
  80886c:	1100022e 	bgeu	r2,r4,808878 <__sfvwrite_r+0x23c>
  808870:	31c7883a 	add	r3,r6,r7
  808874:	1d401816 	blt	r3,r21,8088d8 <__sfvwrite_r+0x29c>
  808878:	a9c04416 	blt	r21,r7,80898c <__sfvwrite_r+0x350>
  80887c:	80800917 	ldw	r2,36(r16)
  808880:	81400717 	ldw	r5,28(r16)
  808884:	a009883a 	mov	r4,r20
  808888:	da000115 	stw	r8,4(sp)
  80888c:	e00d883a 	mov	r6,fp
  808890:	103ee83a 	callr	r2
  808894:	102d883a 	mov	r22,r2
  808898:	da000117 	ldw	r8,4(sp)
  80889c:	00bfe00e 	bge	zero,r2,808820 <__alt_data_end+0xff808820>
  8088a0:	9da7c83a 	sub	r19,r19,r22
  8088a4:	98001f26 	beq	r19,zero,808924 <__sfvwrite_r+0x2e8>
  8088a8:	b8800217 	ldw	r2,8(r23)
  8088ac:	e5b9883a 	add	fp,fp,r22
  8088b0:	95a5c83a 	sub	r18,r18,r22
  8088b4:	15adc83a 	sub	r22,r2,r22
  8088b8:	bd800215 	stw	r22,8(r23)
  8088bc:	b03f8c26 	beq	r22,zero,8086f0 <__alt_data_end+0xff8086f0>
  8088c0:	903fe11e 	bne	r18,zero,808848 <__alt_data_end+0xff808848>
  8088c4:	8f000017 	ldw	fp,0(r17)
  8088c8:	8c800117 	ldw	r18,4(r17)
  8088cc:	0011883a 	mov	r8,zero
  8088d0:	8c400204 	addi	r17,r17,8
  8088d4:	003fdb06 	br	808844 <__alt_data_end+0xff808844>
  8088d8:	180d883a 	mov	r6,r3
  8088dc:	e00b883a 	mov	r5,fp
  8088e0:	da000115 	stw	r8,4(sp)
  8088e4:	d8c00015 	stw	r3,0(sp)
  8088e8:	0808bac0 	call	808bac <memmove>
  8088ec:	d8c00017 	ldw	r3,0(sp)
  8088f0:	80800017 	ldw	r2,0(r16)
  8088f4:	a009883a 	mov	r4,r20
  8088f8:	800b883a 	mov	r5,r16
  8088fc:	10c5883a 	add	r2,r2,r3
  808900:	80800015 	stw	r2,0(r16)
  808904:	d8c00015 	stw	r3,0(sp)
  808908:	080429c0 	call	80429c <_fflush_r>
  80890c:	d8c00017 	ldw	r3,0(sp)
  808910:	da000117 	ldw	r8,4(sp)
  808914:	103fc21e 	bne	r2,zero,808820 <__alt_data_end+0xff808820>
  808918:	182d883a 	mov	r22,r3
  80891c:	9da7c83a 	sub	r19,r19,r22
  808920:	983fe11e 	bne	r19,zero,8088a8 <__alt_data_end+0xff8088a8>
  808924:	a009883a 	mov	r4,r20
  808928:	800b883a 	mov	r5,r16
  80892c:	080429c0 	call	80429c <_fflush_r>
  808930:	103fbb1e 	bne	r2,zero,808820 <__alt_data_end+0xff808820>
  808934:	0011883a 	mov	r8,zero
  808938:	003fdb06 	br	8088a8 <__alt_data_end+0xff8088a8>
  80893c:	81000017 	ldw	r4,0(r16)
  808940:	80800417 	ldw	r2,16(r16)
  808944:	11000236 	bltu	r2,r4,808950 <__sfvwrite_r+0x314>
  808948:	84c00517 	ldw	r19,20(r16)
  80894c:	94ffa62e 	bgeu	r18,r19,8087e8 <__alt_data_end+0xff8087e8>
  808950:	9027883a 	mov	r19,r18
  808954:	b480012e 	bgeu	r22,r18,80895c <__sfvwrite_r+0x320>
  808958:	b027883a 	mov	r19,r22
  80895c:	e00b883a 	mov	r5,fp
  808960:	980d883a 	mov	r6,r19
  808964:	0808bac0 	call	808bac <memmove>
  808968:	80800217 	ldw	r2,8(r16)
  80896c:	80c00017 	ldw	r3,0(r16)
  808970:	14c5c83a 	sub	r2,r2,r19
  808974:	1cc7883a 	add	r3,r3,r19
  808978:	80800215 	stw	r2,8(r16)
  80897c:	80c00015 	stw	r3,0(r16)
  808980:	10004326 	beq	r2,zero,808a90 <__sfvwrite_r+0x454>
  808984:	9805883a 	mov	r2,r19
  808988:	003f8506 	br	8087a0 <__alt_data_end+0xff8087a0>
  80898c:	a80d883a 	mov	r6,r21
  808990:	e00b883a 	mov	r5,fp
  808994:	da000115 	stw	r8,4(sp)
  808998:	0808bac0 	call	808bac <memmove>
  80899c:	80800217 	ldw	r2,8(r16)
  8089a0:	80c00017 	ldw	r3,0(r16)
  8089a4:	da000117 	ldw	r8,4(sp)
  8089a8:	1545c83a 	sub	r2,r2,r21
  8089ac:	1d6b883a 	add	r21,r3,r21
  8089b0:	80800215 	stw	r2,8(r16)
  8089b4:	85400015 	stw	r21,0(r16)
  8089b8:	003fb906 	br	8088a0 <__alt_data_end+0xff8088a0>
  8089bc:	81000017 	ldw	r4,0(r16)
  8089c0:	902d883a 	mov	r22,r18
  8089c4:	9027883a 	mov	r19,r18
  8089c8:	003f6b06 	br	808778 <__alt_data_end+0xff808778>
  8089cc:	e009883a 	mov	r4,fp
  8089d0:	01400284 	movi	r5,10
  8089d4:	900d883a 	mov	r6,r18
  8089d8:	08056a40 	call	8056a4 <memchr>
  8089dc:	10003e26 	beq	r2,zero,808ad8 <__sfvwrite_r+0x49c>
  8089e0:	10800044 	addi	r2,r2,1
  8089e4:	1727c83a 	sub	r19,r2,fp
  8089e8:	02000044 	movi	r8,1
  8089ec:	003f9706 	br	80884c <__alt_data_end+0xff80884c>
  8089f0:	80800517 	ldw	r2,20(r16)
  8089f4:	81400417 	ldw	r5,16(r16)
  8089f8:	80c00017 	ldw	r3,0(r16)
  8089fc:	10a7883a 	add	r19,r2,r2
  808a00:	9885883a 	add	r2,r19,r2
  808a04:	1026d7fa 	srli	r19,r2,31
  808a08:	196bc83a 	sub	r21,r3,r5
  808a0c:	a9800044 	addi	r6,r21,1
  808a10:	9885883a 	add	r2,r19,r2
  808a14:	1027d07a 	srai	r19,r2,1
  808a18:	3485883a 	add	r2,r6,r18
  808a1c:	980d883a 	mov	r6,r19
  808a20:	9880022e 	bgeu	r19,r2,808a2c <__sfvwrite_r+0x3f0>
  808a24:	1027883a 	mov	r19,r2
  808a28:	100d883a 	mov	r6,r2
  808a2c:	2101000c 	andi	r4,r4,1024
  808a30:	20001c26 	beq	r4,zero,808aa4 <__sfvwrite_r+0x468>
  808a34:	a009883a 	mov	r4,r20
  808a38:	300b883a 	mov	r5,r6
  808a3c:	0804efc0 	call	804efc <_malloc_r>
  808a40:	102d883a 	mov	r22,r2
  808a44:	10002926 	beq	r2,zero,808aec <__sfvwrite_r+0x4b0>
  808a48:	81400417 	ldw	r5,16(r16)
  808a4c:	1009883a 	mov	r4,r2
  808a50:	a80d883a 	mov	r6,r21
  808a54:	080578c0 	call	80578c <memcpy>
  808a58:	8080030b 	ldhu	r2,12(r16)
  808a5c:	00fedfc4 	movi	r3,-1153
  808a60:	10c4703a 	and	r2,r2,r3
  808a64:	10802014 	ori	r2,r2,128
  808a68:	8080030d 	sth	r2,12(r16)
  808a6c:	b549883a 	add	r4,r22,r21
  808a70:	9d4bc83a 	sub	r5,r19,r21
  808a74:	85800415 	stw	r22,16(r16)
  808a78:	84c00515 	stw	r19,20(r16)
  808a7c:	81000015 	stw	r4,0(r16)
  808a80:	902d883a 	mov	r22,r18
  808a84:	81400215 	stw	r5,8(r16)
  808a88:	9027883a 	mov	r19,r18
  808a8c:	003f3a06 	br	808778 <__alt_data_end+0xff808778>
  808a90:	a009883a 	mov	r4,r20
  808a94:	800b883a 	mov	r5,r16
  808a98:	080429c0 	call	80429c <_fflush_r>
  808a9c:	103fb926 	beq	r2,zero,808984 <__alt_data_end+0xff808984>
  808aa0:	003f5f06 	br	808820 <__alt_data_end+0xff808820>
  808aa4:	a009883a 	mov	r4,r20
  808aa8:	0808d640 	call	808d64 <_realloc_r>
  808aac:	102d883a 	mov	r22,r2
  808ab0:	103fee1e 	bne	r2,zero,808a6c <__alt_data_end+0xff808a6c>
  808ab4:	81400417 	ldw	r5,16(r16)
  808ab8:	a009883a 	mov	r4,r20
  808abc:	08047ec0 	call	8047ec <_free_r>
  808ac0:	8080030b 	ldhu	r2,12(r16)
  808ac4:	00ffdfc4 	movi	r3,-129
  808ac8:	1884703a 	and	r2,r3,r2
  808acc:	00c00304 	movi	r3,12
  808ad0:	a0c00015 	stw	r3,0(r20)
  808ad4:	003f5306 	br	808824 <__alt_data_end+0xff808824>
  808ad8:	94c00044 	addi	r19,r18,1
  808adc:	02000044 	movi	r8,1
  808ae0:	003f5a06 	br	80884c <__alt_data_end+0xff80884c>
  808ae4:	00bfffc4 	movi	r2,-1
  808ae8:	003f0206 	br	8086f4 <__alt_data_end+0xff8086f4>
  808aec:	00800304 	movi	r2,12
  808af0:	a0800015 	stw	r2,0(r20)
  808af4:	8080030b 	ldhu	r2,12(r16)
  808af8:	003f4a06 	br	808824 <__alt_data_end+0xff808824>

00808afc <_isatty_r>:
  808afc:	defffd04 	addi	sp,sp,-12
  808b00:	dc000015 	stw	r16,0(sp)
  808b04:	04002074 	movhi	r16,129
  808b08:	dc400115 	stw	r17,4(sp)
  808b0c:	84128204 	addi	r16,r16,18952
  808b10:	2023883a 	mov	r17,r4
  808b14:	2809883a 	mov	r4,r5
  808b18:	dfc00215 	stw	ra,8(sp)
  808b1c:	80000015 	stw	zero,0(r16)
  808b20:	080cb200 	call	80cb20 <isatty>
  808b24:	00ffffc4 	movi	r3,-1
  808b28:	10c00526 	beq	r2,r3,808b40 <_isatty_r+0x44>
  808b2c:	dfc00217 	ldw	ra,8(sp)
  808b30:	dc400117 	ldw	r17,4(sp)
  808b34:	dc000017 	ldw	r16,0(sp)
  808b38:	dec00304 	addi	sp,sp,12
  808b3c:	f800283a 	ret
  808b40:	80c00017 	ldw	r3,0(r16)
  808b44:	183ff926 	beq	r3,zero,808b2c <__alt_data_end+0xff808b2c>
  808b48:	88c00015 	stw	r3,0(r17)
  808b4c:	003ff706 	br	808b2c <__alt_data_end+0xff808b2c>

00808b50 <_lseek_r>:
  808b50:	defffd04 	addi	sp,sp,-12
  808b54:	dc000015 	stw	r16,0(sp)
  808b58:	04002074 	movhi	r16,129
  808b5c:	dc400115 	stw	r17,4(sp)
  808b60:	84128204 	addi	r16,r16,18952
  808b64:	2023883a 	mov	r17,r4
  808b68:	2809883a 	mov	r4,r5
  808b6c:	300b883a 	mov	r5,r6
  808b70:	380d883a 	mov	r6,r7
  808b74:	dfc00215 	stw	ra,8(sp)
  808b78:	80000015 	stw	zero,0(r16)
  808b7c:	080ccf80 	call	80ccf8 <lseek>
  808b80:	00ffffc4 	movi	r3,-1
  808b84:	10c00526 	beq	r2,r3,808b9c <_lseek_r+0x4c>
  808b88:	dfc00217 	ldw	ra,8(sp)
  808b8c:	dc400117 	ldw	r17,4(sp)
  808b90:	dc000017 	ldw	r16,0(sp)
  808b94:	dec00304 	addi	sp,sp,12
  808b98:	f800283a 	ret
  808b9c:	80c00017 	ldw	r3,0(r16)
  808ba0:	183ff926 	beq	r3,zero,808b88 <__alt_data_end+0xff808b88>
  808ba4:	88c00015 	stw	r3,0(r17)
  808ba8:	003ff706 	br	808b88 <__alt_data_end+0xff808b88>

00808bac <memmove>:
  808bac:	2005883a 	mov	r2,r4
  808bb0:	29000b2e 	bgeu	r5,r4,808be0 <memmove+0x34>
  808bb4:	298f883a 	add	r7,r5,r6
  808bb8:	21c0092e 	bgeu	r4,r7,808be0 <memmove+0x34>
  808bbc:	2187883a 	add	r3,r4,r6
  808bc0:	198bc83a 	sub	r5,r3,r6
  808bc4:	30004b26 	beq	r6,zero,808cf4 <memmove+0x148>
  808bc8:	39ffffc4 	addi	r7,r7,-1
  808bcc:	39000003 	ldbu	r4,0(r7)
  808bd0:	18ffffc4 	addi	r3,r3,-1
  808bd4:	19000005 	stb	r4,0(r3)
  808bd8:	197ffb1e 	bne	r3,r5,808bc8 <__alt_data_end+0xff808bc8>
  808bdc:	f800283a 	ret
  808be0:	00c003c4 	movi	r3,15
  808be4:	1980412e 	bgeu	r3,r6,808cec <memmove+0x140>
  808be8:	1146b03a 	or	r3,r2,r5
  808bec:	18c000cc 	andi	r3,r3,3
  808bf0:	1800411e 	bne	r3,zero,808cf8 <memmove+0x14c>
  808bf4:	33fffc04 	addi	r15,r6,-16
  808bf8:	781ed13a 	srli	r15,r15,4
  808bfc:	28c00104 	addi	r3,r5,4
  808c00:	13400104 	addi	r13,r2,4
  808c04:	781c913a 	slli	r14,r15,4
  808c08:	2b000204 	addi	r12,r5,8
  808c0c:	12c00204 	addi	r11,r2,8
  808c10:	73800504 	addi	r14,r14,20
  808c14:	2a800304 	addi	r10,r5,12
  808c18:	12400304 	addi	r9,r2,12
  808c1c:	2b9d883a 	add	r14,r5,r14
  808c20:	2811883a 	mov	r8,r5
  808c24:	100f883a 	mov	r7,r2
  808c28:	41000017 	ldw	r4,0(r8)
  808c2c:	39c00404 	addi	r7,r7,16
  808c30:	18c00404 	addi	r3,r3,16
  808c34:	393ffc15 	stw	r4,-16(r7)
  808c38:	193ffc17 	ldw	r4,-16(r3)
  808c3c:	6b400404 	addi	r13,r13,16
  808c40:	5ac00404 	addi	r11,r11,16
  808c44:	693ffc15 	stw	r4,-16(r13)
  808c48:	61000017 	ldw	r4,0(r12)
  808c4c:	4a400404 	addi	r9,r9,16
  808c50:	42000404 	addi	r8,r8,16
  808c54:	593ffc15 	stw	r4,-16(r11)
  808c58:	51000017 	ldw	r4,0(r10)
  808c5c:	63000404 	addi	r12,r12,16
  808c60:	52800404 	addi	r10,r10,16
  808c64:	493ffc15 	stw	r4,-16(r9)
  808c68:	1bbfef1e 	bne	r3,r14,808c28 <__alt_data_end+0xff808c28>
  808c6c:	79000044 	addi	r4,r15,1
  808c70:	2008913a 	slli	r4,r4,4
  808c74:	328003cc 	andi	r10,r6,15
  808c78:	02c000c4 	movi	r11,3
  808c7c:	1107883a 	add	r3,r2,r4
  808c80:	290b883a 	add	r5,r5,r4
  808c84:	5a801e2e 	bgeu	r11,r10,808d00 <memmove+0x154>
  808c88:	1813883a 	mov	r9,r3
  808c8c:	2811883a 	mov	r8,r5
  808c90:	500f883a 	mov	r7,r10
  808c94:	41000017 	ldw	r4,0(r8)
  808c98:	4a400104 	addi	r9,r9,4
  808c9c:	39ffff04 	addi	r7,r7,-4
  808ca0:	493fff15 	stw	r4,-4(r9)
  808ca4:	42000104 	addi	r8,r8,4
  808ca8:	59fffa36 	bltu	r11,r7,808c94 <__alt_data_end+0xff808c94>
  808cac:	513fff04 	addi	r4,r10,-4
  808cb0:	2008d0ba 	srli	r4,r4,2
  808cb4:	318000cc 	andi	r6,r6,3
  808cb8:	21000044 	addi	r4,r4,1
  808cbc:	2109883a 	add	r4,r4,r4
  808cc0:	2109883a 	add	r4,r4,r4
  808cc4:	1907883a 	add	r3,r3,r4
  808cc8:	290b883a 	add	r5,r5,r4
  808ccc:	30000926 	beq	r6,zero,808cf4 <memmove+0x148>
  808cd0:	198d883a 	add	r6,r3,r6
  808cd4:	29c00003 	ldbu	r7,0(r5)
  808cd8:	18c00044 	addi	r3,r3,1
  808cdc:	29400044 	addi	r5,r5,1
  808ce0:	19ffffc5 	stb	r7,-1(r3)
  808ce4:	19bffb1e 	bne	r3,r6,808cd4 <__alt_data_end+0xff808cd4>
  808ce8:	f800283a 	ret
  808cec:	1007883a 	mov	r3,r2
  808cf0:	003ff606 	br	808ccc <__alt_data_end+0xff808ccc>
  808cf4:	f800283a 	ret
  808cf8:	1007883a 	mov	r3,r2
  808cfc:	003ff406 	br	808cd0 <__alt_data_end+0xff808cd0>
  808d00:	500d883a 	mov	r6,r10
  808d04:	003ff106 	br	808ccc <__alt_data_end+0xff808ccc>

00808d08 <_read_r>:
  808d08:	defffd04 	addi	sp,sp,-12
  808d0c:	dc000015 	stw	r16,0(sp)
  808d10:	04002074 	movhi	r16,129
  808d14:	dc400115 	stw	r17,4(sp)
  808d18:	84128204 	addi	r16,r16,18952
  808d1c:	2023883a 	mov	r17,r4
  808d20:	2809883a 	mov	r4,r5
  808d24:	300b883a 	mov	r5,r6
  808d28:	380d883a 	mov	r6,r7
  808d2c:	dfc00215 	stw	ra,8(sp)
  808d30:	80000015 	stw	zero,0(r16)
  808d34:	080ced40 	call	80ced4 <read>
  808d38:	00ffffc4 	movi	r3,-1
  808d3c:	10c00526 	beq	r2,r3,808d54 <_read_r+0x4c>
  808d40:	dfc00217 	ldw	ra,8(sp)
  808d44:	dc400117 	ldw	r17,4(sp)
  808d48:	dc000017 	ldw	r16,0(sp)
  808d4c:	dec00304 	addi	sp,sp,12
  808d50:	f800283a 	ret
  808d54:	80c00017 	ldw	r3,0(r16)
  808d58:	183ff926 	beq	r3,zero,808d40 <__alt_data_end+0xff808d40>
  808d5c:	88c00015 	stw	r3,0(r17)
  808d60:	003ff706 	br	808d40 <__alt_data_end+0xff808d40>

00808d64 <_realloc_r>:
  808d64:	defff604 	addi	sp,sp,-40
  808d68:	dd000415 	stw	r20,16(sp)
  808d6c:	dc400115 	stw	r17,4(sp)
  808d70:	dfc00915 	stw	ra,36(sp)
  808d74:	df000815 	stw	fp,32(sp)
  808d78:	ddc00715 	stw	r23,28(sp)
  808d7c:	dd800615 	stw	r22,24(sp)
  808d80:	dd400515 	stw	r21,20(sp)
  808d84:	dcc00315 	stw	r19,12(sp)
  808d88:	dc800215 	stw	r18,8(sp)
  808d8c:	dc000015 	stw	r16,0(sp)
  808d90:	2829883a 	mov	r20,r5
  808d94:	3023883a 	mov	r17,r6
  808d98:	2800ad26 	beq	r5,zero,809050 <_realloc_r+0x2ec>
  808d9c:	2025883a 	mov	r18,r4
  808da0:	080ce440 	call	80ce44 <__malloc_lock>
  808da4:	a0ffff17 	ldw	r3,-4(r20)
  808da8:	043fff04 	movi	r16,-4
  808dac:	890002c4 	addi	r4,r17,11
  808db0:	01c00584 	movi	r7,22
  808db4:	a57ffe04 	addi	r21,r20,-8
  808db8:	1c20703a 	and	r16,r3,r16
  808dbc:	39001d2e 	bgeu	r7,r4,808e34 <_realloc_r+0xd0>
  808dc0:	05bffe04 	movi	r22,-8
  808dc4:	25ac703a 	and	r22,r4,r22
  808dc8:	b00f883a 	mov	r7,r22
  808dcc:	b0006516 	blt	r22,zero,808f64 <_realloc_r+0x200>
  808dd0:	b4406436 	bltu	r22,r17,808f64 <_realloc_r+0x200>
  808dd4:	81c01a0e 	bge	r16,r7,808e40 <_realloc_r+0xdc>
  808dd8:	07002074 	movhi	fp,129
  808ddc:	e7050604 	addi	fp,fp,5144
  808de0:	e1400217 	ldw	r5,8(fp)
  808de4:	ac11883a 	add	r8,r21,r16
  808de8:	2a006226 	beq	r5,r8,808f74 <_realloc_r+0x210>
  808dec:	41800117 	ldw	r6,4(r8)
  808df0:	027fff84 	movi	r9,-2
  808df4:	3252703a 	and	r9,r6,r9
  808df8:	4253883a 	add	r9,r8,r9
  808dfc:	49000117 	ldw	r4,4(r9)
  808e00:	2100004c 	andi	r4,r4,1
  808e04:	2000281e 	bne	r4,zero,808ea8 <_realloc_r+0x144>
  808e08:	00bfff04 	movi	r2,-4
  808e0c:	3084703a 	and	r2,r6,r2
  808e10:	1409883a 	add	r4,r2,r16
  808e14:	21c05e16 	blt	r4,r7,808f90 <_realloc_r+0x22c>
  808e18:	40800317 	ldw	r2,12(r8)
  808e1c:	41400217 	ldw	r5,8(r8)
  808e20:	a023883a 	mov	r17,r20
  808e24:	2021883a 	mov	r16,r4
  808e28:	28800315 	stw	r2,12(r5)
  808e2c:	11400215 	stw	r5,8(r2)
  808e30:	00000406 	br	808e44 <_realloc_r+0xe0>
  808e34:	01c00404 	movi	r7,16
  808e38:	382d883a 	mov	r22,r7
  808e3c:	003fe406 	br	808dd0 <__alt_data_end+0xff808dd0>
  808e40:	a023883a 	mov	r17,r20
  808e44:	858fc83a 	sub	r7,r16,r22
  808e48:	008003c4 	movi	r2,15
  808e4c:	18c0004c 	andi	r3,r3,1
  808e50:	11c07236 	bltu	r2,r7,80901c <_realloc_r+0x2b8>
  808e54:	1c06b03a 	or	r3,r3,r16
  808e58:	a8c00115 	stw	r3,4(r21)
  808e5c:	ac21883a 	add	r16,r21,r16
  808e60:	80800117 	ldw	r2,4(r16)
  808e64:	10800054 	ori	r2,r2,1
  808e68:	80800115 	stw	r2,4(r16)
  808e6c:	9009883a 	mov	r4,r18
  808e70:	080ce640 	call	80ce64 <__malloc_unlock>
  808e74:	8805883a 	mov	r2,r17
  808e78:	dfc00917 	ldw	ra,36(sp)
  808e7c:	df000817 	ldw	fp,32(sp)
  808e80:	ddc00717 	ldw	r23,28(sp)
  808e84:	dd800617 	ldw	r22,24(sp)
  808e88:	dd400517 	ldw	r21,20(sp)
  808e8c:	dd000417 	ldw	r20,16(sp)
  808e90:	dcc00317 	ldw	r19,12(sp)
  808e94:	dc800217 	ldw	r18,8(sp)
  808e98:	dc400117 	ldw	r17,4(sp)
  808e9c:	dc000017 	ldw	r16,0(sp)
  808ea0:	dec00a04 	addi	sp,sp,40
  808ea4:	f800283a 	ret
  808ea8:	18c0004c 	andi	r3,r3,1
  808eac:	1800081e 	bne	r3,zero,808ed0 <_realloc_r+0x16c>
  808eb0:	a4fffe17 	ldw	r19,-8(r20)
  808eb4:	00bfff04 	movi	r2,-4
  808eb8:	ace7c83a 	sub	r19,r21,r19
  808ebc:	98c00117 	ldw	r3,4(r19)
  808ec0:	1886703a 	and	r3,r3,r2
  808ec4:	98000226 	beq	r19,zero,808ed0 <_realloc_r+0x16c>
  808ec8:	1c2f883a 	add	r23,r3,r16
  808ecc:	b9c06d0e 	bge	r23,r7,809084 <_realloc_r+0x320>
  808ed0:	880b883a 	mov	r5,r17
  808ed4:	9009883a 	mov	r4,r18
  808ed8:	0804efc0 	call	804efc <_malloc_r>
  808edc:	1023883a 	mov	r17,r2
  808ee0:	1000ef26 	beq	r2,zero,8092a0 <_realloc_r+0x53c>
  808ee4:	a0ffff17 	ldw	r3,-4(r20)
  808ee8:	113ffe04 	addi	r4,r2,-8
  808eec:	00bfff84 	movi	r2,-2
  808ef0:	1884703a 	and	r2,r3,r2
  808ef4:	a885883a 	add	r2,r21,r2
  808ef8:	2080bf26 	beq	r4,r2,8091f8 <_realloc_r+0x494>
  808efc:	81bfff04 	addi	r6,r16,-4
  808f00:	00800904 	movi	r2,36
  808f04:	11808936 	bltu	r2,r6,80912c <_realloc_r+0x3c8>
  808f08:	00c004c4 	movi	r3,19
  808f0c:	19806c2e 	bgeu	r3,r6,8090c0 <_realloc_r+0x35c>
  808f10:	a0c00017 	ldw	r3,0(r20)
  808f14:	88c00015 	stw	r3,0(r17)
  808f18:	a0c00117 	ldw	r3,4(r20)
  808f1c:	88c00115 	stw	r3,4(r17)
  808f20:	00c006c4 	movi	r3,27
  808f24:	1980ac36 	bltu	r3,r6,8091d8 <_realloc_r+0x474>
  808f28:	88800204 	addi	r2,r17,8
  808f2c:	a0c00204 	addi	r3,r20,8
  808f30:	19000017 	ldw	r4,0(r3)
  808f34:	11000015 	stw	r4,0(r2)
  808f38:	19000117 	ldw	r4,4(r3)
  808f3c:	11000115 	stw	r4,4(r2)
  808f40:	18c00217 	ldw	r3,8(r3)
  808f44:	10c00215 	stw	r3,8(r2)
  808f48:	a00b883a 	mov	r5,r20
  808f4c:	9009883a 	mov	r4,r18
  808f50:	08047ec0 	call	8047ec <_free_r>
  808f54:	9009883a 	mov	r4,r18
  808f58:	080ce640 	call	80ce64 <__malloc_unlock>
  808f5c:	8805883a 	mov	r2,r17
  808f60:	003fc506 	br	808e78 <__alt_data_end+0xff808e78>
  808f64:	00800304 	movi	r2,12
  808f68:	90800015 	stw	r2,0(r18)
  808f6c:	0005883a 	mov	r2,zero
  808f70:	003fc106 	br	808e78 <__alt_data_end+0xff808e78>
  808f74:	29800117 	ldw	r6,4(r5)
  808f78:	00bfff04 	movi	r2,-4
  808f7c:	b1000404 	addi	r4,r22,16
  808f80:	3084703a 	and	r2,r6,r2
  808f84:	140d883a 	add	r6,r2,r16
  808f88:	31005b0e 	bge	r6,r4,8090f8 <_realloc_r+0x394>
  808f8c:	2811883a 	mov	r8,r5
  808f90:	18c0004c 	andi	r3,r3,1
  808f94:	183fce1e 	bne	r3,zero,808ed0 <__alt_data_end+0xff808ed0>
  808f98:	a4fffe17 	ldw	r19,-8(r20)
  808f9c:	00ffff04 	movi	r3,-4
  808fa0:	ace7c83a 	sub	r19,r21,r19
  808fa4:	99000117 	ldw	r4,4(r19)
  808fa8:	20c6703a 	and	r3,r4,r3
  808fac:	403fc526 	beq	r8,zero,808ec4 <__alt_data_end+0xff808ec4>
  808fb0:	1c2f883a 	add	r23,r3,r16
  808fb4:	b8af883a 	add	r23,r23,r2
  808fb8:	41406026 	beq	r8,r5,80913c <_realloc_r+0x3d8>
  808fbc:	b9ffc116 	blt	r23,r7,808ec4 <__alt_data_end+0xff808ec4>
  808fc0:	40c00217 	ldw	r3,8(r8)
  808fc4:	40800317 	ldw	r2,12(r8)
  808fc8:	81bfff04 	addi	r6,r16,-4
  808fcc:	01000904 	movi	r4,36
  808fd0:	18800315 	stw	r2,12(r3)
  808fd4:	10c00215 	stw	r3,8(r2)
  808fd8:	99400217 	ldw	r5,8(r19)
  808fdc:	98c00317 	ldw	r3,12(r19)
  808fe0:	9c400204 	addi	r17,r19,8
  808fe4:	28c00315 	stw	r3,12(r5)
  808fe8:	19400215 	stw	r5,8(r3)
  808fec:	21802d36 	bltu	r4,r6,8090a4 <_realloc_r+0x340>
  808ff0:	008004c4 	movi	r2,19
  808ff4:	1180352e 	bgeu	r2,r6,8090cc <_realloc_r+0x368>
  808ff8:	a0800017 	ldw	r2,0(r20)
  808ffc:	98800215 	stw	r2,8(r19)
  809000:	a0800117 	ldw	r2,4(r20)
  809004:	98800315 	stw	r2,12(r19)
  809008:	008006c4 	movi	r2,27
  80900c:	11808036 	bltu	r2,r6,809210 <_realloc_r+0x4ac>
  809010:	98c00404 	addi	r3,r19,16
  809014:	a5000204 	addi	r20,r20,8
  809018:	00002d06 	br	8090d0 <_realloc_r+0x36c>
  80901c:	1d86b03a 	or	r3,r3,r22
  809020:	ad8b883a 	add	r5,r21,r22
  809024:	a8c00115 	stw	r3,4(r21)
  809028:	38800054 	ori	r2,r7,1
  80902c:	28800115 	stw	r2,4(r5)
  809030:	29cf883a 	add	r7,r5,r7
  809034:	38800117 	ldw	r2,4(r7)
  809038:	9009883a 	mov	r4,r18
  80903c:	29400204 	addi	r5,r5,8
  809040:	10800054 	ori	r2,r2,1
  809044:	38800115 	stw	r2,4(r7)
  809048:	08047ec0 	call	8047ec <_free_r>
  80904c:	003f8706 	br	808e6c <__alt_data_end+0xff808e6c>
  809050:	300b883a 	mov	r5,r6
  809054:	dfc00917 	ldw	ra,36(sp)
  809058:	df000817 	ldw	fp,32(sp)
  80905c:	ddc00717 	ldw	r23,28(sp)
  809060:	dd800617 	ldw	r22,24(sp)
  809064:	dd400517 	ldw	r21,20(sp)
  809068:	dd000417 	ldw	r20,16(sp)
  80906c:	dcc00317 	ldw	r19,12(sp)
  809070:	dc800217 	ldw	r18,8(sp)
  809074:	dc400117 	ldw	r17,4(sp)
  809078:	dc000017 	ldw	r16,0(sp)
  80907c:	dec00a04 	addi	sp,sp,40
  809080:	0804efc1 	jmpi	804efc <_malloc_r>
  809084:	98800317 	ldw	r2,12(r19)
  809088:	98c00217 	ldw	r3,8(r19)
  80908c:	81bfff04 	addi	r6,r16,-4
  809090:	01000904 	movi	r4,36
  809094:	18800315 	stw	r2,12(r3)
  809098:	10c00215 	stw	r3,8(r2)
  80909c:	9c400204 	addi	r17,r19,8
  8090a0:	21bfd32e 	bgeu	r4,r6,808ff0 <__alt_data_end+0xff808ff0>
  8090a4:	8809883a 	mov	r4,r17
  8090a8:	a00b883a 	mov	r5,r20
  8090ac:	0808bac0 	call	808bac <memmove>
  8090b0:	98c00117 	ldw	r3,4(r19)
  8090b4:	b821883a 	mov	r16,r23
  8090b8:	982b883a 	mov	r21,r19
  8090bc:	003f6106 	br	808e44 <__alt_data_end+0xff808e44>
  8090c0:	8805883a 	mov	r2,r17
  8090c4:	a007883a 	mov	r3,r20
  8090c8:	003f9906 	br	808f30 <__alt_data_end+0xff808f30>
  8090cc:	8807883a 	mov	r3,r17
  8090d0:	a0800017 	ldw	r2,0(r20)
  8090d4:	b821883a 	mov	r16,r23
  8090d8:	982b883a 	mov	r21,r19
  8090dc:	18800015 	stw	r2,0(r3)
  8090e0:	a0800117 	ldw	r2,4(r20)
  8090e4:	18800115 	stw	r2,4(r3)
  8090e8:	a0800217 	ldw	r2,8(r20)
  8090ec:	18800215 	stw	r2,8(r3)
  8090f0:	98c00117 	ldw	r3,4(r19)
  8090f4:	003f5306 	br	808e44 <__alt_data_end+0xff808e44>
  8090f8:	adab883a 	add	r21,r21,r22
  8090fc:	3585c83a 	sub	r2,r6,r22
  809100:	e5400215 	stw	r21,8(fp)
  809104:	10800054 	ori	r2,r2,1
  809108:	a8800115 	stw	r2,4(r21)
  80910c:	a0bfff17 	ldw	r2,-4(r20)
  809110:	9009883a 	mov	r4,r18
  809114:	1080004c 	andi	r2,r2,1
  809118:	b0acb03a 	or	r22,r22,r2
  80911c:	a5bfff15 	stw	r22,-4(r20)
  809120:	080ce640 	call	80ce64 <__malloc_unlock>
  809124:	a005883a 	mov	r2,r20
  809128:	003f5306 	br	808e78 <__alt_data_end+0xff808e78>
  80912c:	8809883a 	mov	r4,r17
  809130:	a00b883a 	mov	r5,r20
  809134:	0808bac0 	call	808bac <memmove>
  809138:	003f8306 	br	808f48 <__alt_data_end+0xff808f48>
  80913c:	b0800404 	addi	r2,r22,16
  809140:	b8bf6016 	blt	r23,r2,808ec4 <__alt_data_end+0xff808ec4>
  809144:	98800317 	ldw	r2,12(r19)
  809148:	98c00217 	ldw	r3,8(r19)
  80914c:	81bfff04 	addi	r6,r16,-4
  809150:	01000904 	movi	r4,36
  809154:	18800315 	stw	r2,12(r3)
  809158:	10c00215 	stw	r3,8(r2)
  80915c:	9c400204 	addi	r17,r19,8
  809160:	21804336 	bltu	r4,r6,809270 <_realloc_r+0x50c>
  809164:	008004c4 	movi	r2,19
  809168:	11803f2e 	bgeu	r2,r6,809268 <_realloc_r+0x504>
  80916c:	a0800017 	ldw	r2,0(r20)
  809170:	98800215 	stw	r2,8(r19)
  809174:	a0800117 	ldw	r2,4(r20)
  809178:	98800315 	stw	r2,12(r19)
  80917c:	008006c4 	movi	r2,27
  809180:	11803f36 	bltu	r2,r6,809280 <_realloc_r+0x51c>
  809184:	98800404 	addi	r2,r19,16
  809188:	a5000204 	addi	r20,r20,8
  80918c:	a0c00017 	ldw	r3,0(r20)
  809190:	10c00015 	stw	r3,0(r2)
  809194:	a0c00117 	ldw	r3,4(r20)
  809198:	10c00115 	stw	r3,4(r2)
  80919c:	a0c00217 	ldw	r3,8(r20)
  8091a0:	10c00215 	stw	r3,8(r2)
  8091a4:	9d87883a 	add	r3,r19,r22
  8091a8:	bd85c83a 	sub	r2,r23,r22
  8091ac:	e0c00215 	stw	r3,8(fp)
  8091b0:	10800054 	ori	r2,r2,1
  8091b4:	18800115 	stw	r2,4(r3)
  8091b8:	98800117 	ldw	r2,4(r19)
  8091bc:	9009883a 	mov	r4,r18
  8091c0:	1080004c 	andi	r2,r2,1
  8091c4:	b0acb03a 	or	r22,r22,r2
  8091c8:	9d800115 	stw	r22,4(r19)
  8091cc:	080ce640 	call	80ce64 <__malloc_unlock>
  8091d0:	8805883a 	mov	r2,r17
  8091d4:	003f2806 	br	808e78 <__alt_data_end+0xff808e78>
  8091d8:	a0c00217 	ldw	r3,8(r20)
  8091dc:	88c00215 	stw	r3,8(r17)
  8091e0:	a0c00317 	ldw	r3,12(r20)
  8091e4:	88c00315 	stw	r3,12(r17)
  8091e8:	30801126 	beq	r6,r2,809230 <_realloc_r+0x4cc>
  8091ec:	88800404 	addi	r2,r17,16
  8091f0:	a0c00404 	addi	r3,r20,16
  8091f4:	003f4e06 	br	808f30 <__alt_data_end+0xff808f30>
  8091f8:	893fff17 	ldw	r4,-4(r17)
  8091fc:	00bfff04 	movi	r2,-4
  809200:	a023883a 	mov	r17,r20
  809204:	2084703a 	and	r2,r4,r2
  809208:	80a1883a 	add	r16,r16,r2
  80920c:	003f0d06 	br	808e44 <__alt_data_end+0xff808e44>
  809210:	a0800217 	ldw	r2,8(r20)
  809214:	98800415 	stw	r2,16(r19)
  809218:	a0800317 	ldw	r2,12(r20)
  80921c:	98800515 	stw	r2,20(r19)
  809220:	31000a26 	beq	r6,r4,80924c <_realloc_r+0x4e8>
  809224:	98c00604 	addi	r3,r19,24
  809228:	a5000404 	addi	r20,r20,16
  80922c:	003fa806 	br	8090d0 <__alt_data_end+0xff8090d0>
  809230:	a1000417 	ldw	r4,16(r20)
  809234:	88800604 	addi	r2,r17,24
  809238:	a0c00604 	addi	r3,r20,24
  80923c:	89000415 	stw	r4,16(r17)
  809240:	a1000517 	ldw	r4,20(r20)
  809244:	89000515 	stw	r4,20(r17)
  809248:	003f3906 	br	808f30 <__alt_data_end+0xff808f30>
  80924c:	a0800417 	ldw	r2,16(r20)
  809250:	a5000604 	addi	r20,r20,24
  809254:	98c00804 	addi	r3,r19,32
  809258:	98800615 	stw	r2,24(r19)
  80925c:	a0bfff17 	ldw	r2,-4(r20)
  809260:	98800715 	stw	r2,28(r19)
  809264:	003f9a06 	br	8090d0 <__alt_data_end+0xff8090d0>
  809268:	8805883a 	mov	r2,r17
  80926c:	003fc706 	br	80918c <__alt_data_end+0xff80918c>
  809270:	8809883a 	mov	r4,r17
  809274:	a00b883a 	mov	r5,r20
  809278:	0808bac0 	call	808bac <memmove>
  80927c:	003fc906 	br	8091a4 <__alt_data_end+0xff8091a4>
  809280:	a0800217 	ldw	r2,8(r20)
  809284:	98800415 	stw	r2,16(r19)
  809288:	a0800317 	ldw	r2,12(r20)
  80928c:	98800515 	stw	r2,20(r19)
  809290:	31000726 	beq	r6,r4,8092b0 <_realloc_r+0x54c>
  809294:	98800604 	addi	r2,r19,24
  809298:	a5000404 	addi	r20,r20,16
  80929c:	003fbb06 	br	80918c <__alt_data_end+0xff80918c>
  8092a0:	9009883a 	mov	r4,r18
  8092a4:	080ce640 	call	80ce64 <__malloc_unlock>
  8092a8:	0005883a 	mov	r2,zero
  8092ac:	003ef206 	br	808e78 <__alt_data_end+0xff808e78>
  8092b0:	a0c00417 	ldw	r3,16(r20)
  8092b4:	a5000604 	addi	r20,r20,24
  8092b8:	98800804 	addi	r2,r19,32
  8092bc:	98c00615 	stw	r3,24(r19)
  8092c0:	a0ffff17 	ldw	r3,-4(r20)
  8092c4:	98c00715 	stw	r3,28(r19)
  8092c8:	003fb006 	br	80918c <__alt_data_end+0xff80918c>

008092cc <__swbuf_r>:
  8092cc:	defffc04 	addi	sp,sp,-16
  8092d0:	dc800215 	stw	r18,8(sp)
  8092d4:	dc400115 	stw	r17,4(sp)
  8092d8:	dc000015 	stw	r16,0(sp)
  8092dc:	dfc00315 	stw	ra,12(sp)
  8092e0:	2025883a 	mov	r18,r4
  8092e4:	2823883a 	mov	r17,r5
  8092e8:	3021883a 	mov	r16,r6
  8092ec:	20000226 	beq	r4,zero,8092f8 <__swbuf_r+0x2c>
  8092f0:	20800e17 	ldw	r2,56(r4)
  8092f4:	10004126 	beq	r2,zero,8093fc <__swbuf_r+0x130>
  8092f8:	80c00617 	ldw	r3,24(r16)
  8092fc:	8180030b 	ldhu	r6,12(r16)
  809300:	80c00215 	stw	r3,8(r16)
  809304:	30c0020c 	andi	r3,r6,8
  809308:	18003526 	beq	r3,zero,8093e0 <__swbuf_r+0x114>
  80930c:	80c00417 	ldw	r3,16(r16)
  809310:	18003326 	beq	r3,zero,8093e0 <__swbuf_r+0x114>
  809314:	3088000c 	andi	r2,r6,8192
  809318:	8c403fcc 	andi	r17,r17,255
  80931c:	10001726 	beq	r2,zero,80937c <__swbuf_r+0xb0>
  809320:	80800017 	ldw	r2,0(r16)
  809324:	81000517 	ldw	r4,20(r16)
  809328:	10c7c83a 	sub	r3,r2,r3
  80932c:	19001d0e 	bge	r3,r4,8093a4 <__swbuf_r+0xd8>
  809330:	18c00044 	addi	r3,r3,1
  809334:	81400217 	ldw	r5,8(r16)
  809338:	11000044 	addi	r4,r2,1
  80933c:	81000015 	stw	r4,0(r16)
  809340:	297fffc4 	addi	r5,r5,-1
  809344:	81400215 	stw	r5,8(r16)
  809348:	14400005 	stb	r17,0(r2)
  80934c:	80800517 	ldw	r2,20(r16)
  809350:	10c01d26 	beq	r2,r3,8093c8 <__swbuf_r+0xfc>
  809354:	8080030b 	ldhu	r2,12(r16)
  809358:	1080004c 	andi	r2,r2,1
  80935c:	1000181e 	bne	r2,zero,8093c0 <__swbuf_r+0xf4>
  809360:	8805883a 	mov	r2,r17
  809364:	dfc00317 	ldw	ra,12(sp)
  809368:	dc800217 	ldw	r18,8(sp)
  80936c:	dc400117 	ldw	r17,4(sp)
  809370:	dc000017 	ldw	r16,0(sp)
  809374:	dec00404 	addi	sp,sp,16
  809378:	f800283a 	ret
  80937c:	81001917 	ldw	r4,100(r16)
  809380:	00b7ffc4 	movi	r2,-8193
  809384:	31880014 	ori	r6,r6,8192
  809388:	2084703a 	and	r2,r4,r2
  80938c:	80801915 	stw	r2,100(r16)
  809390:	80800017 	ldw	r2,0(r16)
  809394:	81000517 	ldw	r4,20(r16)
  809398:	8180030d 	sth	r6,12(r16)
  80939c:	10c7c83a 	sub	r3,r2,r3
  8093a0:	193fe316 	blt	r3,r4,809330 <__alt_data_end+0xff809330>
  8093a4:	9009883a 	mov	r4,r18
  8093a8:	800b883a 	mov	r5,r16
  8093ac:	080429c0 	call	80429c <_fflush_r>
  8093b0:	1000091e 	bne	r2,zero,8093d8 <__swbuf_r+0x10c>
  8093b4:	80800017 	ldw	r2,0(r16)
  8093b8:	00c00044 	movi	r3,1
  8093bc:	003fdd06 	br	809334 <__alt_data_end+0xff809334>
  8093c0:	00800284 	movi	r2,10
  8093c4:	88bfe61e 	bne	r17,r2,809360 <__alt_data_end+0xff809360>
  8093c8:	9009883a 	mov	r4,r18
  8093cc:	800b883a 	mov	r5,r16
  8093d0:	080429c0 	call	80429c <_fflush_r>
  8093d4:	103fe226 	beq	r2,zero,809360 <__alt_data_end+0xff809360>
  8093d8:	00bfffc4 	movi	r2,-1
  8093dc:	003fe106 	br	809364 <__alt_data_end+0xff809364>
  8093e0:	9009883a 	mov	r4,r18
  8093e4:	800b883a 	mov	r5,r16
  8093e8:	08026180 	call	802618 <__swsetup_r>
  8093ec:	103ffa1e 	bne	r2,zero,8093d8 <__alt_data_end+0xff8093d8>
  8093f0:	8180030b 	ldhu	r6,12(r16)
  8093f4:	80c00417 	ldw	r3,16(r16)
  8093f8:	003fc606 	br	809314 <__alt_data_end+0xff809314>
  8093fc:	08046780 	call	804678 <__sinit>
  809400:	003fbd06 	br	8092f8 <__alt_data_end+0xff8092f8>

00809404 <__swbuf>:
  809404:	00c02074 	movhi	r3,129
  809408:	18cb1c04 	addi	r3,r3,11376
  80940c:	2005883a 	mov	r2,r4
  809410:	19000017 	ldw	r4,0(r3)
  809414:	280d883a 	mov	r6,r5
  809418:	100b883a 	mov	r5,r2
  80941c:	08092cc1 	jmpi	8092cc <__swbuf_r>

00809420 <_wcrtomb_r>:
  809420:	defff604 	addi	sp,sp,-40
  809424:	00802074 	movhi	r2,129
  809428:	dc800815 	stw	r18,32(sp)
  80942c:	dc400715 	stw	r17,28(sp)
  809430:	dc000615 	stw	r16,24(sp)
  809434:	108b2004 	addi	r2,r2,11392
  809438:	dfc00915 	stw	ra,36(sp)
  80943c:	2021883a 	mov	r16,r4
  809440:	3823883a 	mov	r17,r7
  809444:	14800017 	ldw	r18,0(r2)
  809448:	28001426 	beq	r5,zero,80949c <_wcrtomb_r+0x7c>
  80944c:	d9400415 	stw	r5,16(sp)
  809450:	d9800515 	stw	r6,20(sp)
  809454:	0804ce00 	call	804ce0 <__locale_charset>
  809458:	d9400417 	ldw	r5,16(sp)
  80945c:	d9800517 	ldw	r6,20(sp)
  809460:	8009883a 	mov	r4,r16
  809464:	dc400015 	stw	r17,0(sp)
  809468:	100f883a 	mov	r7,r2
  80946c:	903ee83a 	callr	r18
  809470:	00ffffc4 	movi	r3,-1
  809474:	10c0031e 	bne	r2,r3,809484 <_wcrtomb_r+0x64>
  809478:	88000015 	stw	zero,0(r17)
  80947c:	00c02284 	movi	r3,138
  809480:	80c00015 	stw	r3,0(r16)
  809484:	dfc00917 	ldw	ra,36(sp)
  809488:	dc800817 	ldw	r18,32(sp)
  80948c:	dc400717 	ldw	r17,28(sp)
  809490:	dc000617 	ldw	r16,24(sp)
  809494:	dec00a04 	addi	sp,sp,40
  809498:	f800283a 	ret
  80949c:	0804ce00 	call	804ce0 <__locale_charset>
  8094a0:	8009883a 	mov	r4,r16
  8094a4:	dc400015 	stw	r17,0(sp)
  8094a8:	d9400104 	addi	r5,sp,4
  8094ac:	000d883a 	mov	r6,zero
  8094b0:	100f883a 	mov	r7,r2
  8094b4:	903ee83a 	callr	r18
  8094b8:	003fed06 	br	809470 <__alt_data_end+0xff809470>

008094bc <wcrtomb>:
  8094bc:	defff604 	addi	sp,sp,-40
  8094c0:	00802074 	movhi	r2,129
  8094c4:	dc800615 	stw	r18,24(sp)
  8094c8:	dc400515 	stw	r17,20(sp)
  8094cc:	dc000415 	stw	r16,16(sp)
  8094d0:	108b1c04 	addi	r2,r2,11376
  8094d4:	dfc00915 	stw	ra,36(sp)
  8094d8:	dd000815 	stw	r20,32(sp)
  8094dc:	dcc00715 	stw	r19,28(sp)
  8094e0:	2021883a 	mov	r16,r4
  8094e4:	3025883a 	mov	r18,r6
  8094e8:	14400017 	ldw	r17,0(r2)
  8094ec:	20001826 	beq	r4,zero,809550 <wcrtomb+0x94>
  8094f0:	00802074 	movhi	r2,129
  8094f4:	108b2004 	addi	r2,r2,11392
  8094f8:	15000017 	ldw	r20,0(r2)
  8094fc:	2827883a 	mov	r19,r5
  809500:	0804ce00 	call	804ce0 <__locale_charset>
  809504:	8809883a 	mov	r4,r17
  809508:	dc800015 	stw	r18,0(sp)
  80950c:	800b883a 	mov	r5,r16
  809510:	980d883a 	mov	r6,r19
  809514:	100f883a 	mov	r7,r2
  809518:	a03ee83a 	callr	r20
  80951c:	00ffffc4 	movi	r3,-1
  809520:	10c0031e 	bne	r2,r3,809530 <wcrtomb+0x74>
  809524:	90000015 	stw	zero,0(r18)
  809528:	00c02284 	movi	r3,138
  80952c:	88c00015 	stw	r3,0(r17)
  809530:	dfc00917 	ldw	ra,36(sp)
  809534:	dd000817 	ldw	r20,32(sp)
  809538:	dcc00717 	ldw	r19,28(sp)
  80953c:	dc800617 	ldw	r18,24(sp)
  809540:	dc400517 	ldw	r17,20(sp)
  809544:	dc000417 	ldw	r16,16(sp)
  809548:	dec00a04 	addi	sp,sp,40
  80954c:	f800283a 	ret
  809550:	00802074 	movhi	r2,129
  809554:	108b2004 	addi	r2,r2,11392
  809558:	14000017 	ldw	r16,0(r2)
  80955c:	0804ce00 	call	804ce0 <__locale_charset>
  809560:	8809883a 	mov	r4,r17
  809564:	dc800015 	stw	r18,0(sp)
  809568:	d9400104 	addi	r5,sp,4
  80956c:	000d883a 	mov	r6,zero
  809570:	100f883a 	mov	r7,r2
  809574:	803ee83a 	callr	r16
  809578:	003fe806 	br	80951c <__alt_data_end+0xff80951c>

0080957c <__ascii_wctomb>:
  80957c:	28000526 	beq	r5,zero,809594 <__ascii_wctomb+0x18>
  809580:	00803fc4 	movi	r2,255
  809584:	11800536 	bltu	r2,r6,80959c <__ascii_wctomb+0x20>
  809588:	29800005 	stb	r6,0(r5)
  80958c:	00800044 	movi	r2,1
  809590:	f800283a 	ret
  809594:	0005883a 	mov	r2,zero
  809598:	f800283a 	ret
  80959c:	00802284 	movi	r2,138
  8095a0:	20800015 	stw	r2,0(r4)
  8095a4:	00bfffc4 	movi	r2,-1
  8095a8:	f800283a 	ret

008095ac <_wctomb_r>:
  8095ac:	00802074 	movhi	r2,129
  8095b0:	defff904 	addi	sp,sp,-28
  8095b4:	108b2004 	addi	r2,r2,11392
  8095b8:	dfc00615 	stw	ra,24(sp)
  8095bc:	dc400515 	stw	r17,20(sp)
  8095c0:	dc000415 	stw	r16,16(sp)
  8095c4:	3823883a 	mov	r17,r7
  8095c8:	14000017 	ldw	r16,0(r2)
  8095cc:	d9000115 	stw	r4,4(sp)
  8095d0:	d9400215 	stw	r5,8(sp)
  8095d4:	d9800315 	stw	r6,12(sp)
  8095d8:	0804ce00 	call	804ce0 <__locale_charset>
  8095dc:	d9000117 	ldw	r4,4(sp)
  8095e0:	d9400217 	ldw	r5,8(sp)
  8095e4:	d9800317 	ldw	r6,12(sp)
  8095e8:	dc400015 	stw	r17,0(sp)
  8095ec:	100f883a 	mov	r7,r2
  8095f0:	803ee83a 	callr	r16
  8095f4:	dfc00617 	ldw	ra,24(sp)
  8095f8:	dc400517 	ldw	r17,20(sp)
  8095fc:	dc000417 	ldw	r16,16(sp)
  809600:	dec00704 	addi	sp,sp,28
  809604:	f800283a 	ret

00809608 <__udivdi3>:
  809608:	defff504 	addi	sp,sp,-44
  80960c:	dcc00415 	stw	r19,16(sp)
  809610:	dc000115 	stw	r16,4(sp)
  809614:	dfc00a15 	stw	ra,40(sp)
  809618:	df000915 	stw	fp,36(sp)
  80961c:	ddc00815 	stw	r23,32(sp)
  809620:	dd800715 	stw	r22,28(sp)
  809624:	dd400615 	stw	r21,24(sp)
  809628:	dd000515 	stw	r20,20(sp)
  80962c:	dc800315 	stw	r18,12(sp)
  809630:	dc400215 	stw	r17,8(sp)
  809634:	2027883a 	mov	r19,r4
  809638:	2821883a 	mov	r16,r5
  80963c:	3800421e 	bne	r7,zero,809748 <__udivdi3+0x140>
  809640:	3025883a 	mov	r18,r6
  809644:	2023883a 	mov	r17,r4
  809648:	2980542e 	bgeu	r5,r6,80979c <__udivdi3+0x194>
  80964c:	00bfffd4 	movui	r2,65535
  809650:	282d883a 	mov	r22,r5
  809654:	1180a836 	bltu	r2,r6,8098f8 <__udivdi3+0x2f0>
  809658:	00803fc4 	movi	r2,255
  80965c:	1181422e 	bgeu	r2,r6,809b68 <__udivdi3+0x560>
  809660:	00800204 	movi	r2,8
  809664:	1007883a 	mov	r3,r2
  809668:	3084d83a 	srl	r2,r6,r2
  80966c:	01002074 	movhi	r4,129
  809670:	2102e004 	addi	r4,r4,2944
  809674:	2085883a 	add	r2,r4,r2
  809678:	10800003 	ldbu	r2,0(r2)
  80967c:	10c7883a 	add	r3,r2,r3
  809680:	00800804 	movi	r2,32
  809684:	10c5c83a 	sub	r2,r2,r3
  809688:	10000526 	beq	r2,zero,8096a0 <__udivdi3+0x98>
  80968c:	80a0983a 	sll	r16,r16,r2
  809690:	98c6d83a 	srl	r3,r19,r3
  809694:	30a4983a 	sll	r18,r6,r2
  809698:	98a2983a 	sll	r17,r19,r2
  80969c:	80ecb03a 	or	r22,r16,r3
  8096a0:	902ad43a 	srli	r21,r18,16
  8096a4:	b009883a 	mov	r4,r22
  8096a8:	953fffcc 	andi	r20,r18,65535
  8096ac:	a80b883a 	mov	r5,r21
  8096b0:	080a27c0 	call	80a27c <__umodsi3>
  8096b4:	b009883a 	mov	r4,r22
  8096b8:	a80b883a 	mov	r5,r21
  8096bc:	1027883a 	mov	r19,r2
  8096c0:	080a2740 	call	80a274 <__udivsi3>
  8096c4:	1021883a 	mov	r16,r2
  8096c8:	8806d43a 	srli	r3,r17,16
  8096cc:	9804943a 	slli	r2,r19,16
  8096d0:	8527383a 	mul	r19,r16,r20
  8096d4:	10c4b03a 	or	r2,r2,r3
  8096d8:	14c0052e 	bgeu	r2,r19,8096f0 <__udivdi3+0xe8>
  8096dc:	1485883a 	add	r2,r2,r18
  8096e0:	80ffffc4 	addi	r3,r16,-1
  8096e4:	14800136 	bltu	r2,r18,8096ec <__udivdi3+0xe4>
  8096e8:	14c13436 	bltu	r2,r19,809bbc <__udivdi3+0x5b4>
  8096ec:	1821883a 	mov	r16,r3
  8096f0:	14e7c83a 	sub	r19,r2,r19
  8096f4:	9809883a 	mov	r4,r19
  8096f8:	a80b883a 	mov	r5,r21
  8096fc:	080a27c0 	call	80a27c <__umodsi3>
  809700:	102d883a 	mov	r22,r2
  809704:	9809883a 	mov	r4,r19
  809708:	a80b883a 	mov	r5,r21
  80970c:	080a2740 	call	80a274 <__udivsi3>
  809710:	b02c943a 	slli	r22,r22,16
  809714:	1529383a 	mul	r20,r2,r20
  809718:	8c7fffcc 	andi	r17,r17,65535
  80971c:	b462b03a 	or	r17,r22,r17
  809720:	8d00052e 	bgeu	r17,r20,809738 <__udivdi3+0x130>
  809724:	8ca3883a 	add	r17,r17,r18
  809728:	10ffffc4 	addi	r3,r2,-1
  80972c:	8c80f636 	bltu	r17,r18,809b08 <__udivdi3+0x500>
  809730:	8d00f52e 	bgeu	r17,r20,809b08 <__udivdi3+0x500>
  809734:	10bfff84 	addi	r2,r2,-2
  809738:	8020943a 	slli	r16,r16,16
  80973c:	0007883a 	mov	r3,zero
  809740:	1404b03a 	or	r2,r2,r16
  809744:	00005b06 	br	8098b4 <__udivdi3+0x2ac>
  809748:	29c05836 	bltu	r5,r7,8098ac <__udivdi3+0x2a4>
  80974c:	00bfffd4 	movui	r2,65535
  809750:	11c0642e 	bgeu	r2,r7,8098e4 <__udivdi3+0x2dc>
  809754:	00804034 	movhi	r2,256
  809758:	10bfffc4 	addi	r2,r2,-1
  80975c:	11c0f32e 	bgeu	r2,r7,809b2c <__udivdi3+0x524>
  809760:	00c00604 	movi	r3,24
  809764:	180b883a 	mov	r5,r3
  809768:	38c6d83a 	srl	r3,r7,r3
  80976c:	00802074 	movhi	r2,129
  809770:	1082e004 	addi	r2,r2,2944
  809774:	10c7883a 	add	r3,r2,r3
  809778:	18c00003 	ldbu	r3,0(r3)
  80977c:	01000804 	movi	r4,32
  809780:	1947883a 	add	r3,r3,r5
  809784:	20e5c83a 	sub	r18,r4,r3
  809788:	9000661e 	bne	r18,zero,809924 <__udivdi3+0x31c>
  80978c:	3c00f936 	bltu	r7,r16,809b74 <__udivdi3+0x56c>
  809790:	9985403a 	cmpgeu	r2,r19,r6
  809794:	0007883a 	mov	r3,zero
  809798:	00004606 	br	8098b4 <__udivdi3+0x2ac>
  80979c:	3000041e 	bne	r6,zero,8097b0 <__udivdi3+0x1a8>
  8097a0:	01000044 	movi	r4,1
  8097a4:	000b883a 	mov	r5,zero
  8097a8:	080a2740 	call	80a274 <__udivsi3>
  8097ac:	1025883a 	mov	r18,r2
  8097b0:	00bfffd4 	movui	r2,65535
  8097b4:	1480562e 	bgeu	r2,r18,809910 <__udivdi3+0x308>
  8097b8:	00804034 	movhi	r2,256
  8097bc:	10bfffc4 	addi	r2,r2,-1
  8097c0:	1480e32e 	bgeu	r2,r18,809b50 <__udivdi3+0x548>
  8097c4:	00800604 	movi	r2,24
  8097c8:	1007883a 	mov	r3,r2
  8097cc:	9084d83a 	srl	r2,r18,r2
  8097d0:	01002074 	movhi	r4,129
  8097d4:	2102e004 	addi	r4,r4,2944
  8097d8:	2085883a 	add	r2,r4,r2
  8097dc:	10800003 	ldbu	r2,0(r2)
  8097e0:	10c5883a 	add	r2,r2,r3
  8097e4:	00c00804 	movi	r3,32
  8097e8:	1887c83a 	sub	r3,r3,r2
  8097ec:	1800911e 	bne	r3,zero,809a34 <__udivdi3+0x42c>
  8097f0:	9028d43a 	srli	r20,r18,16
  8097f4:	84a1c83a 	sub	r16,r16,r18
  8097f8:	957fffcc 	andi	r21,r18,65535
  8097fc:	00c00044 	movi	r3,1
  809800:	8009883a 	mov	r4,r16
  809804:	a00b883a 	mov	r5,r20
  809808:	d8c00015 	stw	r3,0(sp)
  80980c:	080a27c0 	call	80a27c <__umodsi3>
  809810:	8009883a 	mov	r4,r16
  809814:	a00b883a 	mov	r5,r20
  809818:	1027883a 	mov	r19,r2
  80981c:	080a2740 	call	80a274 <__udivsi3>
  809820:	1021883a 	mov	r16,r2
  809824:	880cd43a 	srli	r6,r17,16
  809828:	9804943a 	slli	r2,r19,16
  80982c:	8567383a 	mul	r19,r16,r21
  809830:	d8c00017 	ldw	r3,0(sp)
  809834:	1188b03a 	or	r4,r2,r6
  809838:	24c0052e 	bgeu	r4,r19,809850 <__udivdi3+0x248>
  80983c:	2489883a 	add	r4,r4,r18
  809840:	80bfffc4 	addi	r2,r16,-1
  809844:	24800136 	bltu	r4,r18,80984c <__udivdi3+0x244>
  809848:	24c0d936 	bltu	r4,r19,809bb0 <__udivdi3+0x5a8>
  80984c:	1021883a 	mov	r16,r2
  809850:	24e7c83a 	sub	r19,r4,r19
  809854:	9809883a 	mov	r4,r19
  809858:	a00b883a 	mov	r5,r20
  80985c:	d8c00015 	stw	r3,0(sp)
  809860:	080a27c0 	call	80a27c <__umodsi3>
  809864:	102d883a 	mov	r22,r2
  809868:	9809883a 	mov	r4,r19
  80986c:	a00b883a 	mov	r5,r20
  809870:	080a2740 	call	80a274 <__udivsi3>
  809874:	b02c943a 	slli	r22,r22,16
  809878:	156b383a 	mul	r21,r2,r21
  80987c:	8c7fffcc 	andi	r17,r17,65535
  809880:	b462b03a 	or	r17,r22,r17
  809884:	d8c00017 	ldw	r3,0(sp)
  809888:	8d40052e 	bgeu	r17,r21,8098a0 <__udivdi3+0x298>
  80988c:	8ca3883a 	add	r17,r17,r18
  809890:	113fffc4 	addi	r4,r2,-1
  809894:	8c809a36 	bltu	r17,r18,809b00 <__udivdi3+0x4f8>
  809898:	8d40992e 	bgeu	r17,r21,809b00 <__udivdi3+0x4f8>
  80989c:	10bfff84 	addi	r2,r2,-2
  8098a0:	8020943a 	slli	r16,r16,16
  8098a4:	1404b03a 	or	r2,r2,r16
  8098a8:	00000206 	br	8098b4 <__udivdi3+0x2ac>
  8098ac:	0007883a 	mov	r3,zero
  8098b0:	0005883a 	mov	r2,zero
  8098b4:	dfc00a17 	ldw	ra,40(sp)
  8098b8:	df000917 	ldw	fp,36(sp)
  8098bc:	ddc00817 	ldw	r23,32(sp)
  8098c0:	dd800717 	ldw	r22,28(sp)
  8098c4:	dd400617 	ldw	r21,24(sp)
  8098c8:	dd000517 	ldw	r20,20(sp)
  8098cc:	dcc00417 	ldw	r19,16(sp)
  8098d0:	dc800317 	ldw	r18,12(sp)
  8098d4:	dc400217 	ldw	r17,8(sp)
  8098d8:	dc000117 	ldw	r16,4(sp)
  8098dc:	dec00b04 	addi	sp,sp,44
  8098e0:	f800283a 	ret
  8098e4:	00803fc4 	movi	r2,255
  8098e8:	11c0932e 	bgeu	r2,r7,809b38 <__udivdi3+0x530>
  8098ec:	00c00204 	movi	r3,8
  8098f0:	180b883a 	mov	r5,r3
  8098f4:	003f9c06 	br	809768 <__alt_data_end+0xff809768>
  8098f8:	00804034 	movhi	r2,256
  8098fc:	10bfffc4 	addi	r2,r2,-1
  809900:	1180902e 	bgeu	r2,r6,809b44 <__udivdi3+0x53c>
  809904:	00800604 	movi	r2,24
  809908:	1007883a 	mov	r3,r2
  80990c:	003f5606 	br	809668 <__alt_data_end+0xff809668>
  809910:	00803fc4 	movi	r2,255
  809914:	1480912e 	bgeu	r2,r18,809b5c <__udivdi3+0x554>
  809918:	00800204 	movi	r2,8
  80991c:	1007883a 	mov	r3,r2
  809920:	003faa06 	br	8097cc <__alt_data_end+0xff8097cc>
  809924:	30eed83a 	srl	r23,r6,r3
  809928:	3c8e983a 	sll	r7,r7,r18
  80992c:	80f8d83a 	srl	fp,r16,r3
  809930:	98c6d83a 	srl	r3,r19,r3
  809934:	3deeb03a 	or	r23,r7,r23
  809938:	b828d43a 	srli	r20,r23,16
  80993c:	84a0983a 	sll	r16,r16,r18
  809940:	e009883a 	mov	r4,fp
  809944:	a00b883a 	mov	r5,r20
  809948:	80e2b03a 	or	r17,r16,r3
  80994c:	34aa983a 	sll	r21,r6,r18
  809950:	080a27c0 	call	80a27c <__umodsi3>
  809954:	e009883a 	mov	r4,fp
  809958:	a00b883a 	mov	r5,r20
  80995c:	102d883a 	mov	r22,r2
  809960:	080a2740 	call	80a274 <__udivsi3>
  809964:	1021883a 	mov	r16,r2
  809968:	bf3fffcc 	andi	fp,r23,65535
  80996c:	b004943a 	slli	r2,r22,16
  809970:	8808d43a 	srli	r4,r17,16
  809974:	872d383a 	mul	r22,r16,fp
  809978:	1104b03a 	or	r2,r2,r4
  80997c:	1580042e 	bgeu	r2,r22,809990 <__udivdi3+0x388>
  809980:	15c5883a 	add	r2,r2,r23
  809984:	80ffffc4 	addi	r3,r16,-1
  809988:	15c0812e 	bgeu	r2,r23,809b90 <__udivdi3+0x588>
  80998c:	1821883a 	mov	r16,r3
  809990:	15adc83a 	sub	r22,r2,r22
  809994:	b009883a 	mov	r4,r22
  809998:	a00b883a 	mov	r5,r20
  80999c:	080a27c0 	call	80a27c <__umodsi3>
  8099a0:	a00b883a 	mov	r5,r20
  8099a4:	b009883a 	mov	r4,r22
  8099a8:	d8800015 	stw	r2,0(sp)
  8099ac:	080a2740 	call	80a274 <__udivsi3>
  8099b0:	d8c00017 	ldw	r3,0(sp)
  8099b4:	170b383a 	mul	r5,r2,fp
  8099b8:	8c7fffcc 	andi	r17,r17,65535
  8099bc:	1806943a 	slli	r3,r3,16
  8099c0:	1c46b03a 	or	r3,r3,r17
  8099c4:	1940042e 	bgeu	r3,r5,8099d8 <__udivdi3+0x3d0>
  8099c8:	1dc7883a 	add	r3,r3,r23
  8099cc:	113fffc4 	addi	r4,r2,-1
  8099d0:	1dc06b2e 	bgeu	r3,r23,809b80 <__udivdi3+0x578>
  8099d4:	2005883a 	mov	r2,r4
  8099d8:	8020943a 	slli	r16,r16,16
  8099dc:	a9ffffcc 	andi	r7,r21,65535
  8099e0:	a82ad43a 	srli	r21,r21,16
  8099e4:	1404b03a 	or	r2,r2,r16
  8099e8:	113fffcc 	andi	r4,r2,65535
  8099ec:	100cd43a 	srli	r6,r2,16
  8099f0:	21d3383a 	mul	r9,r4,r7
  8099f4:	2549383a 	mul	r4,r4,r21
  8099f8:	31cf383a 	mul	r7,r6,r7
  8099fc:	4810d43a 	srli	r8,r9,16
  809a00:	1947c83a 	sub	r3,r3,r5
  809a04:	3909883a 	add	r4,r7,r4
  809a08:	2209883a 	add	r4,r4,r8
  809a0c:	354d383a 	mul	r6,r6,r21
  809a10:	21c0022e 	bgeu	r4,r7,809a1c <__udivdi3+0x414>
  809a14:	01400074 	movhi	r5,1
  809a18:	314d883a 	add	r6,r6,r5
  809a1c:	202ad43a 	srli	r21,r4,16
  809a20:	354d883a 	add	r6,r6,r21
  809a24:	19803f36 	bltu	r3,r6,809b24 <__udivdi3+0x51c>
  809a28:	19803926 	beq	r3,r6,809b10 <__udivdi3+0x508>
  809a2c:	0007883a 	mov	r3,zero
  809a30:	003fa006 	br	8098b4 <__alt_data_end+0xff8098b4>
  809a34:	90e4983a 	sll	r18,r18,r3
  809a38:	80aad83a 	srl	r21,r16,r2
  809a3c:	80e0983a 	sll	r16,r16,r3
  809a40:	9028d43a 	srli	r20,r18,16
  809a44:	9884d83a 	srl	r2,r19,r2
  809a48:	a809883a 	mov	r4,r21
  809a4c:	a00b883a 	mov	r5,r20
  809a50:	80acb03a 	or	r22,r16,r2
  809a54:	98e2983a 	sll	r17,r19,r3
  809a58:	080a27c0 	call	80a27c <__umodsi3>
  809a5c:	a809883a 	mov	r4,r21
  809a60:	a00b883a 	mov	r5,r20
  809a64:	1021883a 	mov	r16,r2
  809a68:	080a2740 	call	80a274 <__udivsi3>
  809a6c:	957fffcc 	andi	r21,r18,65535
  809a70:	8020943a 	slli	r16,r16,16
  809a74:	b00ad43a 	srli	r5,r22,16
  809a78:	1567383a 	mul	r19,r2,r21
  809a7c:	102f883a 	mov	r23,r2
  809a80:	8148b03a 	or	r4,r16,r5
  809a84:	24c0062e 	bgeu	r4,r19,809aa0 <__udivdi3+0x498>
  809a88:	2489883a 	add	r4,r4,r18
  809a8c:	10bfffc4 	addi	r2,r2,-1
  809a90:	24804536 	bltu	r4,r18,809ba8 <__udivdi3+0x5a0>
  809a94:	24c0442e 	bgeu	r4,r19,809ba8 <__udivdi3+0x5a0>
  809a98:	bdffff84 	addi	r23,r23,-2
  809a9c:	2489883a 	add	r4,r4,r18
  809aa0:	24e7c83a 	sub	r19,r4,r19
  809aa4:	9809883a 	mov	r4,r19
  809aa8:	a00b883a 	mov	r5,r20
  809aac:	080a27c0 	call	80a27c <__umodsi3>
  809ab0:	1021883a 	mov	r16,r2
  809ab4:	9809883a 	mov	r4,r19
  809ab8:	a00b883a 	mov	r5,r20
  809abc:	080a2740 	call	80a274 <__udivsi3>
  809ac0:	8020943a 	slli	r16,r16,16
  809ac4:	1007883a 	mov	r3,r2
  809ac8:	1545383a 	mul	r2,r2,r21
  809acc:	b13fffcc 	andi	r4,r22,65535
  809ad0:	8108b03a 	or	r4,r16,r4
  809ad4:	2080062e 	bgeu	r4,r2,809af0 <__udivdi3+0x4e8>
  809ad8:	2489883a 	add	r4,r4,r18
  809adc:	197fffc4 	addi	r5,r3,-1
  809ae0:	24802f36 	bltu	r4,r18,809ba0 <__udivdi3+0x598>
  809ae4:	20802e2e 	bgeu	r4,r2,809ba0 <__udivdi3+0x598>
  809ae8:	18ffff84 	addi	r3,r3,-2
  809aec:	2489883a 	add	r4,r4,r18
  809af0:	b82e943a 	slli	r23,r23,16
  809af4:	20a1c83a 	sub	r16,r4,r2
  809af8:	1dc6b03a 	or	r3,r3,r23
  809afc:	003f4006 	br	809800 <__alt_data_end+0xff809800>
  809b00:	2005883a 	mov	r2,r4
  809b04:	003f6606 	br	8098a0 <__alt_data_end+0xff8098a0>
  809b08:	1805883a 	mov	r2,r3
  809b0c:	003f0a06 	br	809738 <__alt_data_end+0xff809738>
  809b10:	2006943a 	slli	r3,r4,16
  809b14:	9c88983a 	sll	r4,r19,r18
  809b18:	4a7fffcc 	andi	r9,r9,65535
  809b1c:	1a47883a 	add	r3,r3,r9
  809b20:	20ffc22e 	bgeu	r4,r3,809a2c <__alt_data_end+0xff809a2c>
  809b24:	10bfffc4 	addi	r2,r2,-1
  809b28:	003fc006 	br	809a2c <__alt_data_end+0xff809a2c>
  809b2c:	00c00404 	movi	r3,16
  809b30:	180b883a 	mov	r5,r3
  809b34:	003f0c06 	br	809768 <__alt_data_end+0xff809768>
  809b38:	0007883a 	mov	r3,zero
  809b3c:	000b883a 	mov	r5,zero
  809b40:	003f0906 	br	809768 <__alt_data_end+0xff809768>
  809b44:	00800404 	movi	r2,16
  809b48:	1007883a 	mov	r3,r2
  809b4c:	003ec606 	br	809668 <__alt_data_end+0xff809668>
  809b50:	00800404 	movi	r2,16
  809b54:	1007883a 	mov	r3,r2
  809b58:	003f1c06 	br	8097cc <__alt_data_end+0xff8097cc>
  809b5c:	0005883a 	mov	r2,zero
  809b60:	0007883a 	mov	r3,zero
  809b64:	003f1906 	br	8097cc <__alt_data_end+0xff8097cc>
  809b68:	0005883a 	mov	r2,zero
  809b6c:	0007883a 	mov	r3,zero
  809b70:	003ebd06 	br	809668 <__alt_data_end+0xff809668>
  809b74:	0007883a 	mov	r3,zero
  809b78:	00800044 	movi	r2,1
  809b7c:	003f4d06 	br	8098b4 <__alt_data_end+0xff8098b4>
  809b80:	197f942e 	bgeu	r3,r5,8099d4 <__alt_data_end+0xff8099d4>
  809b84:	10bfff84 	addi	r2,r2,-2
  809b88:	1dc7883a 	add	r3,r3,r23
  809b8c:	003f9206 	br	8099d8 <__alt_data_end+0xff8099d8>
  809b90:	15bf7e2e 	bgeu	r2,r22,80998c <__alt_data_end+0xff80998c>
  809b94:	843fff84 	addi	r16,r16,-2
  809b98:	15c5883a 	add	r2,r2,r23
  809b9c:	003f7c06 	br	809990 <__alt_data_end+0xff809990>
  809ba0:	2807883a 	mov	r3,r5
  809ba4:	003fd206 	br	809af0 <__alt_data_end+0xff809af0>
  809ba8:	102f883a 	mov	r23,r2
  809bac:	003fbc06 	br	809aa0 <__alt_data_end+0xff809aa0>
  809bb0:	843fff84 	addi	r16,r16,-2
  809bb4:	2489883a 	add	r4,r4,r18
  809bb8:	003f2506 	br	809850 <__alt_data_end+0xff809850>
  809bbc:	843fff84 	addi	r16,r16,-2
  809bc0:	1485883a 	add	r2,r2,r18
  809bc4:	003eca06 	br	8096f0 <__alt_data_end+0xff8096f0>

00809bc8 <__umoddi3>:
  809bc8:	defff404 	addi	sp,sp,-48
  809bcc:	ddc00915 	stw	r23,36(sp)
  809bd0:	dc400315 	stw	r17,12(sp)
  809bd4:	dc000215 	stw	r16,8(sp)
  809bd8:	dfc00b15 	stw	ra,44(sp)
  809bdc:	df000a15 	stw	fp,40(sp)
  809be0:	dd800815 	stw	r22,32(sp)
  809be4:	dd400715 	stw	r21,28(sp)
  809be8:	dd000615 	stw	r20,24(sp)
  809bec:	dcc00515 	stw	r19,20(sp)
  809bf0:	dc800415 	stw	r18,16(sp)
  809bf4:	2021883a 	mov	r16,r4
  809bf8:	2823883a 	mov	r17,r5
  809bfc:	282f883a 	mov	r23,r5
  809c00:	3800381e 	bne	r7,zero,809ce4 <__umoddi3+0x11c>
  809c04:	3027883a 	mov	r19,r6
  809c08:	2029883a 	mov	r20,r4
  809c0c:	29804e2e 	bgeu	r5,r6,809d48 <__umoddi3+0x180>
  809c10:	00bfffd4 	movui	r2,65535
  809c14:	11809c36 	bltu	r2,r6,809e88 <__umoddi3+0x2c0>
  809c18:	00803fc4 	movi	r2,255
  809c1c:	11813b2e 	bgeu	r2,r6,80a10c <__umoddi3+0x544>
  809c20:	01400204 	movi	r5,8
  809c24:	2805883a 	mov	r2,r5
  809c28:	314ad83a 	srl	r5,r6,r5
  809c2c:	00c02074 	movhi	r3,129
  809c30:	18c2e004 	addi	r3,r3,2944
  809c34:	194b883a 	add	r5,r3,r5
  809c38:	29000003 	ldbu	r4,0(r5)
  809c3c:	2089883a 	add	r4,r4,r2
  809c40:	00800804 	movi	r2,32
  809c44:	1105c83a 	sub	r2,r2,r4
  809c48:	1000ec26 	beq	r2,zero,809ffc <__umoddi3+0x434>
  809c4c:	88a2983a 	sll	r17,r17,r2
  809c50:	8108d83a 	srl	r4,r16,r4
  809c54:	30a6983a 	sll	r19,r6,r2
  809c58:	80a8983a 	sll	r20,r16,r2
  809c5c:	1025883a 	mov	r18,r2
  809c60:	892eb03a 	or	r23,r17,r4
  809c64:	982cd43a 	srli	r22,r19,16
  809c68:	b809883a 	mov	r4,r23
  809c6c:	9d7fffcc 	andi	r21,r19,65535
  809c70:	b00b883a 	mov	r5,r22
  809c74:	080a27c0 	call	80a27c <__umodsi3>
  809c78:	b809883a 	mov	r4,r23
  809c7c:	b00b883a 	mov	r5,r22
  809c80:	1021883a 	mov	r16,r2
  809c84:	080a2740 	call	80a274 <__udivsi3>
  809c88:	8020943a 	slli	r16,r16,16
  809c8c:	a00cd43a 	srli	r6,r20,16
  809c90:	1545383a 	mul	r2,r2,r21
  809c94:	8188b03a 	or	r4,r16,r6
  809c98:	2080042e 	bgeu	r4,r2,809cac <__umoddi3+0xe4>
  809c9c:	24c9883a 	add	r4,r4,r19
  809ca0:	24c00236 	bltu	r4,r19,809cac <__umoddi3+0xe4>
  809ca4:	2080012e 	bgeu	r4,r2,809cac <__umoddi3+0xe4>
  809ca8:	24c9883a 	add	r4,r4,r19
  809cac:	20a3c83a 	sub	r17,r4,r2
  809cb0:	8809883a 	mov	r4,r17
  809cb4:	b00b883a 	mov	r5,r22
  809cb8:	080a27c0 	call	80a27c <__umodsi3>
  809cbc:	8809883a 	mov	r4,r17
  809cc0:	b00b883a 	mov	r5,r22
  809cc4:	1021883a 	mov	r16,r2
  809cc8:	080a2740 	call	80a274 <__udivsi3>
  809ccc:	8006943a 	slli	r3,r16,16
  809cd0:	1545383a 	mul	r2,r2,r21
  809cd4:	a13fffcc 	andi	r4,r20,65535
  809cd8:	1906b03a 	or	r3,r3,r4
  809cdc:	1880532e 	bgeu	r3,r2,809e2c <__umoddi3+0x264>
  809ce0:	00004e06 	br	809e1c <__umoddi3+0x254>
  809ce4:	29c05536 	bltu	r5,r7,809e3c <__umoddi3+0x274>
  809ce8:	00bfffd4 	movui	r2,65535
  809cec:	11c0612e 	bgeu	r2,r7,809e74 <__umoddi3+0x2ac>
  809cf0:	00804034 	movhi	r2,256
  809cf4:	10bfffc4 	addi	r2,r2,-1
  809cf8:	11c0f82e 	bgeu	r2,r7,80a0dc <__umoddi3+0x514>
  809cfc:	01400604 	movi	r5,24
  809d00:	282b883a 	mov	r21,r5
  809d04:	394ad83a 	srl	r5,r7,r5
  809d08:	00c02074 	movhi	r3,129
  809d0c:	18c2e004 	addi	r3,r3,2944
  809d10:	194b883a 	add	r5,r3,r5
  809d14:	28800003 	ldbu	r2,0(r5)
  809d18:	00c00804 	movi	r3,32
  809d1c:	156b883a 	add	r21,r2,r21
  809d20:	1d69c83a 	sub	r20,r3,r21
  809d24:	a000631e 	bne	r20,zero,809eb4 <__umoddi3+0x2ec>
  809d28:	3c400136 	bltu	r7,r17,809d30 <__umoddi3+0x168>
  809d2c:	81810436 	bltu	r16,r6,80a140 <__umoddi3+0x578>
  809d30:	8185c83a 	sub	r2,r16,r6
  809d34:	89e3c83a 	sub	r17,r17,r7
  809d38:	8087803a 	cmpltu	r3,r16,r2
  809d3c:	88efc83a 	sub	r23,r17,r3
  809d40:	b807883a 	mov	r3,r23
  809d44:	00003f06 	br	809e44 <__umoddi3+0x27c>
  809d48:	3000041e 	bne	r6,zero,809d5c <__umoddi3+0x194>
  809d4c:	01000044 	movi	r4,1
  809d50:	000b883a 	mov	r5,zero
  809d54:	080a2740 	call	80a274 <__udivsi3>
  809d58:	1027883a 	mov	r19,r2
  809d5c:	00bfffd4 	movui	r2,65535
  809d60:	14c04f2e 	bgeu	r2,r19,809ea0 <__umoddi3+0x2d8>
  809d64:	00804034 	movhi	r2,256
  809d68:	10bfffc4 	addi	r2,r2,-1
  809d6c:	14c0e42e 	bgeu	r2,r19,80a100 <__umoddi3+0x538>
  809d70:	00800604 	movi	r2,24
  809d74:	1007883a 	mov	r3,r2
  809d78:	9884d83a 	srl	r2,r19,r2
  809d7c:	01002074 	movhi	r4,129
  809d80:	2102e004 	addi	r4,r4,2944
  809d84:	2085883a 	add	r2,r4,r2
  809d88:	11000003 	ldbu	r4,0(r2)
  809d8c:	00800804 	movi	r2,32
  809d90:	20c7883a 	add	r3,r4,r3
  809d94:	10c5c83a 	sub	r2,r2,r3
  809d98:	10009a1e 	bne	r2,zero,80a004 <__umoddi3+0x43c>
  809d9c:	982cd43a 	srli	r22,r19,16
  809da0:	8ce3c83a 	sub	r17,r17,r19
  809da4:	9c3fffcc 	andi	r16,r19,65535
  809da8:	0025883a 	mov	r18,zero
  809dac:	8809883a 	mov	r4,r17
  809db0:	b00b883a 	mov	r5,r22
  809db4:	080a27c0 	call	80a27c <__umodsi3>
  809db8:	8809883a 	mov	r4,r17
  809dbc:	b00b883a 	mov	r5,r22
  809dc0:	102b883a 	mov	r21,r2
  809dc4:	080a2740 	call	80a274 <__udivsi3>
  809dc8:	a806943a 	slli	r3,r21,16
  809dcc:	a008d43a 	srli	r4,r20,16
  809dd0:	1405383a 	mul	r2,r2,r16
  809dd4:	190cb03a 	or	r6,r3,r4
  809dd8:	3080032e 	bgeu	r6,r2,809de8 <__umoddi3+0x220>
  809ddc:	34cd883a 	add	r6,r6,r19
  809de0:	34c00136 	bltu	r6,r19,809de8 <__umoddi3+0x220>
  809de4:	3080d436 	bltu	r6,r2,80a138 <__umoddi3+0x570>
  809de8:	30abc83a 	sub	r21,r6,r2
  809dec:	a809883a 	mov	r4,r21
  809df0:	b00b883a 	mov	r5,r22
  809df4:	080a27c0 	call	80a27c <__umodsi3>
  809df8:	1023883a 	mov	r17,r2
  809dfc:	a809883a 	mov	r4,r21
  809e00:	b00b883a 	mov	r5,r22
  809e04:	080a2740 	call	80a274 <__udivsi3>
  809e08:	8822943a 	slli	r17,r17,16
  809e0c:	1405383a 	mul	r2,r2,r16
  809e10:	a13fffcc 	andi	r4,r20,65535
  809e14:	8906b03a 	or	r3,r17,r4
  809e18:	1880042e 	bgeu	r3,r2,809e2c <__umoddi3+0x264>
  809e1c:	1cc7883a 	add	r3,r3,r19
  809e20:	1cc00236 	bltu	r3,r19,809e2c <__umoddi3+0x264>
  809e24:	1880012e 	bgeu	r3,r2,809e2c <__umoddi3+0x264>
  809e28:	1cc7883a 	add	r3,r3,r19
  809e2c:	1887c83a 	sub	r3,r3,r2
  809e30:	1c84d83a 	srl	r2,r3,r18
  809e34:	0007883a 	mov	r3,zero
  809e38:	00000206 	br	809e44 <__umoddi3+0x27c>
  809e3c:	2005883a 	mov	r2,r4
  809e40:	2807883a 	mov	r3,r5
  809e44:	dfc00b17 	ldw	ra,44(sp)
  809e48:	df000a17 	ldw	fp,40(sp)
  809e4c:	ddc00917 	ldw	r23,36(sp)
  809e50:	dd800817 	ldw	r22,32(sp)
  809e54:	dd400717 	ldw	r21,28(sp)
  809e58:	dd000617 	ldw	r20,24(sp)
  809e5c:	dcc00517 	ldw	r19,20(sp)
  809e60:	dc800417 	ldw	r18,16(sp)
  809e64:	dc400317 	ldw	r17,12(sp)
  809e68:	dc000217 	ldw	r16,8(sp)
  809e6c:	dec00c04 	addi	sp,sp,48
  809e70:	f800283a 	ret
  809e74:	00803fc4 	movi	r2,255
  809e78:	11c0952e 	bgeu	r2,r7,80a0d0 <__umoddi3+0x508>
  809e7c:	01400204 	movi	r5,8
  809e80:	282b883a 	mov	r21,r5
  809e84:	003f9f06 	br	809d04 <__alt_data_end+0xff809d04>
  809e88:	00804034 	movhi	r2,256
  809e8c:	10bfffc4 	addi	r2,r2,-1
  809e90:	1180952e 	bgeu	r2,r6,80a0e8 <__umoddi3+0x520>
  809e94:	01400604 	movi	r5,24
  809e98:	2805883a 	mov	r2,r5
  809e9c:	003f6206 	br	809c28 <__alt_data_end+0xff809c28>
  809ea0:	00803fc4 	movi	r2,255
  809ea4:	14c0932e 	bgeu	r2,r19,80a0f4 <__umoddi3+0x52c>
  809ea8:	00800204 	movi	r2,8
  809eac:	1007883a 	mov	r3,r2
  809eb0:	003fb106 	br	809d78 <__alt_data_end+0xff809d78>
  809eb4:	3548d83a 	srl	r4,r6,r21
  809eb8:	3d0e983a 	sll	r7,r7,r20
  809ebc:	8d10983a 	sll	r8,r17,r20
  809ec0:	8d6cd83a 	srl	r22,r17,r21
  809ec4:	3922b03a 	or	r17,r7,r4
  809ec8:	882ed43a 	srli	r23,r17,16
  809ecc:	8564d83a 	srl	r18,r16,r21
  809ed0:	b009883a 	mov	r4,r22
  809ed4:	b80b883a 	mov	r5,r23
  809ed8:	44a4b03a 	or	r18,r8,r18
  809edc:	3526983a 	sll	r19,r6,r20
  809ee0:	080a27c0 	call	80a27c <__umodsi3>
  809ee4:	b009883a 	mov	r4,r22
  809ee8:	b80b883a 	mov	r5,r23
  809eec:	1039883a 	mov	fp,r2
  809ef0:	080a2740 	call	80a274 <__udivsi3>
  809ef4:	102d883a 	mov	r22,r2
  809ef8:	8a3fffcc 	andi	r8,r17,65535
  809efc:	e004943a 	slli	r2,fp,16
  809f00:	900cd43a 	srli	r6,r18,16
  809f04:	b239383a 	mul	fp,r22,r8
  809f08:	8520983a 	sll	r16,r16,r20
  809f0c:	118ab03a 	or	r5,r2,r6
  809f10:	2f00042e 	bgeu	r5,fp,809f24 <__umoddi3+0x35c>
  809f14:	2c4b883a 	add	r5,r5,r17
  809f18:	b0bfffc4 	addi	r2,r22,-1
  809f1c:	2c40822e 	bgeu	r5,r17,80a128 <__umoddi3+0x560>
  809f20:	102d883a 	mov	r22,r2
  809f24:	2f39c83a 	sub	fp,r5,fp
  809f28:	e009883a 	mov	r4,fp
  809f2c:	b80b883a 	mov	r5,r23
  809f30:	da000115 	stw	r8,4(sp)
  809f34:	080a27c0 	call	80a27c <__umodsi3>
  809f38:	e009883a 	mov	r4,fp
  809f3c:	b80b883a 	mov	r5,r23
  809f40:	d8800015 	stw	r2,0(sp)
  809f44:	080a2740 	call	80a274 <__udivsi3>
  809f48:	d9800017 	ldw	r6,0(sp)
  809f4c:	da000117 	ldw	r8,4(sp)
  809f50:	94bfffcc 	andi	r18,r18,65535
  809f54:	300c943a 	slli	r6,r6,16
  809f58:	1209383a 	mul	r4,r2,r8
  809f5c:	3490b03a 	or	r8,r6,r18
  809f60:	4100042e 	bgeu	r8,r4,809f74 <__umoddi3+0x3ac>
  809f64:	4451883a 	add	r8,r8,r17
  809f68:	10ffffc4 	addi	r3,r2,-1
  809f6c:	44406a2e 	bgeu	r8,r17,80a118 <__umoddi3+0x550>
  809f70:	1805883a 	mov	r2,r3
  809f74:	b012943a 	slli	r9,r22,16
  809f78:	9abfffcc 	andi	r10,r19,65535
  809f7c:	980ed43a 	srli	r7,r19,16
  809f80:	124ab03a 	or	r5,r2,r9
  809f84:	2a7fffcc 	andi	r9,r5,65535
  809f88:	280ad43a 	srli	r5,r5,16
  809f8c:	4a8d383a 	mul	r6,r9,r10
  809f90:	49d3383a 	mul	r9,r9,r7
  809f94:	2a95383a 	mul	r10,r5,r10
  809f98:	3004d43a 	srli	r2,r6,16
  809f9c:	4111c83a 	sub	r8,r8,r4
  809fa0:	5253883a 	add	r9,r10,r9
  809fa4:	4893883a 	add	r9,r9,r2
  809fa8:	29cb383a 	mul	r5,r5,r7
  809fac:	4a80022e 	bgeu	r9,r10,809fb8 <__umoddi3+0x3f0>
  809fb0:	00800074 	movhi	r2,1
  809fb4:	288b883a 	add	r5,r5,r2
  809fb8:	4808d43a 	srli	r4,r9,16
  809fbc:	4812943a 	slli	r9,r9,16
  809fc0:	31bfffcc 	andi	r6,r6,65535
  809fc4:	290b883a 	add	r5,r5,r4
  809fc8:	498d883a 	add	r6,r9,r6
  809fcc:	41403a36 	bltu	r8,r5,80a0b8 <__umoddi3+0x4f0>
  809fd0:	41405d26 	beq	r8,r5,80a148 <__umoddi3+0x580>
  809fd4:	4149c83a 	sub	r4,r8,r5
  809fd8:	300f883a 	mov	r7,r6
  809fdc:	81cfc83a 	sub	r7,r16,r7
  809fe0:	81c7803a 	cmpltu	r3,r16,r7
  809fe4:	20c7c83a 	sub	r3,r4,r3
  809fe8:	1d44983a 	sll	r2,r3,r21
  809fec:	3d0ed83a 	srl	r7,r7,r20
  809ff0:	1d06d83a 	srl	r3,r3,r20
  809ff4:	11c4b03a 	or	r2,r2,r7
  809ff8:	003f9206 	br	809e44 <__alt_data_end+0xff809e44>
  809ffc:	0025883a 	mov	r18,zero
  80a000:	003f1806 	br	809c64 <__alt_data_end+0xff809c64>
  80a004:	98a6983a 	sll	r19,r19,r2
  80a008:	88e8d83a 	srl	r20,r17,r3
  80a00c:	80c6d83a 	srl	r3,r16,r3
  80a010:	982cd43a 	srli	r22,r19,16
  80a014:	88a2983a 	sll	r17,r17,r2
  80a018:	a009883a 	mov	r4,r20
  80a01c:	b00b883a 	mov	r5,r22
  80a020:	88eab03a 	or	r21,r17,r3
  80a024:	1025883a 	mov	r18,r2
  80a028:	080a27c0 	call	80a27c <__umodsi3>
  80a02c:	a009883a 	mov	r4,r20
  80a030:	b00b883a 	mov	r5,r22
  80a034:	1023883a 	mov	r17,r2
  80a038:	080a2740 	call	80a274 <__udivsi3>
  80a03c:	9f3fffcc 	andi	fp,r19,65535
  80a040:	8822943a 	slli	r17,r17,16
  80a044:	a80ad43a 	srli	r5,r21,16
  80a048:	1705383a 	mul	r2,r2,fp
  80a04c:	84a8983a 	sll	r20,r16,r18
  80a050:	8948b03a 	or	r4,r17,r5
  80a054:	2080042e 	bgeu	r4,r2,80a068 <__umoddi3+0x4a0>
  80a058:	24c9883a 	add	r4,r4,r19
  80a05c:	24c00236 	bltu	r4,r19,80a068 <__umoddi3+0x4a0>
  80a060:	2080012e 	bgeu	r4,r2,80a068 <__umoddi3+0x4a0>
  80a064:	24c9883a 	add	r4,r4,r19
  80a068:	20afc83a 	sub	r23,r4,r2
  80a06c:	b809883a 	mov	r4,r23
  80a070:	b00b883a 	mov	r5,r22
  80a074:	080a27c0 	call	80a27c <__umodsi3>
  80a078:	1023883a 	mov	r17,r2
  80a07c:	b809883a 	mov	r4,r23
  80a080:	b00b883a 	mov	r5,r22
  80a084:	080a2740 	call	80a274 <__udivsi3>
  80a088:	8822943a 	slli	r17,r17,16
  80a08c:	1705383a 	mul	r2,r2,fp
  80a090:	a93fffcc 	andi	r4,r21,65535
  80a094:	8908b03a 	or	r4,r17,r4
  80a098:	2080042e 	bgeu	r4,r2,80a0ac <__umoddi3+0x4e4>
  80a09c:	24c9883a 	add	r4,r4,r19
  80a0a0:	24c00236 	bltu	r4,r19,80a0ac <__umoddi3+0x4e4>
  80a0a4:	2080012e 	bgeu	r4,r2,80a0ac <__umoddi3+0x4e4>
  80a0a8:	24c9883a 	add	r4,r4,r19
  80a0ac:	20a3c83a 	sub	r17,r4,r2
  80a0b0:	e021883a 	mov	r16,fp
  80a0b4:	003f3d06 	br	809dac <__alt_data_end+0xff809dac>
  80a0b8:	34cfc83a 	sub	r7,r6,r19
  80a0bc:	2c4bc83a 	sub	r5,r5,r17
  80a0c0:	31cd803a 	cmpltu	r6,r6,r7
  80a0c4:	298dc83a 	sub	r6,r5,r6
  80a0c8:	4189c83a 	sub	r4,r8,r6
  80a0cc:	003fc306 	br	809fdc <__alt_data_end+0xff809fdc>
  80a0d0:	000b883a 	mov	r5,zero
  80a0d4:	002b883a 	mov	r21,zero
  80a0d8:	003f0a06 	br	809d04 <__alt_data_end+0xff809d04>
  80a0dc:	01400404 	movi	r5,16
  80a0e0:	282b883a 	mov	r21,r5
  80a0e4:	003f0706 	br	809d04 <__alt_data_end+0xff809d04>
  80a0e8:	01400404 	movi	r5,16
  80a0ec:	2805883a 	mov	r2,r5
  80a0f0:	003ecd06 	br	809c28 <__alt_data_end+0xff809c28>
  80a0f4:	0005883a 	mov	r2,zero
  80a0f8:	0007883a 	mov	r3,zero
  80a0fc:	003f1e06 	br	809d78 <__alt_data_end+0xff809d78>
  80a100:	00800404 	movi	r2,16
  80a104:	1007883a 	mov	r3,r2
  80a108:	003f1b06 	br	809d78 <__alt_data_end+0xff809d78>
  80a10c:	000b883a 	mov	r5,zero
  80a110:	0005883a 	mov	r2,zero
  80a114:	003ec406 	br	809c28 <__alt_data_end+0xff809c28>
  80a118:	413f952e 	bgeu	r8,r4,809f70 <__alt_data_end+0xff809f70>
  80a11c:	10bfff84 	addi	r2,r2,-2
  80a120:	4451883a 	add	r8,r8,r17
  80a124:	003f9306 	br	809f74 <__alt_data_end+0xff809f74>
  80a128:	2f3f7d2e 	bgeu	r5,fp,809f20 <__alt_data_end+0xff809f20>
  80a12c:	b5bfff84 	addi	r22,r22,-2
  80a130:	2c4b883a 	add	r5,r5,r17
  80a134:	003f7b06 	br	809f24 <__alt_data_end+0xff809f24>
  80a138:	34cd883a 	add	r6,r6,r19
  80a13c:	003f2a06 	br	809de8 <__alt_data_end+0xff809de8>
  80a140:	8005883a 	mov	r2,r16
  80a144:	003efe06 	br	809d40 <__alt_data_end+0xff809d40>
  80a148:	81bfdb36 	bltu	r16,r6,80a0b8 <__alt_data_end+0xff80a0b8>
  80a14c:	300f883a 	mov	r7,r6
  80a150:	0009883a 	mov	r4,zero
  80a154:	003fa106 	br	809fdc <__alt_data_end+0xff809fdc>

0080a158 <udivmodsi4>:
  80a158:	2900182e 	bgeu	r5,r4,80a1bc <udivmodsi4+0x64>
  80a15c:	28001716 	blt	r5,zero,80a1bc <udivmodsi4+0x64>
  80a160:	00800804 	movi	r2,32
  80a164:	00c00044 	movi	r3,1
  80a168:	00000206 	br	80a174 <udivmodsi4+0x1c>
  80a16c:	10001126 	beq	r2,zero,80a1b4 <udivmodsi4+0x5c>
  80a170:	28000516 	blt	r5,zero,80a188 <udivmodsi4+0x30>
  80a174:	294b883a 	add	r5,r5,r5
  80a178:	10bfffc4 	addi	r2,r2,-1
  80a17c:	18c7883a 	add	r3,r3,r3
  80a180:	293ffa36 	bltu	r5,r4,80a16c <__alt_data_end+0xff80a16c>
  80a184:	18000b26 	beq	r3,zero,80a1b4 <udivmodsi4+0x5c>
  80a188:	0005883a 	mov	r2,zero
  80a18c:	21400236 	bltu	r4,r5,80a198 <udivmodsi4+0x40>
  80a190:	2149c83a 	sub	r4,r4,r5
  80a194:	10c4b03a 	or	r2,r2,r3
  80a198:	1806d07a 	srli	r3,r3,1
  80a19c:	280ad07a 	srli	r5,r5,1
  80a1a0:	183ffa1e 	bne	r3,zero,80a18c <__alt_data_end+0xff80a18c>
  80a1a4:	3000011e 	bne	r6,zero,80a1ac <udivmodsi4+0x54>
  80a1a8:	f800283a 	ret
  80a1ac:	2005883a 	mov	r2,r4
  80a1b0:	f800283a 	ret
  80a1b4:	0005883a 	mov	r2,zero
  80a1b8:	003ffa06 	br	80a1a4 <__alt_data_end+0xff80a1a4>
  80a1bc:	00c00044 	movi	r3,1
  80a1c0:	003ff106 	br	80a188 <__alt_data_end+0xff80a188>

0080a1c4 <__divsi3>:
  80a1c4:	defffe04 	addi	sp,sp,-8
  80a1c8:	dfc00115 	stw	ra,4(sp)
  80a1cc:	dc000015 	stw	r16,0(sp)
  80a1d0:	20000b16 	blt	r4,zero,80a200 <__divsi3+0x3c>
  80a1d4:	0021883a 	mov	r16,zero
  80a1d8:	28000c16 	blt	r5,zero,80a20c <__divsi3+0x48>
  80a1dc:	000d883a 	mov	r6,zero
  80a1e0:	080a1580 	call	80a158 <udivmodsi4>
  80a1e4:	0407c83a 	sub	r3,zero,r16
  80a1e8:	1884f03a 	xor	r2,r3,r2
  80a1ec:	1405883a 	add	r2,r2,r16
  80a1f0:	dfc00117 	ldw	ra,4(sp)
  80a1f4:	dc000017 	ldw	r16,0(sp)
  80a1f8:	dec00204 	addi	sp,sp,8
  80a1fc:	f800283a 	ret
  80a200:	0109c83a 	sub	r4,zero,r4
  80a204:	04000044 	movi	r16,1
  80a208:	283ff40e 	bge	r5,zero,80a1dc <__alt_data_end+0xff80a1dc>
  80a20c:	014bc83a 	sub	r5,zero,r5
  80a210:	8400005c 	xori	r16,r16,1
  80a214:	003ff106 	br	80a1dc <__alt_data_end+0xff80a1dc>

0080a218 <__modsi3>:
  80a218:	defffd04 	addi	sp,sp,-12
  80a21c:	dfc00215 	stw	ra,8(sp)
  80a220:	dc400115 	stw	r17,4(sp)
  80a224:	dc000015 	stw	r16,0(sp)
  80a228:	20000c16 	blt	r4,zero,80a25c <__modsi3+0x44>
  80a22c:	0023883a 	mov	r17,zero
  80a230:	0021883a 	mov	r16,zero
  80a234:	28000d16 	blt	r5,zero,80a26c <__modsi3+0x54>
  80a238:	01800044 	movi	r6,1
  80a23c:	080a1580 	call	80a158 <udivmodsi4>
  80a240:	1404f03a 	xor	r2,r2,r16
  80a244:	8885883a 	add	r2,r17,r2
  80a248:	dfc00217 	ldw	ra,8(sp)
  80a24c:	dc400117 	ldw	r17,4(sp)
  80a250:	dc000017 	ldw	r16,0(sp)
  80a254:	dec00304 	addi	sp,sp,12
  80a258:	f800283a 	ret
  80a25c:	0109c83a 	sub	r4,zero,r4
  80a260:	04400044 	movi	r17,1
  80a264:	043fffc4 	movi	r16,-1
  80a268:	283ff30e 	bge	r5,zero,80a238 <__alt_data_end+0xff80a238>
  80a26c:	014bc83a 	sub	r5,zero,r5
  80a270:	003ff106 	br	80a238 <__alt_data_end+0xff80a238>

0080a274 <__udivsi3>:
  80a274:	000d883a 	mov	r6,zero
  80a278:	080a1581 	jmpi	80a158 <udivmodsi4>

0080a27c <__umodsi3>:
  80a27c:	01800044 	movi	r6,1
  80a280:	080a1581 	jmpi	80a158 <udivmodsi4>

0080a284 <__adddf3>:
  80a284:	02000434 	movhi	r8,16
  80a288:	423fffc4 	addi	r8,r8,-1
  80a28c:	defffb04 	addi	sp,sp,-20
  80a290:	2a12703a 	and	r9,r5,r8
  80a294:	2806d7fa 	srli	r3,r5,31
  80a298:	3a10703a 	and	r8,r7,r8
  80a29c:	3804d53a 	srli	r2,r7,20
  80a2a0:	3014d77a 	srli	r10,r6,29
  80a2a4:	dc000015 	stw	r16,0(sp)
  80a2a8:	481290fa 	slli	r9,r9,3
  80a2ac:	2820d53a 	srli	r16,r5,20
  80a2b0:	401090fa 	slli	r8,r8,3
  80a2b4:	200ad77a 	srli	r5,r4,29
  80a2b8:	380ed7fa 	srli	r7,r7,31
  80a2bc:	dc800215 	stw	r18,8(sp)
  80a2c0:	dc400115 	stw	r17,4(sp)
  80a2c4:	dfc00415 	stw	ra,16(sp)
  80a2c8:	dcc00315 	stw	r19,12(sp)
  80a2cc:	1c803fcc 	andi	r18,r3,255
  80a2d0:	8401ffcc 	andi	r16,r16,2047
  80a2d4:	494ab03a 	or	r5,r9,r5
  80a2d8:	202290fa 	slli	r17,r4,3
  80a2dc:	1081ffcc 	andi	r2,r2,2047
  80a2e0:	4290b03a 	or	r8,r8,r10
  80a2e4:	300c90fa 	slli	r6,r6,3
  80a2e8:	91c07026 	beq	r18,r7,80a4ac <__adddf3+0x228>
  80a2ec:	8087c83a 	sub	r3,r16,r2
  80a2f0:	00c0b30e 	bge	zero,r3,80a5c0 <__adddf3+0x33c>
  80a2f4:	10002a1e 	bne	r2,zero,80a3a0 <__adddf3+0x11c>
  80a2f8:	4184b03a 	or	r2,r8,r6
  80a2fc:	1000991e 	bne	r2,zero,80a564 <__adddf3+0x2e0>
  80a300:	888001cc 	andi	r2,r17,7
  80a304:	10005b26 	beq	r2,zero,80a474 <__adddf3+0x1f0>
  80a308:	88c003cc 	andi	r3,r17,15
  80a30c:	00800104 	movi	r2,4
  80a310:	18805826 	beq	r3,r2,80a474 <__adddf3+0x1f0>
  80a314:	89800104 	addi	r6,r17,4
  80a318:	3463803a 	cmpltu	r17,r6,r17
  80a31c:	2c4b883a 	add	r5,r5,r17
  80a320:	2880202c 	andhi	r2,r5,128
  80a324:	9007883a 	mov	r3,r18
  80a328:	3023883a 	mov	r17,r6
  80a32c:	10005426 	beq	r2,zero,80a480 <__adddf3+0x1fc>
  80a330:	84000044 	addi	r16,r16,1
  80a334:	0081ffc4 	movi	r2,2047
  80a338:	8080c126 	beq	r16,r2,80a640 <__adddf3+0x3bc>
  80a33c:	013fe034 	movhi	r4,65408
  80a340:	213fffc4 	addi	r4,r4,-1
  80a344:	290a703a 	and	r5,r5,r4
  80a348:	2804977a 	slli	r2,r5,29
  80a34c:	280a927a 	slli	r5,r5,9
  80a350:	8822d0fa 	srli	r17,r17,3
  80a354:	8401ffcc 	andi	r16,r16,2047
  80a358:	2808d33a 	srli	r4,r5,12
  80a35c:	1444b03a 	or	r2,r2,r17
  80a360:	8401ffcc 	andi	r16,r16,2047
  80a364:	800a953a 	slli	r5,r16,20
  80a368:	18c03fcc 	andi	r3,r3,255
  80a36c:	04000434 	movhi	r16,16
  80a370:	180697fa 	slli	r3,r3,31
  80a374:	843fffc4 	addi	r16,r16,-1
  80a378:	2420703a 	and	r16,r4,r16
  80a37c:	8160b03a 	or	r16,r16,r5
  80a380:	80c6b03a 	or	r3,r16,r3
  80a384:	dfc00417 	ldw	ra,16(sp)
  80a388:	dcc00317 	ldw	r19,12(sp)
  80a38c:	dc800217 	ldw	r18,8(sp)
  80a390:	dc400117 	ldw	r17,4(sp)
  80a394:	dc000017 	ldw	r16,0(sp)
  80a398:	dec00504 	addi	sp,sp,20
  80a39c:	f800283a 	ret
  80a3a0:	0081ffc4 	movi	r2,2047
  80a3a4:	80bfd626 	beq	r16,r2,80a300 <__alt_data_end+0xff80a300>
  80a3a8:	42002034 	orhi	r8,r8,128
  80a3ac:	00800e04 	movi	r2,56
  80a3b0:	10c0a616 	blt	r2,r3,80a64c <__adddf3+0x3c8>
  80a3b4:	008007c4 	movi	r2,31
  80a3b8:	10c0c916 	blt	r2,r3,80a6e0 <__adddf3+0x45c>
  80a3bc:	00800804 	movi	r2,32
  80a3c0:	10c5c83a 	sub	r2,r2,r3
  80a3c4:	408e983a 	sll	r7,r8,r2
  80a3c8:	30c8d83a 	srl	r4,r6,r3
  80a3cc:	3084983a 	sll	r2,r6,r2
  80a3d0:	40c6d83a 	srl	r3,r8,r3
  80a3d4:	390cb03a 	or	r6,r7,r4
  80a3d8:	1004c03a 	cmpne	r2,r2,zero
  80a3dc:	308cb03a 	or	r6,r6,r2
  80a3e0:	898dc83a 	sub	r6,r17,r6
  80a3e4:	89a3803a 	cmpltu	r17,r17,r6
  80a3e8:	28cbc83a 	sub	r5,r5,r3
  80a3ec:	2c4bc83a 	sub	r5,r5,r17
  80a3f0:	3023883a 	mov	r17,r6
  80a3f4:	2880202c 	andhi	r2,r5,128
  80a3f8:	10006d26 	beq	r2,zero,80a5b0 <__adddf3+0x32c>
  80a3fc:	04c02034 	movhi	r19,128
  80a400:	9cffffc4 	addi	r19,r19,-1
  80a404:	2ce6703a 	and	r19,r5,r19
  80a408:	98007e26 	beq	r19,zero,80a604 <__adddf3+0x380>
  80a40c:	9809883a 	mov	r4,r19
  80a410:	080c8200 	call	80c820 <__clzsi2>
  80a414:	10fffe04 	addi	r3,r2,-8
  80a418:	010007c4 	movi	r4,31
  80a41c:	20c07f16 	blt	r4,r3,80a61c <__adddf3+0x398>
  80a420:	01400a04 	movi	r5,40
  80a424:	2885c83a 	sub	r2,r5,r2
  80a428:	888ad83a 	srl	r5,r17,r2
  80a42c:	98e6983a 	sll	r19,r19,r3
  80a430:	88e2983a 	sll	r17,r17,r3
  80a434:	2ce6b03a 	or	r19,r5,r19
  80a438:	1c007c16 	blt	r3,r16,80a62c <__adddf3+0x3a8>
  80a43c:	1c21c83a 	sub	r16,r3,r16
  80a440:	81400044 	addi	r5,r16,1
  80a444:	00c007c4 	movi	r3,31
  80a448:	19409816 	blt	r3,r5,80a6ac <__adddf3+0x428>
  80a44c:	1c21c83a 	sub	r16,r3,r16
  80a450:	8c08983a 	sll	r4,r17,r16
  80a454:	8946d83a 	srl	r3,r17,r5
  80a458:	9c20983a 	sll	r16,r19,r16
  80a45c:	2008c03a 	cmpne	r4,r4,zero
  80a460:	994ad83a 	srl	r5,r19,r5
  80a464:	1c06b03a 	or	r3,r3,r16
  80a468:	1922b03a 	or	r17,r3,r4
  80a46c:	0021883a 	mov	r16,zero
  80a470:	003fa306 	br	80a300 <__alt_data_end+0xff80a300>
  80a474:	2880202c 	andhi	r2,r5,128
  80a478:	9007883a 	mov	r3,r18
  80a47c:	103fac1e 	bne	r2,zero,80a330 <__alt_data_end+0xff80a330>
  80a480:	2804977a 	slli	r2,r5,29
  80a484:	8822d0fa 	srli	r17,r17,3
  80a488:	0101ffc4 	movi	r4,2047
  80a48c:	280ad0fa 	srli	r5,r5,3
  80a490:	1444b03a 	or	r2,r2,r17
  80a494:	81002c26 	beq	r16,r4,80a548 <__adddf3+0x2c4>
  80a498:	8120703a 	and	r16,r16,r4
  80a49c:	01000434 	movhi	r4,16
  80a4a0:	213fffc4 	addi	r4,r4,-1
  80a4a4:	2908703a 	and	r4,r5,r4
  80a4a8:	003fad06 	br	80a360 <__alt_data_end+0xff80a360>
  80a4ac:	8089c83a 	sub	r4,r16,r2
  80a4b0:	01006a0e 	bge	zero,r4,80a65c <__adddf3+0x3d8>
  80a4b4:	10003326 	beq	r2,zero,80a584 <__adddf3+0x300>
  80a4b8:	0081ffc4 	movi	r2,2047
  80a4bc:	80bf9026 	beq	r16,r2,80a300 <__alt_data_end+0xff80a300>
  80a4c0:	42002034 	orhi	r8,r8,128
  80a4c4:	00800e04 	movi	r2,56
  80a4c8:	1100b116 	blt	r2,r4,80a790 <__adddf3+0x50c>
  80a4cc:	008007c4 	movi	r2,31
  80a4d0:	1100e216 	blt	r2,r4,80a85c <__adddf3+0x5d8>
  80a4d4:	00800804 	movi	r2,32
  80a4d8:	1105c83a 	sub	r2,r2,r4
  80a4dc:	4092983a 	sll	r9,r8,r2
  80a4e0:	310ed83a 	srl	r7,r6,r4
  80a4e4:	3084983a 	sll	r2,r6,r2
  80a4e8:	4110d83a 	srl	r8,r8,r4
  80a4ec:	49ccb03a 	or	r6,r9,r7
  80a4f0:	1004c03a 	cmpne	r2,r2,zero
  80a4f4:	308cb03a 	or	r6,r6,r2
  80a4f8:	344d883a 	add	r6,r6,r17
  80a4fc:	3463803a 	cmpltu	r17,r6,r17
  80a500:	414b883a 	add	r5,r8,r5
  80a504:	2c4b883a 	add	r5,r5,r17
  80a508:	3023883a 	mov	r17,r6
  80a50c:	2880202c 	andhi	r2,r5,128
  80a510:	10002726 	beq	r2,zero,80a5b0 <__adddf3+0x32c>
  80a514:	84000044 	addi	r16,r16,1
  80a518:	0081ffc4 	movi	r2,2047
  80a51c:	8080ae26 	beq	r16,r2,80a7d8 <__adddf3+0x554>
  80a520:	00bfe034 	movhi	r2,65408
  80a524:	10bfffc4 	addi	r2,r2,-1
  80a528:	288a703a 	and	r5,r5,r2
  80a52c:	880cd07a 	srli	r6,r17,1
  80a530:	280897fa 	slli	r4,r5,31
  80a534:	88c0004c 	andi	r3,r17,1
  80a538:	30e2b03a 	or	r17,r6,r3
  80a53c:	280ad07a 	srli	r5,r5,1
  80a540:	8922b03a 	or	r17,r17,r4
  80a544:	003f6e06 	br	80a300 <__alt_data_end+0xff80a300>
  80a548:	1148b03a 	or	r4,r2,r5
  80a54c:	20003c26 	beq	r4,zero,80a640 <__adddf3+0x3bc>
  80a550:	29000234 	orhi	r4,r5,8
  80a554:	01400434 	movhi	r5,16
  80a558:	297fffc4 	addi	r5,r5,-1
  80a55c:	2148703a 	and	r4,r4,r5
  80a560:	003f7f06 	br	80a360 <__alt_data_end+0xff80a360>
  80a564:	18ffffc4 	addi	r3,r3,-1
  80a568:	18004d1e 	bne	r3,zero,80a6a0 <__adddf3+0x41c>
  80a56c:	898dc83a 	sub	r6,r17,r6
  80a570:	89a3803a 	cmpltu	r17,r17,r6
  80a574:	2a0bc83a 	sub	r5,r5,r8
  80a578:	2c4bc83a 	sub	r5,r5,r17
  80a57c:	3023883a 	mov	r17,r6
  80a580:	003f9c06 	br	80a3f4 <__alt_data_end+0xff80a3f4>
  80a584:	4184b03a 	or	r2,r8,r6
  80a588:	103f5d26 	beq	r2,zero,80a300 <__alt_data_end+0xff80a300>
  80a58c:	213fffc4 	addi	r4,r4,-1
  80a590:	203fd926 	beq	r4,zero,80a4f8 <__alt_data_end+0xff80a4f8>
  80a594:	0081ffc4 	movi	r2,2047
  80a598:	80bfca1e 	bne	r16,r2,80a4c4 <__alt_data_end+0xff80a4c4>
  80a59c:	003f5806 	br	80a300 <__alt_data_end+0xff80a300>
  80a5a0:	10c8b03a 	or	r4,r2,r3
  80a5a4:	20008b26 	beq	r4,zero,80a7d4 <__adddf3+0x550>
  80a5a8:	100b883a 	mov	r5,r2
  80a5ac:	1823883a 	mov	r17,r3
  80a5b0:	888001cc 	andi	r2,r17,7
  80a5b4:	103f541e 	bne	r2,zero,80a308 <__alt_data_end+0xff80a308>
  80a5b8:	9007883a 	mov	r3,r18
  80a5bc:	003fb006 	br	80a480 <__alt_data_end+0xff80a480>
  80a5c0:	1800531e 	bne	r3,zero,80a710 <__adddf3+0x48c>
  80a5c4:	80800044 	addi	r2,r16,1
  80a5c8:	1081ffcc 	andi	r2,r2,2047
  80a5cc:	00c00044 	movi	r3,1
  80a5d0:	1880990e 	bge	r3,r2,80a838 <__adddf3+0x5b4>
  80a5d4:	8985c83a 	sub	r2,r17,r6
  80a5d8:	8887803a 	cmpltu	r3,r17,r2
  80a5dc:	2a27c83a 	sub	r19,r5,r8
  80a5e0:	98e7c83a 	sub	r19,r19,r3
  80a5e4:	98c0202c 	andhi	r3,r19,128
  80a5e8:	18006226 	beq	r3,zero,80a774 <__adddf3+0x4f0>
  80a5ec:	3463c83a 	sub	r17,r6,r17
  80a5f0:	4151c83a 	sub	r8,r8,r5
  80a5f4:	344d803a 	cmpltu	r6,r6,r17
  80a5f8:	41a7c83a 	sub	r19,r8,r6
  80a5fc:	3825883a 	mov	r18,r7
  80a600:	983f821e 	bne	r19,zero,80a40c <__alt_data_end+0xff80a40c>
  80a604:	8809883a 	mov	r4,r17
  80a608:	080c8200 	call	80c820 <__clzsi2>
  80a60c:	10800804 	addi	r2,r2,32
  80a610:	10fffe04 	addi	r3,r2,-8
  80a614:	010007c4 	movi	r4,31
  80a618:	20ff810e 	bge	r4,r3,80a420 <__alt_data_end+0xff80a420>
  80a61c:	14fff604 	addi	r19,r2,-40
  80a620:	8ce6983a 	sll	r19,r17,r19
  80a624:	0023883a 	mov	r17,zero
  80a628:	1c3f840e 	bge	r3,r16,80a43c <__alt_data_end+0xff80a43c>
  80a62c:	017fe034 	movhi	r5,65408
  80a630:	297fffc4 	addi	r5,r5,-1
  80a634:	80e1c83a 	sub	r16,r16,r3
  80a638:	994a703a 	and	r5,r19,r5
  80a63c:	003f3006 	br	80a300 <__alt_data_end+0xff80a300>
  80a640:	0009883a 	mov	r4,zero
  80a644:	0005883a 	mov	r2,zero
  80a648:	003f4506 	br	80a360 <__alt_data_end+0xff80a360>
  80a64c:	418cb03a 	or	r6,r8,r6
  80a650:	300cc03a 	cmpne	r6,r6,zero
  80a654:	0007883a 	mov	r3,zero
  80a658:	003f6106 	br	80a3e0 <__alt_data_end+0xff80a3e0>
  80a65c:	2000921e 	bne	r4,zero,80a8a8 <__adddf3+0x624>
  80a660:	80800044 	addi	r2,r16,1
  80a664:	11c1ffcc 	andi	r7,r2,2047
  80a668:	01000044 	movi	r4,1
  80a66c:	21c0610e 	bge	r4,r7,80a7f4 <__adddf3+0x570>
  80a670:	0101ffc4 	movi	r4,2047
  80a674:	1100a326 	beq	r2,r4,80a904 <__adddf3+0x680>
  80a678:	344d883a 	add	r6,r6,r17
  80a67c:	3463803a 	cmpltu	r17,r6,r17
  80a680:	414b883a 	add	r5,r8,r5
  80a684:	2c4b883a 	add	r5,r5,r17
  80a688:	282297fa 	slli	r17,r5,31
  80a68c:	300cd07a 	srli	r6,r6,1
  80a690:	280ad07a 	srli	r5,r5,1
  80a694:	1021883a 	mov	r16,r2
  80a698:	89a2b03a 	or	r17,r17,r6
  80a69c:	003f1806 	br	80a300 <__alt_data_end+0xff80a300>
  80a6a0:	0081ffc4 	movi	r2,2047
  80a6a4:	80bf411e 	bne	r16,r2,80a3ac <__alt_data_end+0xff80a3ac>
  80a6a8:	003f1506 	br	80a300 <__alt_data_end+0xff80a300>
  80a6ac:	80bff844 	addi	r2,r16,-31
  80a6b0:	00c00804 	movi	r3,32
  80a6b4:	9884d83a 	srl	r2,r19,r2
  80a6b8:	28c04a26 	beq	r5,r3,80a7e4 <__adddf3+0x560>
  80a6bc:	00c00fc4 	movi	r3,63
  80a6c0:	1c21c83a 	sub	r16,r3,r16
  80a6c4:	9c26983a 	sll	r19,r19,r16
  80a6c8:	9c62b03a 	or	r17,r19,r17
  80a6cc:	8822c03a 	cmpne	r17,r17,zero
  80a6d0:	88a2b03a 	or	r17,r17,r2
  80a6d4:	000b883a 	mov	r5,zero
  80a6d8:	0021883a 	mov	r16,zero
  80a6dc:	003fb406 	br	80a5b0 <__alt_data_end+0xff80a5b0>
  80a6e0:	18bff804 	addi	r2,r3,-32
  80a6e4:	01000804 	movi	r4,32
  80a6e8:	4084d83a 	srl	r2,r8,r2
  80a6ec:	19003f26 	beq	r3,r4,80a7ec <__adddf3+0x568>
  80a6f0:	01001004 	movi	r4,64
  80a6f4:	20c7c83a 	sub	r3,r4,r3
  80a6f8:	40d0983a 	sll	r8,r8,r3
  80a6fc:	418cb03a 	or	r6,r8,r6
  80a700:	300cc03a 	cmpne	r6,r6,zero
  80a704:	308cb03a 	or	r6,r6,r2
  80a708:	0007883a 	mov	r3,zero
  80a70c:	003f3406 	br	80a3e0 <__alt_data_end+0xff80a3e0>
  80a710:	80002326 	beq	r16,zero,80a7a0 <__adddf3+0x51c>
  80a714:	0101ffc4 	movi	r4,2047
  80a718:	11005e26 	beq	r2,r4,80a894 <__adddf3+0x610>
  80a71c:	00c7c83a 	sub	r3,zero,r3
  80a720:	29402034 	orhi	r5,r5,128
  80a724:	01000e04 	movi	r4,56
  80a728:	20c07216 	blt	r4,r3,80a8f4 <__adddf3+0x670>
  80a72c:	010007c4 	movi	r4,31
  80a730:	20c0ce16 	blt	r4,r3,80aa6c <__adddf3+0x7e8>
  80a734:	01000804 	movi	r4,32
  80a738:	20c9c83a 	sub	r4,r4,r3
  80a73c:	2914983a 	sll	r10,r5,r4
  80a740:	88d2d83a 	srl	r9,r17,r3
  80a744:	8908983a 	sll	r4,r17,r4
  80a748:	28c6d83a 	srl	r3,r5,r3
  80a74c:	5262b03a 	or	r17,r10,r9
  80a750:	2008c03a 	cmpne	r4,r4,zero
  80a754:	8922b03a 	or	r17,r17,r4
  80a758:	3463c83a 	sub	r17,r6,r17
  80a75c:	40c7c83a 	sub	r3,r8,r3
  80a760:	344d803a 	cmpltu	r6,r6,r17
  80a764:	198bc83a 	sub	r5,r3,r6
  80a768:	1021883a 	mov	r16,r2
  80a76c:	3825883a 	mov	r18,r7
  80a770:	003f2006 	br	80a3f4 <__alt_data_end+0xff80a3f4>
  80a774:	9886b03a 	or	r3,r19,r2
  80a778:	1800141e 	bne	r3,zero,80a7cc <__adddf3+0x548>
  80a77c:	0007883a 	mov	r3,zero
  80a780:	000b883a 	mov	r5,zero
  80a784:	0023883a 	mov	r17,zero
  80a788:	0021883a 	mov	r16,zero
  80a78c:	003f3c06 	br	80a480 <__alt_data_end+0xff80a480>
  80a790:	418cb03a 	or	r6,r8,r6
  80a794:	300cc03a 	cmpne	r6,r6,zero
  80a798:	0011883a 	mov	r8,zero
  80a79c:	003f5606 	br	80a4f8 <__alt_data_end+0xff80a4f8>
  80a7a0:	2c48b03a 	or	r4,r5,r17
  80a7a4:	20003b26 	beq	r4,zero,80a894 <__adddf3+0x610>
  80a7a8:	00c6303a 	nor	r3,zero,r3
  80a7ac:	1800371e 	bne	r3,zero,80a88c <__adddf3+0x608>
  80a7b0:	3463c83a 	sub	r17,r6,r17
  80a7b4:	414bc83a 	sub	r5,r8,r5
  80a7b8:	344d803a 	cmpltu	r6,r6,r17
  80a7bc:	298bc83a 	sub	r5,r5,r6
  80a7c0:	1021883a 	mov	r16,r2
  80a7c4:	3825883a 	mov	r18,r7
  80a7c8:	003f0a06 	br	80a3f4 <__alt_data_end+0xff80a3f4>
  80a7cc:	1023883a 	mov	r17,r2
  80a7d0:	003f0d06 	br	80a408 <__alt_data_end+0xff80a408>
  80a7d4:	0007883a 	mov	r3,zero
  80a7d8:	000b883a 	mov	r5,zero
  80a7dc:	0023883a 	mov	r17,zero
  80a7e0:	003f2706 	br	80a480 <__alt_data_end+0xff80a480>
  80a7e4:	0027883a 	mov	r19,zero
  80a7e8:	003fb706 	br	80a6c8 <__alt_data_end+0xff80a6c8>
  80a7ec:	0011883a 	mov	r8,zero
  80a7f0:	003fc206 	br	80a6fc <__alt_data_end+0xff80a6fc>
  80a7f4:	2c44b03a 	or	r2,r5,r17
  80a7f8:	8000871e 	bne	r16,zero,80aa18 <__adddf3+0x794>
  80a7fc:	1000b126 	beq	r2,zero,80aac4 <__adddf3+0x840>
  80a800:	4184b03a 	or	r2,r8,r6
  80a804:	103ebe26 	beq	r2,zero,80a300 <__alt_data_end+0xff80a300>
  80a808:	3445883a 	add	r2,r6,r17
  80a80c:	1463803a 	cmpltu	r17,r2,r17
  80a810:	414b883a 	add	r5,r8,r5
  80a814:	2c4b883a 	add	r5,r5,r17
  80a818:	28c0202c 	andhi	r3,r5,128
  80a81c:	1023883a 	mov	r17,r2
  80a820:	183f6326 	beq	r3,zero,80a5b0 <__alt_data_end+0xff80a5b0>
  80a824:	00bfe034 	movhi	r2,65408
  80a828:	10bfffc4 	addi	r2,r2,-1
  80a82c:	2021883a 	mov	r16,r4
  80a830:	288a703a 	and	r5,r5,r2
  80a834:	003eb206 	br	80a300 <__alt_data_end+0xff80a300>
  80a838:	2c44b03a 	or	r2,r5,r17
  80a83c:	8000251e 	bne	r16,zero,80a8d4 <__adddf3+0x650>
  80a840:	10004b1e 	bne	r2,zero,80a970 <__adddf3+0x6ec>
  80a844:	4184b03a 	or	r2,r8,r6
  80a848:	103fe226 	beq	r2,zero,80a7d4 <__alt_data_end+0xff80a7d4>
  80a84c:	400b883a 	mov	r5,r8
  80a850:	3023883a 	mov	r17,r6
  80a854:	3825883a 	mov	r18,r7
  80a858:	003ea906 	br	80a300 <__alt_data_end+0xff80a300>
  80a85c:	20bff804 	addi	r2,r4,-32
  80a860:	01c00804 	movi	r7,32
  80a864:	4084d83a 	srl	r2,r8,r2
  80a868:	21c07e26 	beq	r4,r7,80aa64 <__adddf3+0x7e0>
  80a86c:	01c01004 	movi	r7,64
  80a870:	3909c83a 	sub	r4,r7,r4
  80a874:	4110983a 	sll	r8,r8,r4
  80a878:	418cb03a 	or	r6,r8,r6
  80a87c:	300cc03a 	cmpne	r6,r6,zero
  80a880:	308cb03a 	or	r6,r6,r2
  80a884:	0011883a 	mov	r8,zero
  80a888:	003f1b06 	br	80a4f8 <__alt_data_end+0xff80a4f8>
  80a88c:	0101ffc4 	movi	r4,2047
  80a890:	113fa41e 	bne	r2,r4,80a724 <__alt_data_end+0xff80a724>
  80a894:	400b883a 	mov	r5,r8
  80a898:	3023883a 	mov	r17,r6
  80a89c:	1021883a 	mov	r16,r2
  80a8a0:	3825883a 	mov	r18,r7
  80a8a4:	003e9606 	br	80a300 <__alt_data_end+0xff80a300>
  80a8a8:	80001a1e 	bne	r16,zero,80a914 <__adddf3+0x690>
  80a8ac:	2c4eb03a 	or	r7,r5,r17
  80a8b0:	38005526 	beq	r7,zero,80aa08 <__adddf3+0x784>
  80a8b4:	0108303a 	nor	r4,zero,r4
  80a8b8:	2000511e 	bne	r4,zero,80aa00 <__adddf3+0x77c>
  80a8bc:	89a3883a 	add	r17,r17,r6
  80a8c0:	414b883a 	add	r5,r8,r5
  80a8c4:	898d803a 	cmpltu	r6,r17,r6
  80a8c8:	298b883a 	add	r5,r5,r6
  80a8cc:	1021883a 	mov	r16,r2
  80a8d0:	003f0e06 	br	80a50c <__alt_data_end+0xff80a50c>
  80a8d4:	1000341e 	bne	r2,zero,80a9a8 <__adddf3+0x724>
  80a8d8:	4184b03a 	or	r2,r8,r6
  80a8dc:	10006f26 	beq	r2,zero,80aa9c <__adddf3+0x818>
  80a8e0:	400b883a 	mov	r5,r8
  80a8e4:	3023883a 	mov	r17,r6
  80a8e8:	3825883a 	mov	r18,r7
  80a8ec:	0401ffc4 	movi	r16,2047
  80a8f0:	003e8306 	br	80a300 <__alt_data_end+0xff80a300>
  80a8f4:	2c62b03a 	or	r17,r5,r17
  80a8f8:	8822c03a 	cmpne	r17,r17,zero
  80a8fc:	0007883a 	mov	r3,zero
  80a900:	003f9506 	br	80a758 <__alt_data_end+0xff80a758>
  80a904:	1021883a 	mov	r16,r2
  80a908:	000b883a 	mov	r5,zero
  80a90c:	0023883a 	mov	r17,zero
  80a910:	003edb06 	br	80a480 <__alt_data_end+0xff80a480>
  80a914:	01c1ffc4 	movi	r7,2047
  80a918:	11c03b26 	beq	r2,r7,80aa08 <__adddf3+0x784>
  80a91c:	0109c83a 	sub	r4,zero,r4
  80a920:	29402034 	orhi	r5,r5,128
  80a924:	01c00e04 	movi	r7,56
  80a928:	39006216 	blt	r7,r4,80aab4 <__adddf3+0x830>
  80a92c:	01c007c4 	movi	r7,31
  80a930:	39006b16 	blt	r7,r4,80aae0 <__adddf3+0x85c>
  80a934:	01c00804 	movi	r7,32
  80a938:	390fc83a 	sub	r7,r7,r4
  80a93c:	29d4983a 	sll	r10,r5,r7
  80a940:	8912d83a 	srl	r9,r17,r4
  80a944:	89ce983a 	sll	r7,r17,r7
  80a948:	2908d83a 	srl	r4,r5,r4
  80a94c:	5262b03a 	or	r17,r10,r9
  80a950:	380ac03a 	cmpne	r5,r7,zero
  80a954:	8962b03a 	or	r17,r17,r5
  80a958:	89a3883a 	add	r17,r17,r6
  80a95c:	2211883a 	add	r8,r4,r8
  80a960:	898d803a 	cmpltu	r6,r17,r6
  80a964:	418b883a 	add	r5,r8,r6
  80a968:	1021883a 	mov	r16,r2
  80a96c:	003ee706 	br	80a50c <__alt_data_end+0xff80a50c>
  80a970:	4184b03a 	or	r2,r8,r6
  80a974:	103e6226 	beq	r2,zero,80a300 <__alt_data_end+0xff80a300>
  80a978:	8987c83a 	sub	r3,r17,r6
  80a97c:	88c9803a 	cmpltu	r4,r17,r3
  80a980:	2a05c83a 	sub	r2,r5,r8
  80a984:	1105c83a 	sub	r2,r2,r4
  80a988:	1100202c 	andhi	r4,r2,128
  80a98c:	203f0426 	beq	r4,zero,80a5a0 <__alt_data_end+0xff80a5a0>
  80a990:	3463c83a 	sub	r17,r6,r17
  80a994:	414bc83a 	sub	r5,r8,r5
  80a998:	344d803a 	cmpltu	r6,r6,r17
  80a99c:	298bc83a 	sub	r5,r5,r6
  80a9a0:	3825883a 	mov	r18,r7
  80a9a4:	003e5606 	br	80a300 <__alt_data_end+0xff80a300>
  80a9a8:	4184b03a 	or	r2,r8,r6
  80a9ac:	10002b26 	beq	r2,zero,80aa5c <__adddf3+0x7d8>
  80a9b0:	2804d0fa 	srli	r2,r5,3
  80a9b4:	8822d0fa 	srli	r17,r17,3
  80a9b8:	280a977a 	slli	r5,r5,29
  80a9bc:	10c0022c 	andhi	r3,r2,8
  80a9c0:	2c62b03a 	or	r17,r5,r17
  80a9c4:	18000826 	beq	r3,zero,80a9e8 <__adddf3+0x764>
  80a9c8:	4008d0fa 	srli	r4,r8,3
  80a9cc:	20c0022c 	andhi	r3,r4,8
  80a9d0:	1800051e 	bne	r3,zero,80a9e8 <__adddf3+0x764>
  80a9d4:	300cd0fa 	srli	r6,r6,3
  80a9d8:	4010977a 	slli	r8,r8,29
  80a9dc:	2005883a 	mov	r2,r4
  80a9e0:	3825883a 	mov	r18,r7
  80a9e4:	41a2b03a 	or	r17,r8,r6
  80a9e8:	880ad77a 	srli	r5,r17,29
  80a9ec:	100490fa 	slli	r2,r2,3
  80a9f0:	882290fa 	slli	r17,r17,3
  80a9f4:	0401ffc4 	movi	r16,2047
  80a9f8:	288ab03a 	or	r5,r5,r2
  80a9fc:	003e4006 	br	80a300 <__alt_data_end+0xff80a300>
  80aa00:	01c1ffc4 	movi	r7,2047
  80aa04:	11ffc71e 	bne	r2,r7,80a924 <__alt_data_end+0xff80a924>
  80aa08:	400b883a 	mov	r5,r8
  80aa0c:	3023883a 	mov	r17,r6
  80aa10:	1021883a 	mov	r16,r2
  80aa14:	003e3a06 	br	80a300 <__alt_data_end+0xff80a300>
  80aa18:	10002d26 	beq	r2,zero,80aad0 <__adddf3+0x84c>
  80aa1c:	4184b03a 	or	r2,r8,r6
  80aa20:	10000e26 	beq	r2,zero,80aa5c <__adddf3+0x7d8>
  80aa24:	2804d0fa 	srli	r2,r5,3
  80aa28:	8822d0fa 	srli	r17,r17,3
  80aa2c:	280a977a 	slli	r5,r5,29
  80aa30:	10c0022c 	andhi	r3,r2,8
  80aa34:	2c62b03a 	or	r17,r5,r17
  80aa38:	183feb26 	beq	r3,zero,80a9e8 <__alt_data_end+0xff80a9e8>
  80aa3c:	4008d0fa 	srli	r4,r8,3
  80aa40:	20c0022c 	andhi	r3,r4,8
  80aa44:	183fe81e 	bne	r3,zero,80a9e8 <__alt_data_end+0xff80a9e8>
  80aa48:	300cd0fa 	srli	r6,r6,3
  80aa4c:	4010977a 	slli	r8,r8,29
  80aa50:	2005883a 	mov	r2,r4
  80aa54:	41a2b03a 	or	r17,r8,r6
  80aa58:	003fe306 	br	80a9e8 <__alt_data_end+0xff80a9e8>
  80aa5c:	0401ffc4 	movi	r16,2047
  80aa60:	003e2706 	br	80a300 <__alt_data_end+0xff80a300>
  80aa64:	0011883a 	mov	r8,zero
  80aa68:	003f8306 	br	80a878 <__alt_data_end+0xff80a878>
  80aa6c:	193ff804 	addi	r4,r3,-32
  80aa70:	02400804 	movi	r9,32
  80aa74:	2908d83a 	srl	r4,r5,r4
  80aa78:	1a402526 	beq	r3,r9,80ab10 <__adddf3+0x88c>
  80aa7c:	02401004 	movi	r9,64
  80aa80:	48c7c83a 	sub	r3,r9,r3
  80aa84:	28ca983a 	sll	r5,r5,r3
  80aa88:	2c62b03a 	or	r17,r5,r17
  80aa8c:	8822c03a 	cmpne	r17,r17,zero
  80aa90:	8922b03a 	or	r17,r17,r4
  80aa94:	0007883a 	mov	r3,zero
  80aa98:	003f2f06 	br	80a758 <__alt_data_end+0xff80a758>
  80aa9c:	01402034 	movhi	r5,128
  80aaa0:	0007883a 	mov	r3,zero
  80aaa4:	297fffc4 	addi	r5,r5,-1
  80aaa8:	047ffe04 	movi	r17,-8
  80aaac:	0401ffc4 	movi	r16,2047
  80aab0:	003e7306 	br	80a480 <__alt_data_end+0xff80a480>
  80aab4:	2c62b03a 	or	r17,r5,r17
  80aab8:	8822c03a 	cmpne	r17,r17,zero
  80aabc:	0009883a 	mov	r4,zero
  80aac0:	003fa506 	br	80a958 <__alt_data_end+0xff80a958>
  80aac4:	400b883a 	mov	r5,r8
  80aac8:	3023883a 	mov	r17,r6
  80aacc:	003e0c06 	br	80a300 <__alt_data_end+0xff80a300>
  80aad0:	400b883a 	mov	r5,r8
  80aad4:	3023883a 	mov	r17,r6
  80aad8:	0401ffc4 	movi	r16,2047
  80aadc:	003e0806 	br	80a300 <__alt_data_end+0xff80a300>
  80aae0:	21fff804 	addi	r7,r4,-32
  80aae4:	02400804 	movi	r9,32
  80aae8:	29ced83a 	srl	r7,r5,r7
  80aaec:	22400a26 	beq	r4,r9,80ab18 <__adddf3+0x894>
  80aaf0:	02401004 	movi	r9,64
  80aaf4:	4909c83a 	sub	r4,r9,r4
  80aaf8:	290a983a 	sll	r5,r5,r4
  80aafc:	2c62b03a 	or	r17,r5,r17
  80ab00:	8822c03a 	cmpne	r17,r17,zero
  80ab04:	89e2b03a 	or	r17,r17,r7
  80ab08:	0009883a 	mov	r4,zero
  80ab0c:	003f9206 	br	80a958 <__alt_data_end+0xff80a958>
  80ab10:	000b883a 	mov	r5,zero
  80ab14:	003fdc06 	br	80aa88 <__alt_data_end+0xff80aa88>
  80ab18:	000b883a 	mov	r5,zero
  80ab1c:	003ff706 	br	80aafc <__alt_data_end+0xff80aafc>

0080ab20 <__divdf3>:
  80ab20:	defff204 	addi	sp,sp,-56
  80ab24:	dd000815 	stw	r20,32(sp)
  80ab28:	2828d53a 	srli	r20,r5,20
  80ab2c:	dd800a15 	stw	r22,40(sp)
  80ab30:	282cd7fa 	srli	r22,r5,31
  80ab34:	dc000415 	stw	r16,16(sp)
  80ab38:	04000434 	movhi	r16,16
  80ab3c:	df000c15 	stw	fp,48(sp)
  80ab40:	dcc00715 	stw	r19,28(sp)
  80ab44:	dc800615 	stw	r18,24(sp)
  80ab48:	dc400515 	stw	r17,20(sp)
  80ab4c:	843fffc4 	addi	r16,r16,-1
  80ab50:	dfc00d15 	stw	ra,52(sp)
  80ab54:	ddc00b15 	stw	r23,44(sp)
  80ab58:	dd400915 	stw	r21,36(sp)
  80ab5c:	a501ffcc 	andi	r20,r20,2047
  80ab60:	2025883a 	mov	r18,r4
  80ab64:	2027883a 	mov	r19,r4
  80ab68:	2c22703a 	and	r17,r5,r16
  80ab6c:	b7003fcc 	andi	fp,r22,255
  80ab70:	a0005e26 	beq	r20,zero,80acec <__divdf3+0x1cc>
  80ab74:	0081ffc4 	movi	r2,2047
  80ab78:	a0803526 	beq	r20,r2,80ac50 <__divdf3+0x130>
  80ab7c:	8c000434 	orhi	r16,r17,16
  80ab80:	2004d77a 	srli	r2,r4,29
  80ab84:	802090fa 	slli	r16,r16,3
  80ab88:	202690fa 	slli	r19,r4,3
  80ab8c:	a53f0044 	addi	r20,r20,-1023
  80ab90:	80a2b03a 	or	r17,r16,r2
  80ab94:	0025883a 	mov	r18,zero
  80ab98:	0011883a 	mov	r8,zero
  80ab9c:	380ad53a 	srli	r5,r7,20
  80aba0:	382ed7fa 	srli	r23,r7,31
  80aba4:	04000434 	movhi	r16,16
  80aba8:	843fffc4 	addi	r16,r16,-1
  80abac:	2941ffcc 	andi	r5,r5,2047
  80abb0:	302b883a 	mov	r21,r6
  80abb4:	3c20703a 	and	r16,r7,r16
  80abb8:	ba403fcc 	andi	r9,r23,255
  80abbc:	28006726 	beq	r5,zero,80ad5c <__divdf3+0x23c>
  80abc0:	0081ffc4 	movi	r2,2047
  80abc4:	28805f26 	beq	r5,r2,80ad44 <__divdf3+0x224>
  80abc8:	84000434 	orhi	r16,r16,16
  80abcc:	3004d77a 	srli	r2,r6,29
  80abd0:	802090fa 	slli	r16,r16,3
  80abd4:	302a90fa 	slli	r21,r6,3
  80abd8:	297f0044 	addi	r5,r5,-1023
  80abdc:	80a0b03a 	or	r16,r16,r2
  80abe0:	000f883a 	mov	r7,zero
  80abe4:	3c86b03a 	or	r3,r7,r18
  80abe8:	180690ba 	slli	r3,r3,2
  80abec:	00802074 	movhi	r2,129
  80abf0:	10ab0404 	addi	r2,r2,-21488
  80abf4:	1887883a 	add	r3,r3,r2
  80abf8:	18c00017 	ldw	r3,0(r3)
  80abfc:	b5c8f03a 	xor	r4,r22,r23
  80ac00:	200d883a 	mov	r6,r4
  80ac04:	24803fcc 	andi	r18,r4,255
  80ac08:	a169c83a 	sub	r20,r20,r5
  80ac0c:	1800683a 	jmp	r3
  80ac10:	0080ae58 	cmpnei	r2,zero,697
  80ac14:	0080ac88 	cmpgei	r2,zero,690
  80ac18:	0080ae1c 	xori	r2,zero,696
  80ac1c:	0080ac6c 	andhi	r2,zero,689
  80ac20:	0080ae1c 	xori	r2,zero,696
  80ac24:	0080adf0 	cmpltui	r2,zero,695
  80ac28:	0080ae1c 	xori	r2,zero,696
  80ac2c:	0080ac6c 	andhi	r2,zero,689
  80ac30:	0080ac88 	cmpgei	r2,zero,690
  80ac34:	0080ac88 	cmpgei	r2,zero,690
  80ac38:	0080adf0 	cmpltui	r2,zero,695
  80ac3c:	0080ac6c 	andhi	r2,zero,689
  80ac40:	0080ac7c 	xorhi	r2,zero,689
  80ac44:	0080ac7c 	xorhi	r2,zero,689
  80ac48:	0080ac7c 	xorhi	r2,zero,689
  80ac4c:	0080ae2c 	andhi	r2,zero,696
  80ac50:	8904b03a 	or	r2,r17,r4
  80ac54:	1000631e 	bne	r2,zero,80ade4 <__divdf3+0x2c4>
  80ac58:	04800204 	movi	r18,8
  80ac5c:	0023883a 	mov	r17,zero
  80ac60:	0027883a 	mov	r19,zero
  80ac64:	02000084 	movi	r8,2
  80ac68:	003fcc06 	br	80ab9c <__alt_data_end+0xff80ab9c>
  80ac6c:	8023883a 	mov	r17,r16
  80ac70:	a827883a 	mov	r19,r21
  80ac74:	4839883a 	mov	fp,r9
  80ac78:	3811883a 	mov	r8,r7
  80ac7c:	00800084 	movi	r2,2
  80ac80:	40812a1e 	bne	r8,r2,80b12c <__divdf3+0x60c>
  80ac84:	e025883a 	mov	r18,fp
  80ac88:	9180004c 	andi	r6,r18,1
  80ac8c:	0101ffc4 	movi	r4,2047
  80ac90:	000b883a 	mov	r5,zero
  80ac94:	0027883a 	mov	r19,zero
  80ac98:	2008953a 	slli	r4,r4,20
  80ac9c:	30c03fcc 	andi	r3,r6,255
  80aca0:	04000434 	movhi	r16,16
  80aca4:	180697fa 	slli	r3,r3,31
  80aca8:	843fffc4 	addi	r16,r16,-1
  80acac:	2c20703a 	and	r16,r5,r16
  80acb0:	8120b03a 	or	r16,r16,r4
  80acb4:	80c6b03a 	or	r3,r16,r3
  80acb8:	9805883a 	mov	r2,r19
  80acbc:	dfc00d17 	ldw	ra,52(sp)
  80acc0:	df000c17 	ldw	fp,48(sp)
  80acc4:	ddc00b17 	ldw	r23,44(sp)
  80acc8:	dd800a17 	ldw	r22,40(sp)
  80accc:	dd400917 	ldw	r21,36(sp)
  80acd0:	dd000817 	ldw	r20,32(sp)
  80acd4:	dcc00717 	ldw	r19,28(sp)
  80acd8:	dc800617 	ldw	r18,24(sp)
  80acdc:	dc400517 	ldw	r17,20(sp)
  80ace0:	dc000417 	ldw	r16,16(sp)
  80ace4:	dec00e04 	addi	sp,sp,56
  80ace8:	f800283a 	ret
  80acec:	8904b03a 	or	r2,r17,r4
  80acf0:	10003726 	beq	r2,zero,80add0 <__divdf3+0x2b0>
  80acf4:	88011c26 	beq	r17,zero,80b168 <__divdf3+0x648>
  80acf8:	8809883a 	mov	r4,r17
  80acfc:	d9800315 	stw	r6,12(sp)
  80ad00:	d9c00115 	stw	r7,4(sp)
  80ad04:	080c8200 	call	80c820 <__clzsi2>
  80ad08:	d9800317 	ldw	r6,12(sp)
  80ad0c:	d9c00117 	ldw	r7,4(sp)
  80ad10:	1007883a 	mov	r3,r2
  80ad14:	01000a04 	movi	r4,40
  80ad18:	1cfffe04 	addi	r19,r3,-8
  80ad1c:	20c9c83a 	sub	r4,r4,r3
  80ad20:	8cca983a 	sll	r5,r17,r19
  80ad24:	9108d83a 	srl	r4,r18,r4
  80ad28:	94e6983a 	sll	r19,r18,r19
  80ad2c:	2162b03a 	or	r17,r4,r5
  80ad30:	053f0344 	movi	r20,-1011
  80ad34:	a0e9c83a 	sub	r20,r20,r3
  80ad38:	0025883a 	mov	r18,zero
  80ad3c:	0011883a 	mov	r8,zero
  80ad40:	003f9606 	br	80ab9c <__alt_data_end+0xff80ab9c>
  80ad44:	8184b03a 	or	r2,r16,r6
  80ad48:	10001f1e 	bne	r2,zero,80adc8 <__divdf3+0x2a8>
  80ad4c:	0021883a 	mov	r16,zero
  80ad50:	002b883a 	mov	r21,zero
  80ad54:	01c00084 	movi	r7,2
  80ad58:	003fa206 	br	80abe4 <__alt_data_end+0xff80abe4>
  80ad5c:	8184b03a 	or	r2,r16,r6
  80ad60:	10001526 	beq	r2,zero,80adb8 <__divdf3+0x298>
  80ad64:	80010c26 	beq	r16,zero,80b198 <__divdf3+0x678>
  80ad68:	8009883a 	mov	r4,r16
  80ad6c:	d9800315 	stw	r6,12(sp)
  80ad70:	da000215 	stw	r8,8(sp)
  80ad74:	da400015 	stw	r9,0(sp)
  80ad78:	080c8200 	call	80c820 <__clzsi2>
  80ad7c:	d9800317 	ldw	r6,12(sp)
  80ad80:	da000217 	ldw	r8,8(sp)
  80ad84:	da400017 	ldw	r9,0(sp)
  80ad88:	1007883a 	mov	r3,r2
  80ad8c:	01000a04 	movi	r4,40
  80ad90:	1d7ffe04 	addi	r21,r3,-8
  80ad94:	20c9c83a 	sub	r4,r4,r3
  80ad98:	8560983a 	sll	r16,r16,r21
  80ad9c:	3108d83a 	srl	r4,r6,r4
  80ada0:	356a983a 	sll	r21,r6,r21
  80ada4:	2420b03a 	or	r16,r4,r16
  80ada8:	017f0344 	movi	r5,-1011
  80adac:	28cbc83a 	sub	r5,r5,r3
  80adb0:	000f883a 	mov	r7,zero
  80adb4:	003f8b06 	br	80abe4 <__alt_data_end+0xff80abe4>
  80adb8:	0021883a 	mov	r16,zero
  80adbc:	002b883a 	mov	r21,zero
  80adc0:	01c00044 	movi	r7,1
  80adc4:	003f8706 	br	80abe4 <__alt_data_end+0xff80abe4>
  80adc8:	01c000c4 	movi	r7,3
  80adcc:	003f8506 	br	80abe4 <__alt_data_end+0xff80abe4>
  80add0:	04800104 	movi	r18,4
  80add4:	0023883a 	mov	r17,zero
  80add8:	0027883a 	mov	r19,zero
  80addc:	02000044 	movi	r8,1
  80ade0:	003f6e06 	br	80ab9c <__alt_data_end+0xff80ab9c>
  80ade4:	04800304 	movi	r18,12
  80ade8:	020000c4 	movi	r8,3
  80adec:	003f6b06 	br	80ab9c <__alt_data_end+0xff80ab9c>
  80adf0:	01400434 	movhi	r5,16
  80adf4:	000d883a 	mov	r6,zero
  80adf8:	297fffc4 	addi	r5,r5,-1
  80adfc:	04ffffc4 	movi	r19,-1
  80ae00:	0101ffc4 	movi	r4,2047
  80ae04:	003fa406 	br	80ac98 <__alt_data_end+0xff80ac98>
  80ae08:	043f0084 	movi	r16,-1022
  80ae0c:	8521c83a 	sub	r16,r16,r20
  80ae10:	00800e04 	movi	r2,56
  80ae14:	1401200e 	bge	r2,r16,80b298 <__divdf3+0x778>
  80ae18:	9180004c 	andi	r6,r18,1
  80ae1c:	0009883a 	mov	r4,zero
  80ae20:	000b883a 	mov	r5,zero
  80ae24:	0027883a 	mov	r19,zero
  80ae28:	003f9b06 	br	80ac98 <__alt_data_end+0xff80ac98>
  80ae2c:	8880022c 	andhi	r2,r17,8
  80ae30:	1000c726 	beq	r2,zero,80b150 <__divdf3+0x630>
  80ae34:	8080022c 	andhi	r2,r16,8
  80ae38:	1000c51e 	bne	r2,zero,80b150 <__divdf3+0x630>
  80ae3c:	00800434 	movhi	r2,16
  80ae40:	81400234 	orhi	r5,r16,8
  80ae44:	10bfffc4 	addi	r2,r2,-1
  80ae48:	b80d883a 	mov	r6,r23
  80ae4c:	288a703a 	and	r5,r5,r2
  80ae50:	a827883a 	mov	r19,r21
  80ae54:	003fea06 	br	80ae00 <__alt_data_end+0xff80ae00>
  80ae58:	8440ea36 	bltu	r16,r17,80b204 <__divdf3+0x6e4>
  80ae5c:	8c00e826 	beq	r17,r16,80b200 <__divdf3+0x6e0>
  80ae60:	a53fffc4 	addi	r20,r20,-1
  80ae64:	882d883a 	mov	r22,r17
  80ae68:	000d883a 	mov	r6,zero
  80ae6c:	a804d63a 	srli	r2,r21,24
  80ae70:	8020923a 	slli	r16,r16,8
  80ae74:	b009883a 	mov	r4,r22
  80ae78:	d9800315 	stw	r6,12(sp)
  80ae7c:	1420b03a 	or	r16,r2,r16
  80ae80:	802ed43a 	srli	r23,r16,16
  80ae84:	873fffcc 	andi	fp,r16,65535
  80ae88:	a82a923a 	slli	r21,r21,8
  80ae8c:	b80b883a 	mov	r5,r23
  80ae90:	080a2740 	call	80a274 <__udivsi3>
  80ae94:	b009883a 	mov	r4,r22
  80ae98:	b80b883a 	mov	r5,r23
  80ae9c:	1023883a 	mov	r17,r2
  80aea0:	080a27c0 	call	80a27c <__umodsi3>
  80aea4:	1004943a 	slli	r2,r2,16
  80aea8:	9808d43a 	srli	r4,r19,16
  80aeac:	8f2d383a 	mul	r22,r17,fp
  80aeb0:	d9800317 	ldw	r6,12(sp)
  80aeb4:	1106b03a 	or	r3,r2,r4
  80aeb8:	1d80062e 	bgeu	r3,r22,80aed4 <__divdf3+0x3b4>
  80aebc:	1c07883a 	add	r3,r3,r16
  80aec0:	88bfffc4 	addi	r2,r17,-1
  80aec4:	1c00dc36 	bltu	r3,r16,80b238 <__divdf3+0x718>
  80aec8:	1d80db2e 	bgeu	r3,r22,80b238 <__divdf3+0x718>
  80aecc:	8c7fff84 	addi	r17,r17,-2
  80aed0:	1c07883a 	add	r3,r3,r16
  80aed4:	1dadc83a 	sub	r22,r3,r22
  80aed8:	b009883a 	mov	r4,r22
  80aedc:	b80b883a 	mov	r5,r23
  80aee0:	d9800315 	stw	r6,12(sp)
  80aee4:	080a2740 	call	80a274 <__udivsi3>
  80aee8:	b009883a 	mov	r4,r22
  80aeec:	b80b883a 	mov	r5,r23
  80aef0:	d8800015 	stw	r2,0(sp)
  80aef4:	080a27c0 	call	80a27c <__umodsi3>
  80aef8:	da400017 	ldw	r9,0(sp)
  80aefc:	1004943a 	slli	r2,r2,16
  80af00:	9cffffcc 	andi	r19,r19,65535
  80af04:	4f07383a 	mul	r3,r9,fp
  80af08:	14c8b03a 	or	r4,r2,r19
  80af0c:	d9800317 	ldw	r6,12(sp)
  80af10:	20c0062e 	bgeu	r4,r3,80af2c <__divdf3+0x40c>
  80af14:	2409883a 	add	r4,r4,r16
  80af18:	48bfffc4 	addi	r2,r9,-1
  80af1c:	2400c436 	bltu	r4,r16,80b230 <__divdf3+0x710>
  80af20:	20c0c32e 	bgeu	r4,r3,80b230 <__divdf3+0x710>
  80af24:	4a7fff84 	addi	r9,r9,-2
  80af28:	2409883a 	add	r4,r4,r16
  80af2c:	8822943a 	slli	r17,r17,16
  80af30:	a80ed43a 	srli	r7,r21,16
  80af34:	aa3fffcc 	andi	r8,r21,65535
  80af38:	4c62b03a 	or	r17,r9,r17
  80af3c:	8816d43a 	srli	r11,r17,16
  80af40:	897fffcc 	andi	r5,r17,65535
  80af44:	2a15383a 	mul	r10,r5,r8
  80af48:	5a19383a 	mul	r12,r11,r8
  80af4c:	29cb383a 	mul	r5,r5,r7
  80af50:	5012d43a 	srli	r9,r10,16
  80af54:	20c5c83a 	sub	r2,r4,r3
  80af58:	614b883a 	add	r5,r12,r5
  80af5c:	2a4b883a 	add	r5,r5,r9
  80af60:	59c7383a 	mul	r3,r11,r7
  80af64:	2b00022e 	bgeu	r5,r12,80af70 <__divdf3+0x450>
  80af68:	01000074 	movhi	r4,1
  80af6c:	1907883a 	add	r3,r3,r4
  80af70:	2808d43a 	srli	r4,r5,16
  80af74:	280a943a 	slli	r5,r5,16
  80af78:	54ffffcc 	andi	r19,r10,65535
  80af7c:	1907883a 	add	r3,r3,r4
  80af80:	2ccb883a 	add	r5,r5,r19
  80af84:	10c09336 	bltu	r2,r3,80b1d4 <__divdf3+0x6b4>
  80af88:	10c0ad26 	beq	r2,r3,80b240 <__divdf3+0x720>
  80af8c:	10c7c83a 	sub	r3,r2,r3
  80af90:	3167c83a 	sub	r19,r6,r5
  80af94:	34ed803a 	cmpltu	r22,r6,r19
  80af98:	1dadc83a 	sub	r22,r3,r22
  80af9c:	b400b226 	beq	r22,r16,80b268 <__divdf3+0x748>
  80afa0:	b009883a 	mov	r4,r22
  80afa4:	b80b883a 	mov	r5,r23
  80afa8:	d9c00115 	stw	r7,4(sp)
  80afac:	da000215 	stw	r8,8(sp)
  80afb0:	080a2740 	call	80a274 <__udivsi3>
  80afb4:	b009883a 	mov	r4,r22
  80afb8:	b80b883a 	mov	r5,r23
  80afbc:	d8800315 	stw	r2,12(sp)
  80afc0:	080a27c0 	call	80a27c <__umodsi3>
  80afc4:	d9800317 	ldw	r6,12(sp)
  80afc8:	1004943a 	slli	r2,r2,16
  80afcc:	9808d43a 	srli	r4,r19,16
  80afd0:	372d383a 	mul	r22,r6,fp
  80afd4:	d9c00117 	ldw	r7,4(sp)
  80afd8:	1106b03a 	or	r3,r2,r4
  80afdc:	da000217 	ldw	r8,8(sp)
  80afe0:	1d80062e 	bgeu	r3,r22,80affc <__divdf3+0x4dc>
  80afe4:	1c07883a 	add	r3,r3,r16
  80afe8:	30bfffc4 	addi	r2,r6,-1
  80afec:	1c00a036 	bltu	r3,r16,80b270 <__divdf3+0x750>
  80aff0:	1d809f2e 	bgeu	r3,r22,80b270 <__divdf3+0x750>
  80aff4:	31bfff84 	addi	r6,r6,-2
  80aff8:	1c07883a 	add	r3,r3,r16
  80affc:	1dadc83a 	sub	r22,r3,r22
  80b000:	b009883a 	mov	r4,r22
  80b004:	b80b883a 	mov	r5,r23
  80b008:	d9800315 	stw	r6,12(sp)
  80b00c:	d9c00115 	stw	r7,4(sp)
  80b010:	da000215 	stw	r8,8(sp)
  80b014:	080a2740 	call	80a274 <__udivsi3>
  80b018:	b009883a 	mov	r4,r22
  80b01c:	b80b883a 	mov	r5,r23
  80b020:	d8800015 	stw	r2,0(sp)
  80b024:	080a27c0 	call	80a27c <__umodsi3>
  80b028:	da400017 	ldw	r9,0(sp)
  80b02c:	1004943a 	slli	r2,r2,16
  80b030:	993fffcc 	andi	r4,r19,65535
  80b034:	4f39383a 	mul	fp,r9,fp
  80b038:	1106b03a 	or	r3,r2,r4
  80b03c:	d9800317 	ldw	r6,12(sp)
  80b040:	d9c00117 	ldw	r7,4(sp)
  80b044:	da000217 	ldw	r8,8(sp)
  80b048:	1f00062e 	bgeu	r3,fp,80b064 <__divdf3+0x544>
  80b04c:	1c07883a 	add	r3,r3,r16
  80b050:	48bfffc4 	addi	r2,r9,-1
  80b054:	1c008836 	bltu	r3,r16,80b278 <__divdf3+0x758>
  80b058:	1f00872e 	bgeu	r3,fp,80b278 <__divdf3+0x758>
  80b05c:	4a7fff84 	addi	r9,r9,-2
  80b060:	1c07883a 	add	r3,r3,r16
  80b064:	3008943a 	slli	r4,r6,16
  80b068:	1f07c83a 	sub	r3,r3,fp
  80b06c:	4926b03a 	or	r19,r9,r4
  80b070:	993fffcc 	andi	r4,r19,65535
  80b074:	980cd43a 	srli	r6,r19,16
  80b078:	220b383a 	mul	r5,r4,r8
  80b07c:	21c5383a 	mul	r2,r4,r7
  80b080:	3211383a 	mul	r8,r6,r8
  80b084:	2808d43a 	srli	r4,r5,16
  80b088:	31cf383a 	mul	r7,r6,r7
  80b08c:	4085883a 	add	r2,r8,r2
  80b090:	1105883a 	add	r2,r2,r4
  80b094:	1200022e 	bgeu	r2,r8,80b0a0 <__divdf3+0x580>
  80b098:	01000074 	movhi	r4,1
  80b09c:	390f883a 	add	r7,r7,r4
  80b0a0:	1008d43a 	srli	r4,r2,16
  80b0a4:	1004943a 	slli	r2,r2,16
  80b0a8:	297fffcc 	andi	r5,r5,65535
  80b0ac:	390f883a 	add	r7,r7,r4
  80b0b0:	1145883a 	add	r2,r2,r5
  80b0b4:	19c06536 	bltu	r3,r7,80b24c <__divdf3+0x72c>
  80b0b8:	19c09f26 	beq	r3,r7,80b338 <__divdf3+0x818>
  80b0bc:	9cc00054 	ori	r19,r19,1
  80b0c0:	a100ffc4 	addi	r4,r20,1023
  80b0c4:	013f500e 	bge	zero,r4,80ae08 <__alt_data_end+0xff80ae08>
  80b0c8:	988001cc 	andi	r2,r19,7
  80b0cc:	10000726 	beq	r2,zero,80b0ec <__divdf3+0x5cc>
  80b0d0:	98c003cc 	andi	r3,r19,15
  80b0d4:	00800104 	movi	r2,4
  80b0d8:	18800426 	beq	r3,r2,80b0ec <__divdf3+0x5cc>
  80b0dc:	9885883a 	add	r2,r19,r2
  80b0e0:	14e1803a 	cmpltu	r16,r2,r19
  80b0e4:	8c23883a 	add	r17,r17,r16
  80b0e8:	1027883a 	mov	r19,r2
  80b0ec:	8880402c 	andhi	r2,r17,256
  80b0f0:	10000426 	beq	r2,zero,80b104 <__divdf3+0x5e4>
  80b0f4:	00bfc034 	movhi	r2,65280
  80b0f8:	10bfffc4 	addi	r2,r2,-1
  80b0fc:	a1010004 	addi	r4,r20,1024
  80b100:	88a2703a 	and	r17,r17,r2
  80b104:	0081ff84 	movi	r2,2046
  80b108:	113edf16 	blt	r2,r4,80ac88 <__alt_data_end+0xff80ac88>
  80b10c:	9826d0fa 	srli	r19,r19,3
  80b110:	8804977a 	slli	r2,r17,29
  80b114:	8820927a 	slli	r16,r17,9
  80b118:	2101ffcc 	andi	r4,r4,2047
  80b11c:	14e6b03a 	or	r19,r2,r19
  80b120:	800ad33a 	srli	r5,r16,12
  80b124:	9180004c 	andi	r6,r18,1
  80b128:	003edb06 	br	80ac98 <__alt_data_end+0xff80ac98>
  80b12c:	008000c4 	movi	r2,3
  80b130:	4080a826 	beq	r8,r2,80b3d4 <__divdf3+0x8b4>
  80b134:	00800044 	movi	r2,1
  80b138:	4080551e 	bne	r8,r2,80b290 <__divdf3+0x770>
  80b13c:	e00d883a 	mov	r6,fp
  80b140:	0009883a 	mov	r4,zero
  80b144:	000b883a 	mov	r5,zero
  80b148:	0027883a 	mov	r19,zero
  80b14c:	003ed206 	br	80ac98 <__alt_data_end+0xff80ac98>
  80b150:	00800434 	movhi	r2,16
  80b154:	89400234 	orhi	r5,r17,8
  80b158:	10bfffc4 	addi	r2,r2,-1
  80b15c:	b00d883a 	mov	r6,r22
  80b160:	288a703a 	and	r5,r5,r2
  80b164:	003f2606 	br	80ae00 <__alt_data_end+0xff80ae00>
  80b168:	d9800315 	stw	r6,12(sp)
  80b16c:	d9c00115 	stw	r7,4(sp)
  80b170:	080c8200 	call	80c820 <__clzsi2>
  80b174:	10c00804 	addi	r3,r2,32
  80b178:	010009c4 	movi	r4,39
  80b17c:	d9800317 	ldw	r6,12(sp)
  80b180:	d9c00117 	ldw	r7,4(sp)
  80b184:	20fee30e 	bge	r4,r3,80ad14 <__alt_data_end+0xff80ad14>
  80b188:	117ffe04 	addi	r5,r2,-8
  80b18c:	9162983a 	sll	r17,r18,r5
  80b190:	0027883a 	mov	r19,zero
  80b194:	003ee606 	br	80ad30 <__alt_data_end+0xff80ad30>
  80b198:	3009883a 	mov	r4,r6
  80b19c:	d9800315 	stw	r6,12(sp)
  80b1a0:	da000215 	stw	r8,8(sp)
  80b1a4:	da400015 	stw	r9,0(sp)
  80b1a8:	080c8200 	call	80c820 <__clzsi2>
  80b1ac:	10c00804 	addi	r3,r2,32
  80b1b0:	010009c4 	movi	r4,39
  80b1b4:	d9800317 	ldw	r6,12(sp)
  80b1b8:	da000217 	ldw	r8,8(sp)
  80b1bc:	da400017 	ldw	r9,0(sp)
  80b1c0:	20fef20e 	bge	r4,r3,80ad8c <__alt_data_end+0xff80ad8c>
  80b1c4:	10bffe04 	addi	r2,r2,-8
  80b1c8:	a8a0983a 	sll	r16,r21,r2
  80b1cc:	002b883a 	mov	r21,zero
  80b1d0:	003ef506 	br	80ada8 <__alt_data_end+0xff80ada8>
  80b1d4:	354d883a 	add	r6,r6,r21
  80b1d8:	3549803a 	cmpltu	r4,r6,r21
  80b1dc:	2409883a 	add	r4,r4,r16
  80b1e0:	2089883a 	add	r4,r4,r2
  80b1e4:	88bfffc4 	addi	r2,r17,-1
  80b1e8:	81000c2e 	bgeu	r16,r4,80b21c <__divdf3+0x6fc>
  80b1ec:	20c04436 	bltu	r4,r3,80b300 <__divdf3+0x7e0>
  80b1f0:	19006f26 	beq	r3,r4,80b3b0 <__divdf3+0x890>
  80b1f4:	20c7c83a 	sub	r3,r4,r3
  80b1f8:	1023883a 	mov	r17,r2
  80b1fc:	003f6406 	br	80af90 <__alt_data_end+0xff80af90>
  80b200:	9d7f1736 	bltu	r19,r21,80ae60 <__alt_data_end+0xff80ae60>
  80b204:	9806d07a 	srli	r3,r19,1
  80b208:	880497fa 	slli	r2,r17,31
  80b20c:	980c97fa 	slli	r6,r19,31
  80b210:	882cd07a 	srli	r22,r17,1
  80b214:	18a6b03a 	or	r19,r3,r2
  80b218:	003f1406 	br	80ae6c <__alt_data_end+0xff80ae6c>
  80b21c:	243ff51e 	bne	r4,r16,80b1f4 <__alt_data_end+0xff80b1f4>
  80b220:	357ff22e 	bgeu	r6,r21,80b1ec <__alt_data_end+0xff80b1ec>
  80b224:	80c7c83a 	sub	r3,r16,r3
  80b228:	1023883a 	mov	r17,r2
  80b22c:	003f5806 	br	80af90 <__alt_data_end+0xff80af90>
  80b230:	1013883a 	mov	r9,r2
  80b234:	003f3d06 	br	80af2c <__alt_data_end+0xff80af2c>
  80b238:	1023883a 	mov	r17,r2
  80b23c:	003f2506 	br	80aed4 <__alt_data_end+0xff80aed4>
  80b240:	317fe436 	bltu	r6,r5,80b1d4 <__alt_data_end+0xff80b1d4>
  80b244:	0007883a 	mov	r3,zero
  80b248:	003f5106 	br	80af90 <__alt_data_end+0xff80af90>
  80b24c:	1c07883a 	add	r3,r3,r16
  80b250:	993fffc4 	addi	r4,r19,-1
  80b254:	1c000a2e 	bgeu	r3,r16,80b280 <__divdf3+0x760>
  80b258:	2027883a 	mov	r19,r4
  80b25c:	19ff971e 	bne	r3,r7,80b0bc <__alt_data_end+0xff80b0bc>
  80b260:	a8bf961e 	bne	r21,r2,80b0bc <__alt_data_end+0xff80b0bc>
  80b264:	003f9606 	br	80b0c0 <__alt_data_end+0xff80b0c0>
  80b268:	04ffffc4 	movi	r19,-1
  80b26c:	003f9406 	br	80b0c0 <__alt_data_end+0xff80b0c0>
  80b270:	100d883a 	mov	r6,r2
  80b274:	003f6106 	br	80affc <__alt_data_end+0xff80affc>
  80b278:	1013883a 	mov	r9,r2
  80b27c:	003f7906 	br	80b064 <__alt_data_end+0xff80b064>
  80b280:	19c02636 	bltu	r3,r7,80b31c <__divdf3+0x7fc>
  80b284:	38c04d26 	beq	r7,r3,80b3bc <__divdf3+0x89c>
  80b288:	2027883a 	mov	r19,r4
  80b28c:	003f8b06 	br	80b0bc <__alt_data_end+0xff80b0bc>
  80b290:	e025883a 	mov	r18,fp
  80b294:	003f8a06 	br	80b0c0 <__alt_data_end+0xff80b0c0>
  80b298:	008007c4 	movi	r2,31
  80b29c:	14002a16 	blt	r2,r16,80b348 <__divdf3+0x828>
  80b2a0:	a5010784 	addi	r20,r20,1054
  80b2a4:	8d04983a 	sll	r2,r17,r20
  80b2a8:	9c06d83a 	srl	r3,r19,r16
  80b2ac:	9d28983a 	sll	r20,r19,r20
  80b2b0:	8c20d83a 	srl	r16,r17,r16
  80b2b4:	1886b03a 	or	r3,r3,r2
  80b2b8:	a004c03a 	cmpne	r2,r20,zero
  80b2bc:	1884b03a 	or	r2,r3,r2
  80b2c0:	10c001cc 	andi	r3,r2,7
  80b2c4:	18000726 	beq	r3,zero,80b2e4 <__divdf3+0x7c4>
  80b2c8:	110003cc 	andi	r4,r2,15
  80b2cc:	00c00104 	movi	r3,4
  80b2d0:	20c00426 	beq	r4,r3,80b2e4 <__divdf3+0x7c4>
  80b2d4:	10c00104 	addi	r3,r2,4
  80b2d8:	1885803a 	cmpltu	r2,r3,r2
  80b2dc:	80a1883a 	add	r16,r16,r2
  80b2e0:	1805883a 	mov	r2,r3
  80b2e4:	80c0202c 	andhi	r3,r16,128
  80b2e8:	18002d26 	beq	r3,zero,80b3a0 <__divdf3+0x880>
  80b2ec:	9180004c 	andi	r6,r18,1
  80b2f0:	01000044 	movi	r4,1
  80b2f4:	000b883a 	mov	r5,zero
  80b2f8:	0027883a 	mov	r19,zero
  80b2fc:	003e6606 	br	80ac98 <__alt_data_end+0xff80ac98>
  80b300:	354d883a 	add	r6,r6,r21
  80b304:	356d803a 	cmpltu	r22,r6,r21
  80b308:	b42d883a 	add	r22,r22,r16
  80b30c:	b12d883a 	add	r22,r22,r4
  80b310:	8c7fff84 	addi	r17,r17,-2
  80b314:	b0c7c83a 	sub	r3,r22,r3
  80b318:	003f1d06 	br	80af90 <__alt_data_end+0xff80af90>
  80b31c:	ad4b883a 	add	r5,r21,r21
  80b320:	2d6b803a 	cmpltu	r21,r5,r21
  80b324:	ac2b883a 	add	r21,r21,r16
  80b328:	1d47883a 	add	r3,r3,r21
  80b32c:	993fff84 	addi	r4,r19,-2
  80b330:	282b883a 	mov	r21,r5
  80b334:	003fc806 	br	80b258 <__alt_data_end+0xff80b258>
  80b338:	103fc41e 	bne	r2,zero,80b24c <__alt_data_end+0xff80b24c>
  80b33c:	002b883a 	mov	r21,zero
  80b340:	a8bf5e1e 	bne	r21,r2,80b0bc <__alt_data_end+0xff80b0bc>
  80b344:	003f5e06 	br	80b0c0 <__alt_data_end+0xff80b0c0>
  80b348:	00bef884 	movi	r2,-1054
  80b34c:	1505c83a 	sub	r2,r2,r20
  80b350:	00c00804 	movi	r3,32
  80b354:	8884d83a 	srl	r2,r17,r2
  80b358:	80c01c26 	beq	r16,r3,80b3cc <__divdf3+0x8ac>
  80b35c:	a0c10f84 	addi	r3,r20,1086
  80b360:	88c6983a 	sll	r3,r17,r3
  80b364:	1cc6b03a 	or	r3,r3,r19
  80b368:	1806c03a 	cmpne	r3,r3,zero
  80b36c:	1884b03a 	or	r2,r3,r2
  80b370:	140001cc 	andi	r16,r2,7
  80b374:	8000061e 	bne	r16,zero,80b390 <__divdf3+0x870>
  80b378:	000b883a 	mov	r5,zero
  80b37c:	1004d0fa 	srli	r2,r2,3
  80b380:	9180004c 	andi	r6,r18,1
  80b384:	0009883a 	mov	r4,zero
  80b388:	1426b03a 	or	r19,r2,r16
  80b38c:	003e4206 	br	80ac98 <__alt_data_end+0xff80ac98>
  80b390:	110003cc 	andi	r4,r2,15
  80b394:	00c00104 	movi	r3,4
  80b398:	0021883a 	mov	r16,zero
  80b39c:	20ffcd1e 	bne	r4,r3,80b2d4 <__alt_data_end+0xff80b2d4>
  80b3a0:	800a927a 	slli	r5,r16,9
  80b3a4:	8020977a 	slli	r16,r16,29
  80b3a8:	280ad33a 	srli	r5,r5,12
  80b3ac:	003ff306 	br	80b37c <__alt_data_end+0xff80b37c>
  80b3b0:	317fd336 	bltu	r6,r5,80b300 <__alt_data_end+0xff80b300>
  80b3b4:	1023883a 	mov	r17,r2
  80b3b8:	003fa206 	br	80b244 <__alt_data_end+0xff80b244>
  80b3bc:	a8bfd736 	bltu	r21,r2,80b31c <__alt_data_end+0xff80b31c>
  80b3c0:	2027883a 	mov	r19,r4
  80b3c4:	a8bf3d1e 	bne	r21,r2,80b0bc <__alt_data_end+0xff80b0bc>
  80b3c8:	003f3d06 	br	80b0c0 <__alt_data_end+0xff80b0c0>
  80b3cc:	0007883a 	mov	r3,zero
  80b3d0:	003fe406 	br	80b364 <__alt_data_end+0xff80b364>
  80b3d4:	00800434 	movhi	r2,16
  80b3d8:	89400234 	orhi	r5,r17,8
  80b3dc:	10bfffc4 	addi	r2,r2,-1
  80b3e0:	e00d883a 	mov	r6,fp
  80b3e4:	288a703a 	and	r5,r5,r2
  80b3e8:	003e8506 	br	80ae00 <__alt_data_end+0xff80ae00>

0080b3ec <__eqdf2>:
  80b3ec:	2804d53a 	srli	r2,r5,20
  80b3f0:	3806d53a 	srli	r3,r7,20
  80b3f4:	02000434 	movhi	r8,16
  80b3f8:	423fffc4 	addi	r8,r8,-1
  80b3fc:	1081ffcc 	andi	r2,r2,2047
  80b400:	0241ffc4 	movi	r9,2047
  80b404:	2a14703a 	and	r10,r5,r8
  80b408:	18c1ffcc 	andi	r3,r3,2047
  80b40c:	3a10703a 	and	r8,r7,r8
  80b410:	280ad7fa 	srli	r5,r5,31
  80b414:	380ed7fa 	srli	r7,r7,31
  80b418:	12400f26 	beq	r2,r9,80b458 <__eqdf2+0x6c>
  80b41c:	0241ffc4 	movi	r9,2047
  80b420:	1a400326 	beq	r3,r9,80b430 <__eqdf2+0x44>
  80b424:	10c00526 	beq	r2,r3,80b43c <__eqdf2+0x50>
  80b428:	00800044 	movi	r2,1
  80b42c:	f800283a 	ret
  80b430:	4192b03a 	or	r9,r8,r6
  80b434:	483ffc1e 	bne	r9,zero,80b428 <__alt_data_end+0xff80b428>
  80b438:	10fffb1e 	bne	r2,r3,80b428 <__alt_data_end+0xff80b428>
  80b43c:	523ffa1e 	bne	r10,r8,80b428 <__alt_data_end+0xff80b428>
  80b440:	21bff91e 	bne	r4,r6,80b428 <__alt_data_end+0xff80b428>
  80b444:	29c00826 	beq	r5,r7,80b468 <__eqdf2+0x7c>
  80b448:	103ff71e 	bne	r2,zero,80b428 <__alt_data_end+0xff80b428>
  80b44c:	5104b03a 	or	r2,r10,r4
  80b450:	1004c03a 	cmpne	r2,r2,zero
  80b454:	f800283a 	ret
  80b458:	5112b03a 	or	r9,r10,r4
  80b45c:	483fef26 	beq	r9,zero,80b41c <__alt_data_end+0xff80b41c>
  80b460:	00800044 	movi	r2,1
  80b464:	f800283a 	ret
  80b468:	0005883a 	mov	r2,zero
  80b46c:	f800283a 	ret

0080b470 <__gedf2>:
  80b470:	2804d53a 	srli	r2,r5,20
  80b474:	3806d53a 	srli	r3,r7,20
  80b478:	02000434 	movhi	r8,16
  80b47c:	423fffc4 	addi	r8,r8,-1
  80b480:	0241ffc4 	movi	r9,2047
  80b484:	1081ffcc 	andi	r2,r2,2047
  80b488:	2a14703a 	and	r10,r5,r8
  80b48c:	1a46703a 	and	r3,r3,r9
  80b490:	3a10703a 	and	r8,r7,r8
  80b494:	280ad7fa 	srli	r5,r5,31
  80b498:	380ed7fa 	srli	r7,r7,31
  80b49c:	12400b26 	beq	r2,r9,80b4cc <__gedf2+0x5c>
  80b4a0:	1a401626 	beq	r3,r9,80b4fc <__gedf2+0x8c>
  80b4a4:	10000c1e 	bne	r2,zero,80b4d8 <__gedf2+0x68>
  80b4a8:	5112b03a 	or	r9,r10,r4
  80b4ac:	4813003a 	cmpeq	r9,r9,zero
  80b4b0:	4817883a 	mov	r11,r9
  80b4b4:	18000c1e 	bne	r3,zero,80b4e8 <__gedf2+0x78>
  80b4b8:	4198b03a 	or	r12,r8,r6
  80b4bc:	60000a1e 	bne	r12,zero,80b4e8 <__gedf2+0x78>
  80b4c0:	48001326 	beq	r9,zero,80b510 <__gedf2+0xa0>
  80b4c4:	0005883a 	mov	r2,zero
  80b4c8:	f800283a 	ret
  80b4cc:	5112b03a 	or	r9,r10,r4
  80b4d0:	4800191e 	bne	r9,zero,80b538 <__gedf2+0xc8>
  80b4d4:	18800926 	beq	r3,r2,80b4fc <__gedf2+0x8c>
  80b4d8:	18000b1e 	bne	r3,zero,80b508 <__gedf2+0x98>
  80b4dc:	4192b03a 	or	r9,r8,r6
  80b4e0:	0017883a 	mov	r11,zero
  80b4e4:	48000a26 	beq	r9,zero,80b510 <__gedf2+0xa0>
  80b4e8:	39c03fcc 	andi	r7,r7,255
  80b4ec:	58000726 	beq	r11,zero,80b50c <__gedf2+0x9c>
  80b4f0:	3800081e 	bne	r7,zero,80b514 <__gedf2+0xa4>
  80b4f4:	00bfffc4 	movi	r2,-1
  80b4f8:	f800283a 	ret
  80b4fc:	4192b03a 	or	r9,r8,r6
  80b500:	48000d1e 	bne	r9,zero,80b538 <__gedf2+0xc8>
  80b504:	103fe826 	beq	r2,zero,80b4a8 <__alt_data_end+0xff80b4a8>
  80b508:	39c03fcc 	andi	r7,r7,255
  80b50c:	29c00326 	beq	r5,r7,80b51c <__gedf2+0xac>
  80b510:	283ff81e 	bne	r5,zero,80b4f4 <__alt_data_end+0xff80b4f4>
  80b514:	00800044 	movi	r2,1
  80b518:	f800283a 	ret
  80b51c:	18bffc16 	blt	r3,r2,80b510 <__alt_data_end+0xff80b510>
  80b520:	10c00316 	blt	r2,r3,80b530 <__gedf2+0xc0>
  80b524:	42bffa36 	bltu	r8,r10,80b510 <__alt_data_end+0xff80b510>
  80b528:	52000526 	beq	r10,r8,80b540 <__gedf2+0xd0>
  80b52c:	523fe52e 	bgeu	r10,r8,80b4c4 <__alt_data_end+0xff80b4c4>
  80b530:	283ff026 	beq	r5,zero,80b4f4 <__alt_data_end+0xff80b4f4>
  80b534:	003ff706 	br	80b514 <__alt_data_end+0xff80b514>
  80b538:	00bfff84 	movi	r2,-2
  80b53c:	f800283a 	ret
  80b540:	313ff336 	bltu	r6,r4,80b510 <__alt_data_end+0xff80b510>
  80b544:	21bfdf2e 	bgeu	r4,r6,80b4c4 <__alt_data_end+0xff80b4c4>
  80b548:	283fea26 	beq	r5,zero,80b4f4 <__alt_data_end+0xff80b4f4>
  80b54c:	003ff106 	br	80b514 <__alt_data_end+0xff80b514>

0080b550 <__ledf2>:
  80b550:	2804d53a 	srli	r2,r5,20
  80b554:	3810d53a 	srli	r8,r7,20
  80b558:	00c00434 	movhi	r3,16
  80b55c:	18ffffc4 	addi	r3,r3,-1
  80b560:	0241ffc4 	movi	r9,2047
  80b564:	1081ffcc 	andi	r2,r2,2047
  80b568:	28d4703a 	and	r10,r5,r3
  80b56c:	4250703a 	and	r8,r8,r9
  80b570:	38c6703a 	and	r3,r7,r3
  80b574:	280ad7fa 	srli	r5,r5,31
  80b578:	380ed7fa 	srli	r7,r7,31
  80b57c:	12400b26 	beq	r2,r9,80b5ac <__ledf2+0x5c>
  80b580:	42401926 	beq	r8,r9,80b5e8 <__ledf2+0x98>
  80b584:	10000c1e 	bne	r2,zero,80b5b8 <__ledf2+0x68>
  80b588:	5112b03a 	or	r9,r10,r4
  80b58c:	4813003a 	cmpeq	r9,r9,zero
  80b590:	4817883a 	mov	r11,r9
  80b594:	40000f26 	beq	r8,zero,80b5d4 <__ledf2+0x84>
  80b598:	39c03fcc 	andi	r7,r7,255
  80b59c:	58001826 	beq	r11,zero,80b600 <__ledf2+0xb0>
  80b5a0:	38000a1e 	bne	r7,zero,80b5cc <__ledf2+0x7c>
  80b5a4:	00bfffc4 	movi	r2,-1
  80b5a8:	f800283a 	ret
  80b5ac:	5112b03a 	or	r9,r10,r4
  80b5b0:	48000f1e 	bne	r9,zero,80b5f0 <__ledf2+0xa0>
  80b5b4:	40800c26 	beq	r8,r2,80b5e8 <__ledf2+0x98>
  80b5b8:	4000101e 	bne	r8,zero,80b5fc <__ledf2+0xac>
  80b5bc:	1992b03a 	or	r9,r3,r6
  80b5c0:	0017883a 	mov	r11,zero
  80b5c4:	483ff41e 	bne	r9,zero,80b598 <__alt_data_end+0xff80b598>
  80b5c8:	283ff61e 	bne	r5,zero,80b5a4 <__alt_data_end+0xff80b5a4>
  80b5cc:	00800044 	movi	r2,1
  80b5d0:	f800283a 	ret
  80b5d4:	1998b03a 	or	r12,r3,r6
  80b5d8:	603fef1e 	bne	r12,zero,80b598 <__alt_data_end+0xff80b598>
  80b5dc:	483ffa26 	beq	r9,zero,80b5c8 <__alt_data_end+0xff80b5c8>
  80b5e0:	0005883a 	mov	r2,zero
  80b5e4:	f800283a 	ret
  80b5e8:	1992b03a 	or	r9,r3,r6
  80b5ec:	48000226 	beq	r9,zero,80b5f8 <__ledf2+0xa8>
  80b5f0:	00800084 	movi	r2,2
  80b5f4:	f800283a 	ret
  80b5f8:	103fe326 	beq	r2,zero,80b588 <__alt_data_end+0xff80b588>
  80b5fc:	39c03fcc 	andi	r7,r7,255
  80b600:	29fff11e 	bne	r5,r7,80b5c8 <__alt_data_end+0xff80b5c8>
  80b604:	40bff016 	blt	r8,r2,80b5c8 <__alt_data_end+0xff80b5c8>
  80b608:	12000316 	blt	r2,r8,80b618 <__ledf2+0xc8>
  80b60c:	1abfee36 	bltu	r3,r10,80b5c8 <__alt_data_end+0xff80b5c8>
  80b610:	50c00326 	beq	r10,r3,80b620 <__ledf2+0xd0>
  80b614:	50fff22e 	bgeu	r10,r3,80b5e0 <__alt_data_end+0xff80b5e0>
  80b618:	283fe226 	beq	r5,zero,80b5a4 <__alt_data_end+0xff80b5a4>
  80b61c:	003feb06 	br	80b5cc <__alt_data_end+0xff80b5cc>
  80b620:	313fe936 	bltu	r6,r4,80b5c8 <__alt_data_end+0xff80b5c8>
  80b624:	21bfee2e 	bgeu	r4,r6,80b5e0 <__alt_data_end+0xff80b5e0>
  80b628:	283fde26 	beq	r5,zero,80b5a4 <__alt_data_end+0xff80b5a4>
  80b62c:	003fe706 	br	80b5cc <__alt_data_end+0xff80b5cc>

0080b630 <__muldf3>:
  80b630:	defff204 	addi	sp,sp,-56
  80b634:	2804d53a 	srli	r2,r5,20
  80b638:	dd800a15 	stw	r22,40(sp)
  80b63c:	282cd7fa 	srli	r22,r5,31
  80b640:	dc000415 	stw	r16,16(sp)
  80b644:	04000434 	movhi	r16,16
  80b648:	df000c15 	stw	fp,48(sp)
  80b64c:	dd000815 	stw	r20,32(sp)
  80b650:	dcc00715 	stw	r19,28(sp)
  80b654:	dc800615 	stw	r18,24(sp)
  80b658:	dc400515 	stw	r17,20(sp)
  80b65c:	843fffc4 	addi	r16,r16,-1
  80b660:	dfc00d15 	stw	ra,52(sp)
  80b664:	ddc00b15 	stw	r23,44(sp)
  80b668:	dd400915 	stw	r21,36(sp)
  80b66c:	1501ffcc 	andi	r20,r2,2047
  80b670:	2023883a 	mov	r17,r4
  80b674:	2025883a 	mov	r18,r4
  80b678:	2c20703a 	and	r16,r5,r16
  80b67c:	b027883a 	mov	r19,r22
  80b680:	b7003fcc 	andi	fp,r22,255
  80b684:	a0005926 	beq	r20,zero,80b7ec <__muldf3+0x1bc>
  80b688:	0081ffc4 	movi	r2,2047
  80b68c:	a0803426 	beq	r20,r2,80b760 <__muldf3+0x130>
  80b690:	84000434 	orhi	r16,r16,16
  80b694:	2004d77a 	srli	r2,r4,29
  80b698:	802090fa 	slli	r16,r16,3
  80b69c:	202490fa 	slli	r18,r4,3
  80b6a0:	a53f0044 	addi	r20,r20,-1023
  80b6a4:	80a0b03a 	or	r16,r16,r2
  80b6a8:	002b883a 	mov	r21,zero
  80b6ac:	0015883a 	mov	r10,zero
  80b6b0:	3812d53a 	srli	r9,r7,20
  80b6b4:	3806d7fa 	srli	r3,r7,31
  80b6b8:	02000434 	movhi	r8,16
  80b6bc:	423fffc4 	addi	r8,r8,-1
  80b6c0:	4941ffcc 	andi	r5,r9,2047
  80b6c4:	302f883a 	mov	r23,r6
  80b6c8:	3a22703a 	and	r17,r7,r8
  80b6cc:	1ac03fcc 	andi	r11,r3,255
  80b6d0:	28006226 	beq	r5,zero,80b85c <__muldf3+0x22c>
  80b6d4:	0081ffc4 	movi	r2,2047
  80b6d8:	28805a26 	beq	r5,r2,80b844 <__muldf3+0x214>
  80b6dc:	8a000434 	orhi	r8,r17,16
  80b6e0:	3004d77a 	srli	r2,r6,29
  80b6e4:	401090fa 	slli	r8,r8,3
  80b6e8:	302e90fa 	slli	r23,r6,3
  80b6ec:	297f0044 	addi	r5,r5,-1023
  80b6f0:	40a2b03a 	or	r17,r8,r2
  80b6f4:	0013883a 	mov	r9,zero
  80b6f8:	4d4cb03a 	or	r6,r9,r21
  80b6fc:	300c90ba 	slli	r6,r6,2
  80b700:	02002074 	movhi	r8,129
  80b704:	422dc804 	addi	r8,r8,-18656
  80b708:	320d883a 	add	r6,r6,r8
  80b70c:	31800017 	ldw	r6,0(r6)
  80b710:	a14b883a 	add	r5,r20,r5
  80b714:	1dacf03a 	xor	r22,r3,r22
  80b718:	2b000044 	addi	r12,r5,1
  80b71c:	3000683a 	jmp	r6
  80b720:	0080b95c 	xori	r2,zero,741
  80b724:	0080b948 	cmpgei	r2,zero,741
  80b728:	0080b948 	cmpgei	r2,zero,741
  80b72c:	0080b934 	movhi	r2,740
  80b730:	0080b77c 	xorhi	r2,zero,733
  80b734:	0080b77c 	xorhi	r2,zero,733
  80b738:	0080b91c 	xori	r2,zero,740
  80b73c:	0080b934 	movhi	r2,740
  80b740:	0080b77c 	xorhi	r2,zero,733
  80b744:	0080b91c 	xori	r2,zero,740
  80b748:	0080b77c 	xorhi	r2,zero,733
  80b74c:	0080b934 	movhi	r2,740
  80b750:	0080b780 	call	80b78 <__alt_mem_sdram_0-0x77f488>
  80b754:	0080b780 	call	80b78 <__alt_mem_sdram_0-0x77f488>
  80b758:	0080b780 	call	80b78 <__alt_mem_sdram_0-0x77f488>
  80b75c:	0080bb58 	cmpnei	r2,zero,749
  80b760:	8104b03a 	or	r2,r16,r4
  80b764:	10006a1e 	bne	r2,zero,80b910 <__muldf3+0x2e0>
  80b768:	05400204 	movi	r21,8
  80b76c:	0021883a 	mov	r16,zero
  80b770:	0025883a 	mov	r18,zero
  80b774:	02800084 	movi	r10,2
  80b778:	003fcd06 	br	80b6b0 <__alt_data_end+0xff80b6b0>
  80b77c:	b039883a 	mov	fp,r22
  80b780:	00800084 	movi	r2,2
  80b784:	50804e1e 	bne	r10,r2,80b8c0 <__muldf3+0x290>
  80b788:	e4c0004c 	andi	r19,fp,1
  80b78c:	0101ffc4 	movi	r4,2047
  80b790:	0021883a 	mov	r16,zero
  80b794:	0025883a 	mov	r18,zero
  80b798:	2008953a 	slli	r4,r4,20
  80b79c:	98c03fcc 	andi	r3,r19,255
  80b7a0:	01400434 	movhi	r5,16
  80b7a4:	297fffc4 	addi	r5,r5,-1
  80b7a8:	180697fa 	slli	r3,r3,31
  80b7ac:	8160703a 	and	r16,r16,r5
  80b7b0:	8120b03a 	or	r16,r16,r4
  80b7b4:	80c6b03a 	or	r3,r16,r3
  80b7b8:	9005883a 	mov	r2,r18
  80b7bc:	dfc00d17 	ldw	ra,52(sp)
  80b7c0:	df000c17 	ldw	fp,48(sp)
  80b7c4:	ddc00b17 	ldw	r23,44(sp)
  80b7c8:	dd800a17 	ldw	r22,40(sp)
  80b7cc:	dd400917 	ldw	r21,36(sp)
  80b7d0:	dd000817 	ldw	r20,32(sp)
  80b7d4:	dcc00717 	ldw	r19,28(sp)
  80b7d8:	dc800617 	ldw	r18,24(sp)
  80b7dc:	dc400517 	ldw	r17,20(sp)
  80b7e0:	dc000417 	ldw	r16,16(sp)
  80b7e4:	dec00e04 	addi	sp,sp,56
  80b7e8:	f800283a 	ret
  80b7ec:	8104b03a 	or	r2,r16,r4
  80b7f0:	10004226 	beq	r2,zero,80b8fc <__muldf3+0x2cc>
  80b7f4:	8000f926 	beq	r16,zero,80bbdc <__muldf3+0x5ac>
  80b7f8:	8009883a 	mov	r4,r16
  80b7fc:	d9800315 	stw	r6,12(sp)
  80b800:	d9c00015 	stw	r7,0(sp)
  80b804:	080c8200 	call	80c820 <__clzsi2>
  80b808:	d9800317 	ldw	r6,12(sp)
  80b80c:	d9c00017 	ldw	r7,0(sp)
  80b810:	1007883a 	mov	r3,r2
  80b814:	01000a04 	movi	r4,40
  80b818:	18bffe04 	addi	r2,r3,-8
  80b81c:	20c9c83a 	sub	r4,r4,r3
  80b820:	80a0983a 	sll	r16,r16,r2
  80b824:	8908d83a 	srl	r4,r17,r4
  80b828:	88a4983a 	sll	r18,r17,r2
  80b82c:	2420b03a 	or	r16,r4,r16
  80b830:	017f0344 	movi	r5,-1011
  80b834:	28e9c83a 	sub	r20,r5,r3
  80b838:	002b883a 	mov	r21,zero
  80b83c:	0015883a 	mov	r10,zero
  80b840:	003f9b06 	br	80b6b0 <__alt_data_end+0xff80b6b0>
  80b844:	8984b03a 	or	r2,r17,r6
  80b848:	10002a1e 	bne	r2,zero,80b8f4 <__muldf3+0x2c4>
  80b84c:	0023883a 	mov	r17,zero
  80b850:	002f883a 	mov	r23,zero
  80b854:	02400084 	movi	r9,2
  80b858:	003fa706 	br	80b6f8 <__alt_data_end+0xff80b6f8>
  80b85c:	8984b03a 	or	r2,r17,r6
  80b860:	10002026 	beq	r2,zero,80b8e4 <__muldf3+0x2b4>
  80b864:	8800cc26 	beq	r17,zero,80bb98 <__muldf3+0x568>
  80b868:	8809883a 	mov	r4,r17
  80b86c:	d8c00215 	stw	r3,8(sp)
  80b870:	d9800315 	stw	r6,12(sp)
  80b874:	da800015 	stw	r10,0(sp)
  80b878:	dac00115 	stw	r11,4(sp)
  80b87c:	080c8200 	call	80c820 <__clzsi2>
  80b880:	d8c00217 	ldw	r3,8(sp)
  80b884:	d9800317 	ldw	r6,12(sp)
  80b888:	da800017 	ldw	r10,0(sp)
  80b88c:	dac00117 	ldw	r11,4(sp)
  80b890:	1009883a 	mov	r4,r2
  80b894:	01400a04 	movi	r5,40
  80b898:	25fffe04 	addi	r23,r4,-8
  80b89c:	290bc83a 	sub	r5,r5,r4
  80b8a0:	8dd0983a 	sll	r8,r17,r23
  80b8a4:	314ad83a 	srl	r5,r6,r5
  80b8a8:	35ee983a 	sll	r23,r6,r23
  80b8ac:	2a22b03a 	or	r17,r5,r8
  80b8b0:	017f0344 	movi	r5,-1011
  80b8b4:	290bc83a 	sub	r5,r5,r4
  80b8b8:	0013883a 	mov	r9,zero
  80b8bc:	003f8e06 	br	80b6f8 <__alt_data_end+0xff80b6f8>
  80b8c0:	008000c4 	movi	r2,3
  80b8c4:	50811d26 	beq	r10,r2,80bd3c <__muldf3+0x70c>
  80b8c8:	00800044 	movi	r2,1
  80b8cc:	5080e01e 	bne	r10,r2,80bc50 <__muldf3+0x620>
  80b8d0:	e0a6703a 	and	r19,fp,r2
  80b8d4:	0009883a 	mov	r4,zero
  80b8d8:	0021883a 	mov	r16,zero
  80b8dc:	0025883a 	mov	r18,zero
  80b8e0:	003fad06 	br	80b798 <__alt_data_end+0xff80b798>
  80b8e4:	0023883a 	mov	r17,zero
  80b8e8:	002f883a 	mov	r23,zero
  80b8ec:	02400044 	movi	r9,1
  80b8f0:	003f8106 	br	80b6f8 <__alt_data_end+0xff80b6f8>
  80b8f4:	024000c4 	movi	r9,3
  80b8f8:	003f7f06 	br	80b6f8 <__alt_data_end+0xff80b6f8>
  80b8fc:	05400104 	movi	r21,4
  80b900:	0021883a 	mov	r16,zero
  80b904:	0025883a 	mov	r18,zero
  80b908:	02800044 	movi	r10,1
  80b90c:	003f6806 	br	80b6b0 <__alt_data_end+0xff80b6b0>
  80b910:	05400304 	movi	r21,12
  80b914:	028000c4 	movi	r10,3
  80b918:	003f6506 	br	80b6b0 <__alt_data_end+0xff80b6b0>
  80b91c:	04000434 	movhi	r16,16
  80b920:	0027883a 	mov	r19,zero
  80b924:	843fffc4 	addi	r16,r16,-1
  80b928:	04bfffc4 	movi	r18,-1
  80b92c:	0101ffc4 	movi	r4,2047
  80b930:	003f9906 	br	80b798 <__alt_data_end+0xff80b798>
  80b934:	8821883a 	mov	r16,r17
  80b938:	b825883a 	mov	r18,r23
  80b93c:	5839883a 	mov	fp,r11
  80b940:	4815883a 	mov	r10,r9
  80b944:	003f8e06 	br	80b780 <__alt_data_end+0xff80b780>
  80b948:	8821883a 	mov	r16,r17
  80b94c:	b825883a 	mov	r18,r23
  80b950:	b039883a 	mov	fp,r22
  80b954:	4815883a 	mov	r10,r9
  80b958:	003f8906 	br	80b780 <__alt_data_end+0xff80b780>
  80b95c:	b80cd43a 	srli	r6,r23,16
  80b960:	9006d43a 	srli	r3,r18,16
  80b964:	90bfffcc 	andi	r2,r18,65535
  80b968:	bdffffcc 	andi	r23,r23,65535
  80b96c:	b891383a 	mul	r8,r23,r2
  80b970:	b8c9383a 	mul	r4,r23,r3
  80b974:	309b383a 	mul	r13,r6,r2
  80b978:	400ed43a 	srli	r7,r8,16
  80b97c:	30df383a 	mul	r15,r6,r3
  80b980:	235b883a 	add	r13,r4,r13
  80b984:	69db883a 	add	r13,r13,r7
  80b988:	6900022e 	bgeu	r13,r4,80b994 <__muldf3+0x364>
  80b98c:	01000074 	movhi	r4,1
  80b990:	791f883a 	add	r15,r15,r4
  80b994:	8828d43a 	srli	r20,r17,16
  80b998:	8c7fffcc 	andi	r17,r17,65535
  80b99c:	888f383a 	mul	r7,r17,r2
  80b9a0:	88d3383a 	mul	r9,r17,r3
  80b9a4:	a0a5383a 	mul	r18,r20,r2
  80b9a8:	3816d43a 	srli	r11,r7,16
  80b9ac:	6814943a 	slli	r10,r13,16
  80b9b0:	4ca5883a 	add	r18,r9,r18
  80b9b4:	423fffcc 	andi	r8,r8,65535
  80b9b8:	92e5883a 	add	r18,r18,r11
  80b9bc:	6808d43a 	srli	r4,r13,16
  80b9c0:	5215883a 	add	r10,r10,r8
  80b9c4:	a0c7383a 	mul	r3,r20,r3
  80b9c8:	9240022e 	bgeu	r18,r9,80b9d4 <__muldf3+0x3a4>
  80b9cc:	00800074 	movhi	r2,1
  80b9d0:	1887883a 	add	r3,r3,r2
  80b9d4:	802ad43a 	srli	r21,r16,16
  80b9d8:	80bfffcc 	andi	r2,r16,65535
  80b9dc:	b893383a 	mul	r9,r23,r2
  80b9e0:	3091383a 	mul	r8,r6,r2
  80b9e4:	bd6f383a 	mul	r23,r23,r21
  80b9e8:	9026943a 	slli	r19,r18,16
  80b9ec:	481ad43a 	srli	r13,r9,16
  80b9f0:	9024d43a 	srli	r18,r18,16
  80b9f4:	39ffffcc 	andi	r7,r7,65535
  80b9f8:	ba11883a 	add	r8,r23,r8
  80b9fc:	99e7883a 	add	r19,r19,r7
  80ba00:	4351883a 	add	r8,r8,r13
  80ba04:	1c97883a 	add	r11,r3,r18
  80ba08:	354d383a 	mul	r6,r6,r21
  80ba0c:	9925883a 	add	r18,r19,r4
  80ba10:	45c0022e 	bgeu	r8,r23,80ba1c <__muldf3+0x3ec>
  80ba14:	00c00074 	movhi	r3,1
  80ba18:	30cd883a 	add	r6,r6,r3
  80ba1c:	8889383a 	mul	r4,r17,r2
  80ba20:	8d63383a 	mul	r17,r17,r21
  80ba24:	a085383a 	mul	r2,r20,r2
  80ba28:	200ed43a 	srli	r7,r4,16
  80ba2c:	401cd43a 	srli	r14,r8,16
  80ba30:	401a943a 	slli	r13,r8,16
  80ba34:	8885883a 	add	r2,r17,r2
  80ba38:	4a3fffcc 	andi	r8,r9,65535
  80ba3c:	11c5883a 	add	r2,r2,r7
  80ba40:	339d883a 	add	r14,r6,r14
  80ba44:	6a11883a 	add	r8,r13,r8
  80ba48:	a561383a 	mul	r16,r20,r21
  80ba4c:	1440022e 	bgeu	r2,r17,80ba58 <__muldf3+0x428>
  80ba50:	00c00074 	movhi	r3,1
  80ba54:	80e1883a 	add	r16,r16,r3
  80ba58:	1006943a 	slli	r3,r2,16
  80ba5c:	213fffcc 	andi	r4,r4,65535
  80ba60:	93db883a 	add	r13,r18,r15
  80ba64:	1909883a 	add	r4,r3,r4
  80ba68:	22c7883a 	add	r3,r4,r11
  80ba6c:	6cd3803a 	cmpltu	r9,r13,r19
  80ba70:	6a09883a 	add	r4,r13,r8
  80ba74:	1a5b883a 	add	r13,r3,r9
  80ba78:	2211803a 	cmpltu	r8,r4,r8
  80ba7c:	734d883a 	add	r6,r14,r13
  80ba80:	100ed43a 	srli	r7,r2,16
  80ba84:	6a53803a 	cmpltu	r9,r13,r9
  80ba88:	3205883a 	add	r2,r6,r8
  80ba8c:	1ac7803a 	cmpltu	r3,r3,r11
  80ba90:	1211803a 	cmpltu	r8,r2,r8
  80ba94:	48c6b03a 	or	r3,r9,r3
  80ba98:	338d803a 	cmpltu	r6,r6,r14
  80ba9c:	19c7883a 	add	r3,r3,r7
  80baa0:	418cb03a 	or	r6,r8,r6
  80baa4:	1987883a 	add	r3,r3,r6
  80baa8:	2024927a 	slli	r18,r4,9
  80baac:	1c07883a 	add	r3,r3,r16
  80bab0:	1806927a 	slli	r3,r3,9
  80bab4:	1020d5fa 	srli	r16,r2,23
  80bab8:	2008d5fa 	srli	r4,r4,23
  80babc:	9294b03a 	or	r10,r18,r10
  80bac0:	1004927a 	slli	r2,r2,9
  80bac4:	5024c03a 	cmpne	r18,r10,zero
  80bac8:	1c20b03a 	or	r16,r3,r16
  80bacc:	9108b03a 	or	r4,r18,r4
  80bad0:	80c0402c 	andhi	r3,r16,256
  80bad4:	20a4b03a 	or	r18,r4,r2
  80bad8:	18000726 	beq	r3,zero,80baf8 <__muldf3+0x4c8>
  80badc:	9006d07a 	srli	r3,r18,1
  80bae0:	800897fa 	slli	r4,r16,31
  80bae4:	9080004c 	andi	r2,r18,1
  80bae8:	8020d07a 	srli	r16,r16,1
  80baec:	10c4b03a 	or	r2,r2,r3
  80baf0:	1124b03a 	or	r18,r2,r4
  80baf4:	600b883a 	mov	r5,r12
  80baf8:	2900ffc4 	addi	r4,r5,1023
  80bafc:	01004b0e 	bge	zero,r4,80bc2c <__muldf3+0x5fc>
  80bb00:	908001cc 	andi	r2,r18,7
  80bb04:	10000726 	beq	r2,zero,80bb24 <__muldf3+0x4f4>
  80bb08:	90c003cc 	andi	r3,r18,15
  80bb0c:	00800104 	movi	r2,4
  80bb10:	18800426 	beq	r3,r2,80bb24 <__muldf3+0x4f4>
  80bb14:	9087883a 	add	r3,r18,r2
  80bb18:	1c85803a 	cmpltu	r2,r3,r18
  80bb1c:	80a1883a 	add	r16,r16,r2
  80bb20:	1825883a 	mov	r18,r3
  80bb24:	8080402c 	andhi	r2,r16,256
  80bb28:	10000426 	beq	r2,zero,80bb3c <__muldf3+0x50c>
  80bb2c:	00bfc034 	movhi	r2,65280
  80bb30:	10bfffc4 	addi	r2,r2,-1
  80bb34:	29010004 	addi	r4,r5,1024
  80bb38:	80a0703a 	and	r16,r16,r2
  80bb3c:	0081ff84 	movi	r2,2046
  80bb40:	1100320e 	bge	r2,r4,80bc0c <__muldf3+0x5dc>
  80bb44:	b4c0004c 	andi	r19,r22,1
  80bb48:	0101ffc4 	movi	r4,2047
  80bb4c:	0021883a 	mov	r16,zero
  80bb50:	0025883a 	mov	r18,zero
  80bb54:	003f1006 	br	80b798 <__alt_data_end+0xff80b798>
  80bb58:	8080022c 	andhi	r2,r16,8
  80bb5c:	10000926 	beq	r2,zero,80bb84 <__muldf3+0x554>
  80bb60:	8880022c 	andhi	r2,r17,8
  80bb64:	1000071e 	bne	r2,zero,80bb84 <__muldf3+0x554>
  80bb68:	00800434 	movhi	r2,16
  80bb6c:	8c000234 	orhi	r16,r17,8
  80bb70:	10bfffc4 	addi	r2,r2,-1
  80bb74:	1827883a 	mov	r19,r3
  80bb78:	80a0703a 	and	r16,r16,r2
  80bb7c:	b825883a 	mov	r18,r23
  80bb80:	003f6a06 	br	80b92c <__alt_data_end+0xff80b92c>
  80bb84:	00800434 	movhi	r2,16
  80bb88:	84000234 	orhi	r16,r16,8
  80bb8c:	10bfffc4 	addi	r2,r2,-1
  80bb90:	80a0703a 	and	r16,r16,r2
  80bb94:	003f6506 	br	80b92c <__alt_data_end+0xff80b92c>
  80bb98:	3009883a 	mov	r4,r6
  80bb9c:	d8c00215 	stw	r3,8(sp)
  80bba0:	d9800315 	stw	r6,12(sp)
  80bba4:	da800015 	stw	r10,0(sp)
  80bba8:	dac00115 	stw	r11,4(sp)
  80bbac:	080c8200 	call	80c820 <__clzsi2>
  80bbb0:	11000804 	addi	r4,r2,32
  80bbb4:	014009c4 	movi	r5,39
  80bbb8:	d8c00217 	ldw	r3,8(sp)
  80bbbc:	d9800317 	ldw	r6,12(sp)
  80bbc0:	da800017 	ldw	r10,0(sp)
  80bbc4:	dac00117 	ldw	r11,4(sp)
  80bbc8:	293f320e 	bge	r5,r4,80b894 <__alt_data_end+0xff80b894>
  80bbcc:	10bffe04 	addi	r2,r2,-8
  80bbd0:	b8a2983a 	sll	r17,r23,r2
  80bbd4:	002f883a 	mov	r23,zero
  80bbd8:	003f3506 	br	80b8b0 <__alt_data_end+0xff80b8b0>
  80bbdc:	d9800315 	stw	r6,12(sp)
  80bbe0:	d9c00015 	stw	r7,0(sp)
  80bbe4:	080c8200 	call	80c820 <__clzsi2>
  80bbe8:	10c00804 	addi	r3,r2,32
  80bbec:	010009c4 	movi	r4,39
  80bbf0:	d9800317 	ldw	r6,12(sp)
  80bbf4:	d9c00017 	ldw	r7,0(sp)
  80bbf8:	20ff060e 	bge	r4,r3,80b814 <__alt_data_end+0xff80b814>
  80bbfc:	10bffe04 	addi	r2,r2,-8
  80bc00:	88a0983a 	sll	r16,r17,r2
  80bc04:	0025883a 	mov	r18,zero
  80bc08:	003f0906 	br	80b830 <__alt_data_end+0xff80b830>
  80bc0c:	9004d0fa 	srli	r2,r18,3
  80bc10:	8024977a 	slli	r18,r16,29
  80bc14:	8020927a 	slli	r16,r16,9
  80bc18:	2101ffcc 	andi	r4,r4,2047
  80bc1c:	90a4b03a 	or	r18,r18,r2
  80bc20:	8020d33a 	srli	r16,r16,12
  80bc24:	b4c0004c 	andi	r19,r22,1
  80bc28:	003edb06 	br	80b798 <__alt_data_end+0xff80b798>
  80bc2c:	00ff0084 	movi	r3,-1022
  80bc30:	1947c83a 	sub	r3,r3,r5
  80bc34:	00800e04 	movi	r2,56
  80bc38:	10c0080e 	bge	r2,r3,80bc5c <__muldf3+0x62c>
  80bc3c:	b4c0004c 	andi	r19,r22,1
  80bc40:	0009883a 	mov	r4,zero
  80bc44:	0021883a 	mov	r16,zero
  80bc48:	0025883a 	mov	r18,zero
  80bc4c:	003ed206 	br	80b798 <__alt_data_end+0xff80b798>
  80bc50:	600b883a 	mov	r5,r12
  80bc54:	e02d883a 	mov	r22,fp
  80bc58:	003fa706 	br	80baf8 <__alt_data_end+0xff80baf8>
  80bc5c:	008007c4 	movi	r2,31
  80bc60:	10c01816 	blt	r2,r3,80bcc4 <__muldf3+0x694>
  80bc64:	29410784 	addi	r5,r5,1054
  80bc68:	8144983a 	sll	r2,r16,r5
  80bc6c:	90c8d83a 	srl	r4,r18,r3
  80bc70:	914a983a 	sll	r5,r18,r5
  80bc74:	80c6d83a 	srl	r3,r16,r3
  80bc78:	2088b03a 	or	r4,r4,r2
  80bc7c:	2804c03a 	cmpne	r2,r5,zero
  80bc80:	2084b03a 	or	r2,r4,r2
  80bc84:	110001cc 	andi	r4,r2,7
  80bc88:	20000726 	beq	r4,zero,80bca8 <__muldf3+0x678>
  80bc8c:	114003cc 	andi	r5,r2,15
  80bc90:	01000104 	movi	r4,4
  80bc94:	29000426 	beq	r5,r4,80bca8 <__muldf3+0x678>
  80bc98:	11000104 	addi	r4,r2,4
  80bc9c:	2085803a 	cmpltu	r2,r4,r2
  80bca0:	1887883a 	add	r3,r3,r2
  80bca4:	2005883a 	mov	r2,r4
  80bca8:	1900202c 	andhi	r4,r3,128
  80bcac:	20001826 	beq	r4,zero,80bd10 <__muldf3+0x6e0>
  80bcb0:	b4c0004c 	andi	r19,r22,1
  80bcb4:	01000044 	movi	r4,1
  80bcb8:	0021883a 	mov	r16,zero
  80bcbc:	0025883a 	mov	r18,zero
  80bcc0:	003eb506 	br	80b798 <__alt_data_end+0xff80b798>
  80bcc4:	00bef884 	movi	r2,-1054
  80bcc8:	1145c83a 	sub	r2,r2,r5
  80bccc:	8088d83a 	srl	r4,r16,r2
  80bcd0:	00800804 	movi	r2,32
  80bcd4:	18801726 	beq	r3,r2,80bd34 <__muldf3+0x704>
  80bcd8:	28810f84 	addi	r2,r5,1086
  80bcdc:	8084983a 	sll	r2,r16,r2
  80bce0:	1484b03a 	or	r2,r2,r18
  80bce4:	1004c03a 	cmpne	r2,r2,zero
  80bce8:	1104b03a 	or	r2,r2,r4
  80bcec:	10c001cc 	andi	r3,r2,7
  80bcf0:	18000b1e 	bne	r3,zero,80bd20 <__muldf3+0x6f0>
  80bcf4:	0021883a 	mov	r16,zero
  80bcf8:	1004d0fa 	srli	r2,r2,3
  80bcfc:	b4c0004c 	andi	r19,r22,1
  80bd00:	0009883a 	mov	r4,zero
  80bd04:	10e4b03a 	or	r18,r2,r3
  80bd08:	003ea306 	br	80b798 <__alt_data_end+0xff80b798>
  80bd0c:	0007883a 	mov	r3,zero
  80bd10:	1820927a 	slli	r16,r3,9
  80bd14:	1806977a 	slli	r3,r3,29
  80bd18:	8020d33a 	srli	r16,r16,12
  80bd1c:	003ff606 	br	80bcf8 <__alt_data_end+0xff80bcf8>
  80bd20:	110003cc 	andi	r4,r2,15
  80bd24:	00c00104 	movi	r3,4
  80bd28:	20fff826 	beq	r4,r3,80bd0c <__alt_data_end+0xff80bd0c>
  80bd2c:	0007883a 	mov	r3,zero
  80bd30:	003fd906 	br	80bc98 <__alt_data_end+0xff80bc98>
  80bd34:	0005883a 	mov	r2,zero
  80bd38:	003fe906 	br	80bce0 <__alt_data_end+0xff80bce0>
  80bd3c:	00800434 	movhi	r2,16
  80bd40:	84000234 	orhi	r16,r16,8
  80bd44:	10bfffc4 	addi	r2,r2,-1
  80bd48:	e4c0004c 	andi	r19,fp,1
  80bd4c:	80a0703a 	and	r16,r16,r2
  80bd50:	003ef606 	br	80b92c <__alt_data_end+0xff80b92c>

0080bd54 <__subdf3>:
  80bd54:	00c00434 	movhi	r3,16
  80bd58:	18ffffc4 	addi	r3,r3,-1
  80bd5c:	defffb04 	addi	sp,sp,-20
  80bd60:	28d2703a 	and	r9,r5,r3
  80bd64:	3814d53a 	srli	r10,r7,20
  80bd68:	38c6703a 	and	r3,r7,r3
  80bd6c:	3004d77a 	srli	r2,r6,29
  80bd70:	dc800215 	stw	r18,8(sp)
  80bd74:	dc000015 	stw	r16,0(sp)
  80bd78:	2824d7fa 	srli	r18,r5,31
  80bd7c:	2820d53a 	srli	r16,r5,20
  80bd80:	481290fa 	slli	r9,r9,3
  80bd84:	200ad77a 	srli	r5,r4,29
  80bd88:	180690fa 	slli	r3,r3,3
  80bd8c:	dc400115 	stw	r17,4(sp)
  80bd90:	dfc00415 	stw	ra,16(sp)
  80bd94:	202290fa 	slli	r17,r4,3
  80bd98:	dcc00315 	stw	r19,12(sp)
  80bd9c:	5281ffcc 	andi	r10,r10,2047
  80bda0:	0101ffc4 	movi	r4,2047
  80bda4:	9011883a 	mov	r8,r18
  80bda8:	8401ffcc 	andi	r16,r16,2047
  80bdac:	94803fcc 	andi	r18,r18,255
  80bdb0:	494ab03a 	or	r5,r9,r5
  80bdb4:	380ed7fa 	srli	r7,r7,31
  80bdb8:	1886b03a 	or	r3,r3,r2
  80bdbc:	300c90fa 	slli	r6,r6,3
  80bdc0:	51009026 	beq	r10,r4,80c004 <__subdf3+0x2b0>
  80bdc4:	39c0005c 	xori	r7,r7,1
  80bdc8:	8285c83a 	sub	r2,r16,r10
  80bdcc:	91c06f26 	beq	r18,r7,80bf8c <__subdf3+0x238>
  80bdd0:	0080b10e 	bge	zero,r2,80c098 <__subdf3+0x344>
  80bdd4:	50002a1e 	bne	r10,zero,80be80 <__subdf3+0x12c>
  80bdd8:	1988b03a 	or	r4,r3,r6
  80bddc:	2000941e 	bne	r4,zero,80c030 <__subdf3+0x2dc>
  80bde0:	888001cc 	andi	r2,r17,7
  80bde4:	10005b26 	beq	r2,zero,80bf54 <__subdf3+0x200>
  80bde8:	88c003cc 	andi	r3,r17,15
  80bdec:	00800104 	movi	r2,4
  80bdf0:	18805826 	beq	r3,r2,80bf54 <__subdf3+0x200>
  80bdf4:	88c00104 	addi	r3,r17,4
  80bdf8:	1c63803a 	cmpltu	r17,r3,r17
  80bdfc:	2c4b883a 	add	r5,r5,r17
  80be00:	2880202c 	andhi	r2,r5,128
  80be04:	9200004c 	andi	r8,r18,1
  80be08:	1823883a 	mov	r17,r3
  80be0c:	10005426 	beq	r2,zero,80bf60 <__subdf3+0x20c>
  80be10:	84000044 	addi	r16,r16,1
  80be14:	0081ffc4 	movi	r2,2047
  80be18:	8080bf26 	beq	r16,r2,80c118 <__subdf3+0x3c4>
  80be1c:	013fe034 	movhi	r4,65408
  80be20:	213fffc4 	addi	r4,r4,-1
  80be24:	290a703a 	and	r5,r5,r4
  80be28:	2804977a 	slli	r2,r5,29
  80be2c:	280a927a 	slli	r5,r5,9
  80be30:	8822d0fa 	srli	r17,r17,3
  80be34:	8401ffcc 	andi	r16,r16,2047
  80be38:	2808d33a 	srli	r4,r5,12
  80be3c:	1444b03a 	or	r2,r2,r17
  80be40:	8401ffcc 	andi	r16,r16,2047
  80be44:	800a953a 	slli	r5,r16,20
  80be48:	40c03fcc 	andi	r3,r8,255
  80be4c:	04000434 	movhi	r16,16
  80be50:	180697fa 	slli	r3,r3,31
  80be54:	843fffc4 	addi	r16,r16,-1
  80be58:	2420703a 	and	r16,r4,r16
  80be5c:	8160b03a 	or	r16,r16,r5
  80be60:	80c6b03a 	or	r3,r16,r3
  80be64:	dfc00417 	ldw	ra,16(sp)
  80be68:	dcc00317 	ldw	r19,12(sp)
  80be6c:	dc800217 	ldw	r18,8(sp)
  80be70:	dc400117 	ldw	r17,4(sp)
  80be74:	dc000017 	ldw	r16,0(sp)
  80be78:	dec00504 	addi	sp,sp,20
  80be7c:	f800283a 	ret
  80be80:	0101ffc4 	movi	r4,2047
  80be84:	813fd626 	beq	r16,r4,80bde0 <__alt_data_end+0xff80bde0>
  80be88:	18c02034 	orhi	r3,r3,128
  80be8c:	01000e04 	movi	r4,56
  80be90:	2080a416 	blt	r4,r2,80c124 <__subdf3+0x3d0>
  80be94:	010007c4 	movi	r4,31
  80be98:	2080c716 	blt	r4,r2,80c1b8 <__subdf3+0x464>
  80be9c:	01000804 	movi	r4,32
  80bea0:	2089c83a 	sub	r4,r4,r2
  80bea4:	1910983a 	sll	r8,r3,r4
  80bea8:	308ed83a 	srl	r7,r6,r2
  80beac:	3108983a 	sll	r4,r6,r4
  80beb0:	1884d83a 	srl	r2,r3,r2
  80beb4:	41ccb03a 	or	r6,r8,r7
  80beb8:	2008c03a 	cmpne	r4,r4,zero
  80bebc:	310cb03a 	or	r6,r6,r4
  80bec0:	898dc83a 	sub	r6,r17,r6
  80bec4:	89a3803a 	cmpltu	r17,r17,r6
  80bec8:	288bc83a 	sub	r5,r5,r2
  80becc:	2c4bc83a 	sub	r5,r5,r17
  80bed0:	3023883a 	mov	r17,r6
  80bed4:	2880202c 	andhi	r2,r5,128
  80bed8:	10006b26 	beq	r2,zero,80c088 <__subdf3+0x334>
  80bedc:	04c02034 	movhi	r19,128
  80bee0:	9cffffc4 	addi	r19,r19,-1
  80bee4:	2ce6703a 	and	r19,r5,r19
  80bee8:	98007c26 	beq	r19,zero,80c0dc <__subdf3+0x388>
  80beec:	9809883a 	mov	r4,r19
  80bef0:	080c8200 	call	80c820 <__clzsi2>
  80bef4:	10fffe04 	addi	r3,r2,-8
  80bef8:	010007c4 	movi	r4,31
  80befc:	20c07d16 	blt	r4,r3,80c0f4 <__subdf3+0x3a0>
  80bf00:	01400a04 	movi	r5,40
  80bf04:	2885c83a 	sub	r2,r5,r2
  80bf08:	888ad83a 	srl	r5,r17,r2
  80bf0c:	98e6983a 	sll	r19,r19,r3
  80bf10:	88e2983a 	sll	r17,r17,r3
  80bf14:	2ce6b03a 	or	r19,r5,r19
  80bf18:	1c007a16 	blt	r3,r16,80c104 <__subdf3+0x3b0>
  80bf1c:	1c21c83a 	sub	r16,r3,r16
  80bf20:	81400044 	addi	r5,r16,1
  80bf24:	00c007c4 	movi	r3,31
  80bf28:	19409616 	blt	r3,r5,80c184 <__subdf3+0x430>
  80bf2c:	1c21c83a 	sub	r16,r3,r16
  80bf30:	8c08983a 	sll	r4,r17,r16
  80bf34:	8946d83a 	srl	r3,r17,r5
  80bf38:	9c20983a 	sll	r16,r19,r16
  80bf3c:	2008c03a 	cmpne	r4,r4,zero
  80bf40:	994ad83a 	srl	r5,r19,r5
  80bf44:	1c06b03a 	or	r3,r3,r16
  80bf48:	1922b03a 	or	r17,r3,r4
  80bf4c:	0021883a 	mov	r16,zero
  80bf50:	003fa306 	br	80bde0 <__alt_data_end+0xff80bde0>
  80bf54:	2880202c 	andhi	r2,r5,128
  80bf58:	9200004c 	andi	r8,r18,1
  80bf5c:	103fac1e 	bne	r2,zero,80be10 <__alt_data_end+0xff80be10>
  80bf60:	2804977a 	slli	r2,r5,29
  80bf64:	8822d0fa 	srli	r17,r17,3
  80bf68:	00c1ffc4 	movi	r3,2047
  80bf6c:	280ad0fa 	srli	r5,r5,3
  80bf70:	1444b03a 	or	r2,r2,r17
  80bf74:	80c02726 	beq	r16,r3,80c014 <__subdf3+0x2c0>
  80bf78:	01000434 	movhi	r4,16
  80bf7c:	213fffc4 	addi	r4,r4,-1
  80bf80:	80e0703a 	and	r16,r16,r3
  80bf84:	2908703a 	and	r4,r5,r4
  80bf88:	003fad06 	br	80be40 <__alt_data_end+0xff80be40>
  80bf8c:	0080690e 	bge	zero,r2,80c134 <__subdf3+0x3e0>
  80bf90:	50002f26 	beq	r10,zero,80c050 <__subdf3+0x2fc>
  80bf94:	0101ffc4 	movi	r4,2047
  80bf98:	813f9126 	beq	r16,r4,80bde0 <__alt_data_end+0xff80bde0>
  80bf9c:	18c02034 	orhi	r3,r3,128
  80bfa0:	01000e04 	movi	r4,56
  80bfa4:	2080b00e 	bge	r4,r2,80c268 <__subdf3+0x514>
  80bfa8:	198cb03a 	or	r6,r3,r6
  80bfac:	300ec03a 	cmpne	r7,r6,zero
  80bfb0:	0005883a 	mov	r2,zero
  80bfb4:	3c4f883a 	add	r7,r7,r17
  80bfb8:	3c63803a 	cmpltu	r17,r7,r17
  80bfbc:	114b883a 	add	r5,r2,r5
  80bfc0:	2c4b883a 	add	r5,r5,r17
  80bfc4:	3823883a 	mov	r17,r7
  80bfc8:	2880202c 	andhi	r2,r5,128
  80bfcc:	10002e26 	beq	r2,zero,80c088 <__subdf3+0x334>
  80bfd0:	84000044 	addi	r16,r16,1
  80bfd4:	0081ffc4 	movi	r2,2047
  80bfd8:	8080de26 	beq	r16,r2,80c354 <__subdf3+0x600>
  80bfdc:	00bfe034 	movhi	r2,65408
  80bfe0:	10bfffc4 	addi	r2,r2,-1
  80bfe4:	288a703a 	and	r5,r5,r2
  80bfe8:	880cd07a 	srli	r6,r17,1
  80bfec:	280897fa 	slli	r4,r5,31
  80bff0:	88c0004c 	andi	r3,r17,1
  80bff4:	30e2b03a 	or	r17,r6,r3
  80bff8:	280ad07a 	srli	r5,r5,1
  80bffc:	8922b03a 	or	r17,r17,r4
  80c000:	003f7706 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c004:	1984b03a 	or	r2,r3,r6
  80c008:	103f6e26 	beq	r2,zero,80bdc4 <__alt_data_end+0xff80bdc4>
  80c00c:	39c03fcc 	andi	r7,r7,255
  80c010:	003f6d06 	br	80bdc8 <__alt_data_end+0xff80bdc8>
  80c014:	1146b03a 	or	r3,r2,r5
  80c018:	18003f26 	beq	r3,zero,80c118 <__subdf3+0x3c4>
  80c01c:	00c00434 	movhi	r3,16
  80c020:	29000234 	orhi	r4,r5,8
  80c024:	18ffffc4 	addi	r3,r3,-1
  80c028:	20c8703a 	and	r4,r4,r3
  80c02c:	003f8406 	br	80be40 <__alt_data_end+0xff80be40>
  80c030:	10bfffc4 	addi	r2,r2,-1
  80c034:	1000501e 	bne	r2,zero,80c178 <__subdf3+0x424>
  80c038:	898fc83a 	sub	r7,r17,r6
  80c03c:	89e3803a 	cmpltu	r17,r17,r7
  80c040:	28cbc83a 	sub	r5,r5,r3
  80c044:	2c4bc83a 	sub	r5,r5,r17
  80c048:	3823883a 	mov	r17,r7
  80c04c:	003fa106 	br	80bed4 <__alt_data_end+0xff80bed4>
  80c050:	1988b03a 	or	r4,r3,r6
  80c054:	203f6226 	beq	r4,zero,80bde0 <__alt_data_end+0xff80bde0>
  80c058:	10bfffc4 	addi	r2,r2,-1
  80c05c:	10009b1e 	bne	r2,zero,80c2cc <__subdf3+0x578>
  80c060:	344d883a 	add	r6,r6,r17
  80c064:	3463803a 	cmpltu	r17,r6,r17
  80c068:	194b883a 	add	r5,r3,r5
  80c06c:	2c4b883a 	add	r5,r5,r17
  80c070:	3023883a 	mov	r17,r6
  80c074:	003fd406 	br	80bfc8 <__alt_data_end+0xff80bfc8>
  80c078:	1106b03a 	or	r3,r2,r4
  80c07c:	1800b426 	beq	r3,zero,80c350 <__subdf3+0x5fc>
  80c080:	100b883a 	mov	r5,r2
  80c084:	2023883a 	mov	r17,r4
  80c088:	888001cc 	andi	r2,r17,7
  80c08c:	103f561e 	bne	r2,zero,80bde8 <__alt_data_end+0xff80bde8>
  80c090:	9200004c 	andi	r8,r18,1
  80c094:	003fb206 	br	80bf60 <__alt_data_end+0xff80bf60>
  80c098:	1000531e 	bne	r2,zero,80c1e8 <__subdf3+0x494>
  80c09c:	80800044 	addi	r2,r16,1
  80c0a0:	1081ffcc 	andi	r2,r2,2047
  80c0a4:	01000044 	movi	r4,1
  80c0a8:	2080a00e 	bge	r4,r2,80c32c <__subdf3+0x5d8>
  80c0ac:	8985c83a 	sub	r2,r17,r6
  80c0b0:	8889803a 	cmpltu	r4,r17,r2
  80c0b4:	28e7c83a 	sub	r19,r5,r3
  80c0b8:	9927c83a 	sub	r19,r19,r4
  80c0bc:	9900202c 	andhi	r4,r19,128
  80c0c0:	20006226 	beq	r4,zero,80c24c <__subdf3+0x4f8>
  80c0c4:	3463c83a 	sub	r17,r6,r17
  80c0c8:	194bc83a 	sub	r5,r3,r5
  80c0cc:	344d803a 	cmpltu	r6,r6,r17
  80c0d0:	29a7c83a 	sub	r19,r5,r6
  80c0d4:	3825883a 	mov	r18,r7
  80c0d8:	983f841e 	bne	r19,zero,80beec <__alt_data_end+0xff80beec>
  80c0dc:	8809883a 	mov	r4,r17
  80c0e0:	080c8200 	call	80c820 <__clzsi2>
  80c0e4:	10800804 	addi	r2,r2,32
  80c0e8:	10fffe04 	addi	r3,r2,-8
  80c0ec:	010007c4 	movi	r4,31
  80c0f0:	20ff830e 	bge	r4,r3,80bf00 <__alt_data_end+0xff80bf00>
  80c0f4:	14fff604 	addi	r19,r2,-40
  80c0f8:	8ce6983a 	sll	r19,r17,r19
  80c0fc:	0023883a 	mov	r17,zero
  80c100:	1c3f860e 	bge	r3,r16,80bf1c <__alt_data_end+0xff80bf1c>
  80c104:	017fe034 	movhi	r5,65408
  80c108:	297fffc4 	addi	r5,r5,-1
  80c10c:	80e1c83a 	sub	r16,r16,r3
  80c110:	994a703a 	and	r5,r19,r5
  80c114:	003f3206 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c118:	0009883a 	mov	r4,zero
  80c11c:	0005883a 	mov	r2,zero
  80c120:	003f4706 	br	80be40 <__alt_data_end+0xff80be40>
  80c124:	198cb03a 	or	r6,r3,r6
  80c128:	300cc03a 	cmpne	r6,r6,zero
  80c12c:	0005883a 	mov	r2,zero
  80c130:	003f6306 	br	80bec0 <__alt_data_end+0xff80bec0>
  80c134:	10009d1e 	bne	r2,zero,80c3ac <__subdf3+0x658>
  80c138:	81c00044 	addi	r7,r16,1
  80c13c:	3881ffcc 	andi	r2,r7,2047
  80c140:	02400044 	movi	r9,1
  80c144:	4880680e 	bge	r9,r2,80c2e8 <__subdf3+0x594>
  80c148:	0081ffc4 	movi	r2,2047
  80c14c:	3880ae26 	beq	r7,r2,80c408 <__subdf3+0x6b4>
  80c150:	344d883a 	add	r6,r6,r17
  80c154:	3463803a 	cmpltu	r17,r6,r17
  80c158:	194b883a 	add	r5,r3,r5
  80c15c:	2c4b883a 	add	r5,r5,r17
  80c160:	282297fa 	slli	r17,r5,31
  80c164:	300cd07a 	srli	r6,r6,1
  80c168:	280ad07a 	srli	r5,r5,1
  80c16c:	3821883a 	mov	r16,r7
  80c170:	89a2b03a 	or	r17,r17,r6
  80c174:	003f1a06 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c178:	0101ffc4 	movi	r4,2047
  80c17c:	813f431e 	bne	r16,r4,80be8c <__alt_data_end+0xff80be8c>
  80c180:	003f1706 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c184:	80bff844 	addi	r2,r16,-31
  80c188:	00c00804 	movi	r3,32
  80c18c:	9884d83a 	srl	r2,r19,r2
  80c190:	28c05126 	beq	r5,r3,80c2d8 <__subdf3+0x584>
  80c194:	00c00fc4 	movi	r3,63
  80c198:	1c21c83a 	sub	r16,r3,r16
  80c19c:	9c26983a 	sll	r19,r19,r16
  80c1a0:	9c62b03a 	or	r17,r19,r17
  80c1a4:	8822c03a 	cmpne	r17,r17,zero
  80c1a8:	88a2b03a 	or	r17,r17,r2
  80c1ac:	000b883a 	mov	r5,zero
  80c1b0:	0021883a 	mov	r16,zero
  80c1b4:	003fb406 	br	80c088 <__alt_data_end+0xff80c088>
  80c1b8:	113ff804 	addi	r4,r2,-32
  80c1bc:	01c00804 	movi	r7,32
  80c1c0:	1908d83a 	srl	r4,r3,r4
  80c1c4:	11c04626 	beq	r2,r7,80c2e0 <__subdf3+0x58c>
  80c1c8:	01c01004 	movi	r7,64
  80c1cc:	3885c83a 	sub	r2,r7,r2
  80c1d0:	1884983a 	sll	r2,r3,r2
  80c1d4:	118cb03a 	or	r6,r2,r6
  80c1d8:	300cc03a 	cmpne	r6,r6,zero
  80c1dc:	310cb03a 	or	r6,r6,r4
  80c1e0:	0005883a 	mov	r2,zero
  80c1e4:	003f3606 	br	80bec0 <__alt_data_end+0xff80bec0>
  80c1e8:	80002b26 	beq	r16,zero,80c298 <__subdf3+0x544>
  80c1ec:	0101ffc4 	movi	r4,2047
  80c1f0:	51006926 	beq	r10,r4,80c398 <__subdf3+0x644>
  80c1f4:	0085c83a 	sub	r2,zero,r2
  80c1f8:	29402034 	orhi	r5,r5,128
  80c1fc:	01000e04 	movi	r4,56
  80c200:	20807d16 	blt	r4,r2,80c3f8 <__subdf3+0x6a4>
  80c204:	010007c4 	movi	r4,31
  80c208:	2080d916 	blt	r4,r2,80c570 <__subdf3+0x81c>
  80c20c:	01000804 	movi	r4,32
  80c210:	2089c83a 	sub	r4,r4,r2
  80c214:	2912983a 	sll	r9,r5,r4
  80c218:	8890d83a 	srl	r8,r17,r2
  80c21c:	8908983a 	sll	r4,r17,r4
  80c220:	2884d83a 	srl	r2,r5,r2
  80c224:	4a22b03a 	or	r17,r9,r8
  80c228:	2008c03a 	cmpne	r4,r4,zero
  80c22c:	8922b03a 	or	r17,r17,r4
  80c230:	3463c83a 	sub	r17,r6,r17
  80c234:	1885c83a 	sub	r2,r3,r2
  80c238:	344d803a 	cmpltu	r6,r6,r17
  80c23c:	118bc83a 	sub	r5,r2,r6
  80c240:	5021883a 	mov	r16,r10
  80c244:	3825883a 	mov	r18,r7
  80c248:	003f2206 	br	80bed4 <__alt_data_end+0xff80bed4>
  80c24c:	9886b03a 	or	r3,r19,r2
  80c250:	18001c1e 	bne	r3,zero,80c2c4 <__subdf3+0x570>
  80c254:	0011883a 	mov	r8,zero
  80c258:	000b883a 	mov	r5,zero
  80c25c:	0023883a 	mov	r17,zero
  80c260:	0021883a 	mov	r16,zero
  80c264:	003f3e06 	br	80bf60 <__alt_data_end+0xff80bf60>
  80c268:	010007c4 	movi	r4,31
  80c26c:	20803c16 	blt	r4,r2,80c360 <__subdf3+0x60c>
  80c270:	01000804 	movi	r4,32
  80c274:	2089c83a 	sub	r4,r4,r2
  80c278:	1912983a 	sll	r9,r3,r4
  80c27c:	308ed83a 	srl	r7,r6,r2
  80c280:	3108983a 	sll	r4,r6,r4
  80c284:	1884d83a 	srl	r2,r3,r2
  80c288:	49ceb03a 	or	r7,r9,r7
  80c28c:	2008c03a 	cmpne	r4,r4,zero
  80c290:	390eb03a 	or	r7,r7,r4
  80c294:	003f4706 	br	80bfb4 <__alt_data_end+0xff80bfb4>
  80c298:	2c48b03a 	or	r4,r5,r17
  80c29c:	20003e26 	beq	r4,zero,80c398 <__subdf3+0x644>
  80c2a0:	0084303a 	nor	r2,zero,r2
  80c2a4:	10003a1e 	bne	r2,zero,80c390 <__subdf3+0x63c>
  80c2a8:	3463c83a 	sub	r17,r6,r17
  80c2ac:	194bc83a 	sub	r5,r3,r5
  80c2b0:	344d803a 	cmpltu	r6,r6,r17
  80c2b4:	298bc83a 	sub	r5,r5,r6
  80c2b8:	5021883a 	mov	r16,r10
  80c2bc:	3825883a 	mov	r18,r7
  80c2c0:	003f0406 	br	80bed4 <__alt_data_end+0xff80bed4>
  80c2c4:	1023883a 	mov	r17,r2
  80c2c8:	003f0706 	br	80bee8 <__alt_data_end+0xff80bee8>
  80c2cc:	0101ffc4 	movi	r4,2047
  80c2d0:	813f331e 	bne	r16,r4,80bfa0 <__alt_data_end+0xff80bfa0>
  80c2d4:	003ec206 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c2d8:	0027883a 	mov	r19,zero
  80c2dc:	003fb006 	br	80c1a0 <__alt_data_end+0xff80c1a0>
  80c2e0:	0005883a 	mov	r2,zero
  80c2e4:	003fbb06 	br	80c1d4 <__alt_data_end+0xff80c1d4>
  80c2e8:	2c44b03a 	or	r2,r5,r17
  80c2ec:	80008b1e 	bne	r16,zero,80c51c <__subdf3+0x7c8>
  80c2f0:	1000b526 	beq	r2,zero,80c5c8 <__subdf3+0x874>
  80c2f4:	1984b03a 	or	r2,r3,r6
  80c2f8:	103eb926 	beq	r2,zero,80bde0 <__alt_data_end+0xff80bde0>
  80c2fc:	3449883a 	add	r4,r6,r17
  80c300:	2463803a 	cmpltu	r17,r4,r17
  80c304:	194b883a 	add	r5,r3,r5
  80c308:	2c4b883a 	add	r5,r5,r17
  80c30c:	2880202c 	andhi	r2,r5,128
  80c310:	2023883a 	mov	r17,r4
  80c314:	103f5c26 	beq	r2,zero,80c088 <__alt_data_end+0xff80c088>
  80c318:	00bfe034 	movhi	r2,65408
  80c31c:	10bfffc4 	addi	r2,r2,-1
  80c320:	4821883a 	mov	r16,r9
  80c324:	288a703a 	and	r5,r5,r2
  80c328:	003ead06 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c32c:	2c44b03a 	or	r2,r5,r17
  80c330:	8000291e 	bne	r16,zero,80c3d8 <__subdf3+0x684>
  80c334:	10004f1e 	bne	r2,zero,80c474 <__subdf3+0x720>
  80c338:	1984b03a 	or	r2,r3,r6
  80c33c:	10000426 	beq	r2,zero,80c350 <__subdf3+0x5fc>
  80c340:	180b883a 	mov	r5,r3
  80c344:	3023883a 	mov	r17,r6
  80c348:	3825883a 	mov	r18,r7
  80c34c:	003ea406 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c350:	0011883a 	mov	r8,zero
  80c354:	000b883a 	mov	r5,zero
  80c358:	0023883a 	mov	r17,zero
  80c35c:	003f0006 	br	80bf60 <__alt_data_end+0xff80bf60>
  80c360:	11fff804 	addi	r7,r2,-32
  80c364:	19c8d83a 	srl	r4,r3,r7
  80c368:	01c00804 	movi	r7,32
  80c36c:	11c07e26 	beq	r2,r7,80c568 <__subdf3+0x814>
  80c370:	01c01004 	movi	r7,64
  80c374:	3885c83a 	sub	r2,r7,r2
  80c378:	1884983a 	sll	r2,r3,r2
  80c37c:	118cb03a 	or	r6,r2,r6
  80c380:	300ec03a 	cmpne	r7,r6,zero
  80c384:	390eb03a 	or	r7,r7,r4
  80c388:	0005883a 	mov	r2,zero
  80c38c:	003f0906 	br	80bfb4 <__alt_data_end+0xff80bfb4>
  80c390:	0101ffc4 	movi	r4,2047
  80c394:	513f991e 	bne	r10,r4,80c1fc <__alt_data_end+0xff80c1fc>
  80c398:	180b883a 	mov	r5,r3
  80c39c:	3023883a 	mov	r17,r6
  80c3a0:	5021883a 	mov	r16,r10
  80c3a4:	3825883a 	mov	r18,r7
  80c3a8:	003e8d06 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c3ac:	80001a1e 	bne	r16,zero,80c418 <__subdf3+0x6c4>
  80c3b0:	2c48b03a 	or	r4,r5,r17
  80c3b4:	20005526 	beq	r4,zero,80c50c <__subdf3+0x7b8>
  80c3b8:	0084303a 	nor	r2,zero,r2
  80c3bc:	1000511e 	bne	r2,zero,80c504 <__subdf3+0x7b0>
  80c3c0:	89a3883a 	add	r17,r17,r6
  80c3c4:	194b883a 	add	r5,r3,r5
  80c3c8:	898d803a 	cmpltu	r6,r17,r6
  80c3cc:	298b883a 	add	r5,r5,r6
  80c3d0:	5021883a 	mov	r16,r10
  80c3d4:	003efc06 	br	80bfc8 <__alt_data_end+0xff80bfc8>
  80c3d8:	1000341e 	bne	r2,zero,80c4ac <__subdf3+0x758>
  80c3dc:	1984b03a 	or	r2,r3,r6
  80c3e0:	10006f26 	beq	r2,zero,80c5a0 <__subdf3+0x84c>
  80c3e4:	180b883a 	mov	r5,r3
  80c3e8:	3023883a 	mov	r17,r6
  80c3ec:	3825883a 	mov	r18,r7
  80c3f0:	0401ffc4 	movi	r16,2047
  80c3f4:	003e7a06 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c3f8:	2c62b03a 	or	r17,r5,r17
  80c3fc:	8822c03a 	cmpne	r17,r17,zero
  80c400:	0005883a 	mov	r2,zero
  80c404:	003f8a06 	br	80c230 <__alt_data_end+0xff80c230>
  80c408:	3821883a 	mov	r16,r7
  80c40c:	000b883a 	mov	r5,zero
  80c410:	0023883a 	mov	r17,zero
  80c414:	003ed206 	br	80bf60 <__alt_data_end+0xff80bf60>
  80c418:	0101ffc4 	movi	r4,2047
  80c41c:	51003b26 	beq	r10,r4,80c50c <__subdf3+0x7b8>
  80c420:	0085c83a 	sub	r2,zero,r2
  80c424:	29402034 	orhi	r5,r5,128
  80c428:	01000e04 	movi	r4,56
  80c42c:	20806216 	blt	r4,r2,80c5b8 <__subdf3+0x864>
  80c430:	010007c4 	movi	r4,31
  80c434:	20806b16 	blt	r4,r2,80c5e4 <__subdf3+0x890>
  80c438:	01000804 	movi	r4,32
  80c43c:	2089c83a 	sub	r4,r4,r2
  80c440:	2912983a 	sll	r9,r5,r4
  80c444:	888ed83a 	srl	r7,r17,r2
  80c448:	8908983a 	sll	r4,r17,r4
  80c44c:	2884d83a 	srl	r2,r5,r2
  80c450:	49e2b03a 	or	r17,r9,r7
  80c454:	2008c03a 	cmpne	r4,r4,zero
  80c458:	8922b03a 	or	r17,r17,r4
  80c45c:	89a3883a 	add	r17,r17,r6
  80c460:	10c5883a 	add	r2,r2,r3
  80c464:	898d803a 	cmpltu	r6,r17,r6
  80c468:	118b883a 	add	r5,r2,r6
  80c46c:	5021883a 	mov	r16,r10
  80c470:	003ed506 	br	80bfc8 <__alt_data_end+0xff80bfc8>
  80c474:	1984b03a 	or	r2,r3,r6
  80c478:	103e5926 	beq	r2,zero,80bde0 <__alt_data_end+0xff80bde0>
  80c47c:	8989c83a 	sub	r4,r17,r6
  80c480:	8911803a 	cmpltu	r8,r17,r4
  80c484:	28c5c83a 	sub	r2,r5,r3
  80c488:	1205c83a 	sub	r2,r2,r8
  80c48c:	1200202c 	andhi	r8,r2,128
  80c490:	403ef926 	beq	r8,zero,80c078 <__alt_data_end+0xff80c078>
  80c494:	3463c83a 	sub	r17,r6,r17
  80c498:	194bc83a 	sub	r5,r3,r5
  80c49c:	344d803a 	cmpltu	r6,r6,r17
  80c4a0:	298bc83a 	sub	r5,r5,r6
  80c4a4:	3825883a 	mov	r18,r7
  80c4a8:	003e4d06 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c4ac:	1984b03a 	or	r2,r3,r6
  80c4b0:	10002b26 	beq	r2,zero,80c560 <__subdf3+0x80c>
  80c4b4:	2808d0fa 	srli	r4,r5,3
  80c4b8:	8822d0fa 	srli	r17,r17,3
  80c4bc:	280a977a 	slli	r5,r5,29
  80c4c0:	2080022c 	andhi	r2,r4,8
  80c4c4:	2c62b03a 	or	r17,r5,r17
  80c4c8:	10000826 	beq	r2,zero,80c4ec <__subdf3+0x798>
  80c4cc:	1810d0fa 	srli	r8,r3,3
  80c4d0:	4080022c 	andhi	r2,r8,8
  80c4d4:	1000051e 	bne	r2,zero,80c4ec <__subdf3+0x798>
  80c4d8:	300cd0fa 	srli	r6,r6,3
  80c4dc:	1804977a 	slli	r2,r3,29
  80c4e0:	4009883a 	mov	r4,r8
  80c4e4:	3825883a 	mov	r18,r7
  80c4e8:	11a2b03a 	or	r17,r2,r6
  80c4ec:	880ad77a 	srli	r5,r17,29
  80c4f0:	200890fa 	slli	r4,r4,3
  80c4f4:	882290fa 	slli	r17,r17,3
  80c4f8:	0401ffc4 	movi	r16,2047
  80c4fc:	290ab03a 	or	r5,r5,r4
  80c500:	003e3706 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c504:	0101ffc4 	movi	r4,2047
  80c508:	513fc71e 	bne	r10,r4,80c428 <__alt_data_end+0xff80c428>
  80c50c:	180b883a 	mov	r5,r3
  80c510:	3023883a 	mov	r17,r6
  80c514:	5021883a 	mov	r16,r10
  80c518:	003e3106 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c51c:	10002d26 	beq	r2,zero,80c5d4 <__subdf3+0x880>
  80c520:	1984b03a 	or	r2,r3,r6
  80c524:	10000e26 	beq	r2,zero,80c560 <__subdf3+0x80c>
  80c528:	2808d0fa 	srli	r4,r5,3
  80c52c:	8822d0fa 	srli	r17,r17,3
  80c530:	280a977a 	slli	r5,r5,29
  80c534:	2080022c 	andhi	r2,r4,8
  80c538:	2c62b03a 	or	r17,r5,r17
  80c53c:	103feb26 	beq	r2,zero,80c4ec <__alt_data_end+0xff80c4ec>
  80c540:	180ed0fa 	srli	r7,r3,3
  80c544:	3880022c 	andhi	r2,r7,8
  80c548:	103fe81e 	bne	r2,zero,80c4ec <__alt_data_end+0xff80c4ec>
  80c54c:	300cd0fa 	srli	r6,r6,3
  80c550:	1804977a 	slli	r2,r3,29
  80c554:	3809883a 	mov	r4,r7
  80c558:	11a2b03a 	or	r17,r2,r6
  80c55c:	003fe306 	br	80c4ec <__alt_data_end+0xff80c4ec>
  80c560:	0401ffc4 	movi	r16,2047
  80c564:	003e1e06 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c568:	0005883a 	mov	r2,zero
  80c56c:	003f8306 	br	80c37c <__alt_data_end+0xff80c37c>
  80c570:	113ff804 	addi	r4,r2,-32
  80c574:	02000804 	movi	r8,32
  80c578:	2908d83a 	srl	r4,r5,r4
  80c57c:	12002526 	beq	r2,r8,80c614 <__subdf3+0x8c0>
  80c580:	02001004 	movi	r8,64
  80c584:	4085c83a 	sub	r2,r8,r2
  80c588:	288a983a 	sll	r5,r5,r2
  80c58c:	2c62b03a 	or	r17,r5,r17
  80c590:	8822c03a 	cmpne	r17,r17,zero
  80c594:	8922b03a 	or	r17,r17,r4
  80c598:	0005883a 	mov	r2,zero
  80c59c:	003f2406 	br	80c230 <__alt_data_end+0xff80c230>
  80c5a0:	01402034 	movhi	r5,128
  80c5a4:	0011883a 	mov	r8,zero
  80c5a8:	297fffc4 	addi	r5,r5,-1
  80c5ac:	047ffe04 	movi	r17,-8
  80c5b0:	0401ffc4 	movi	r16,2047
  80c5b4:	003e6a06 	br	80bf60 <__alt_data_end+0xff80bf60>
  80c5b8:	2c62b03a 	or	r17,r5,r17
  80c5bc:	8822c03a 	cmpne	r17,r17,zero
  80c5c0:	0005883a 	mov	r2,zero
  80c5c4:	003fa506 	br	80c45c <__alt_data_end+0xff80c45c>
  80c5c8:	180b883a 	mov	r5,r3
  80c5cc:	3023883a 	mov	r17,r6
  80c5d0:	003e0306 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c5d4:	180b883a 	mov	r5,r3
  80c5d8:	3023883a 	mov	r17,r6
  80c5dc:	0401ffc4 	movi	r16,2047
  80c5e0:	003dff06 	br	80bde0 <__alt_data_end+0xff80bde0>
  80c5e4:	113ff804 	addi	r4,r2,-32
  80c5e8:	01c00804 	movi	r7,32
  80c5ec:	2908d83a 	srl	r4,r5,r4
  80c5f0:	11c00a26 	beq	r2,r7,80c61c <__subdf3+0x8c8>
  80c5f4:	01c01004 	movi	r7,64
  80c5f8:	3885c83a 	sub	r2,r7,r2
  80c5fc:	288a983a 	sll	r5,r5,r2
  80c600:	2c62b03a 	or	r17,r5,r17
  80c604:	8822c03a 	cmpne	r17,r17,zero
  80c608:	8922b03a 	or	r17,r17,r4
  80c60c:	0005883a 	mov	r2,zero
  80c610:	003f9206 	br	80c45c <__alt_data_end+0xff80c45c>
  80c614:	000b883a 	mov	r5,zero
  80c618:	003fdc06 	br	80c58c <__alt_data_end+0xff80c58c>
  80c61c:	000b883a 	mov	r5,zero
  80c620:	003ff706 	br	80c600 <__alt_data_end+0xff80c600>

0080c624 <__fixdfsi>:
  80c624:	2806d53a 	srli	r3,r5,20
  80c628:	00800434 	movhi	r2,16
  80c62c:	10bfffc4 	addi	r2,r2,-1
  80c630:	18c1ffcc 	andi	r3,r3,2047
  80c634:	0180ff84 	movi	r6,1022
  80c638:	2884703a 	and	r2,r5,r2
  80c63c:	280ad7fa 	srli	r5,r5,31
  80c640:	30c0130e 	bge	r6,r3,80c690 <__fixdfsi+0x6c>
  80c644:	01810744 	movi	r6,1053
  80c648:	30c00d16 	blt	r6,r3,80c680 <__fixdfsi+0x5c>
  80c64c:	01810cc4 	movi	r6,1075
  80c650:	30cdc83a 	sub	r6,r6,r3
  80c654:	01c007c4 	movi	r7,31
  80c658:	10800434 	orhi	r2,r2,16
  80c65c:	39800e0e 	bge	r7,r6,80c698 <__fixdfsi+0x74>
  80c660:	010104c4 	movi	r4,1043
  80c664:	20c7c83a 	sub	r3,r4,r3
  80c668:	10c6d83a 	srl	r3,r2,r3
  80c66c:	29403fcc 	andi	r5,r5,255
  80c670:	0145c83a 	sub	r2,zero,r5
  80c674:	1884f03a 	xor	r2,r3,r2
  80c678:	1145883a 	add	r2,r2,r5
  80c67c:	f800283a 	ret
  80c680:	00a00034 	movhi	r2,32768
  80c684:	10bfffc4 	addi	r2,r2,-1
  80c688:	2885883a 	add	r2,r5,r2
  80c68c:	f800283a 	ret
  80c690:	0005883a 	mov	r2,zero
  80c694:	f800283a 	ret
  80c698:	18fefb44 	addi	r3,r3,-1043
  80c69c:	2188d83a 	srl	r4,r4,r6
  80c6a0:	10c6983a 	sll	r3,r2,r3
  80c6a4:	20c6b03a 	or	r3,r4,r3
  80c6a8:	003ff006 	br	80c66c <__alt_data_end+0xff80c66c>

0080c6ac <__floatsidf>:
  80c6ac:	defffd04 	addi	sp,sp,-12
  80c6b0:	dc400115 	stw	r17,4(sp)
  80c6b4:	dfc00215 	stw	ra,8(sp)
  80c6b8:	dc000015 	stw	r16,0(sp)
  80c6bc:	2023883a 	mov	r17,r4
  80c6c0:	20001426 	beq	r4,zero,80c714 <__floatsidf+0x68>
  80c6c4:	2020d7fa 	srli	r16,r4,31
  80c6c8:	80000126 	beq	r16,zero,80c6d0 <__floatsidf+0x24>
  80c6cc:	0123c83a 	sub	r17,zero,r4
  80c6d0:	8809883a 	mov	r4,r17
  80c6d4:	080c8200 	call	80c820 <__clzsi2>
  80c6d8:	01410784 	movi	r5,1054
  80c6dc:	00c00284 	movi	r3,10
  80c6e0:	288bc83a 	sub	r5,r5,r2
  80c6e4:	18801c16 	blt	r3,r2,80c758 <__floatsidf+0xac>
  80c6e8:	00c002c4 	movi	r3,11
  80c6ec:	1887c83a 	sub	r3,r3,r2
  80c6f0:	88c8d83a 	srl	r4,r17,r3
  80c6f4:	00c00434 	movhi	r3,16
  80c6f8:	18ffffc4 	addi	r3,r3,-1
  80c6fc:	10800544 	addi	r2,r2,21
  80c700:	20c8703a 	and	r4,r4,r3
  80c704:	8884983a 	sll	r2,r17,r2
  80c708:	28c1ffcc 	andi	r3,r5,2047
  80c70c:	800d883a 	mov	r6,r16
  80c710:	00000406 	br	80c724 <__floatsidf+0x78>
  80c714:	000d883a 	mov	r6,zero
  80c718:	0007883a 	mov	r3,zero
  80c71c:	0009883a 	mov	r4,zero
  80c720:	0005883a 	mov	r2,zero
  80c724:	180a953a 	slli	r5,r3,20
  80c728:	31803fcc 	andi	r6,r6,255
  80c72c:	00c00434 	movhi	r3,16
  80c730:	300c97fa 	slli	r6,r6,31
  80c734:	18ffffc4 	addi	r3,r3,-1
  80c738:	20c6703a 	and	r3,r4,r3
  80c73c:	1946b03a 	or	r3,r3,r5
  80c740:	1986b03a 	or	r3,r3,r6
  80c744:	dfc00217 	ldw	ra,8(sp)
  80c748:	dc400117 	ldw	r17,4(sp)
  80c74c:	dc000017 	ldw	r16,0(sp)
  80c750:	dec00304 	addi	sp,sp,12
  80c754:	f800283a 	ret
  80c758:	10fffd44 	addi	r3,r2,-11
  80c75c:	88c8983a 	sll	r4,r17,r3
  80c760:	00800434 	movhi	r2,16
  80c764:	10bfffc4 	addi	r2,r2,-1
  80c768:	2088703a 	and	r4,r4,r2
  80c76c:	28c1ffcc 	andi	r3,r5,2047
  80c770:	800d883a 	mov	r6,r16
  80c774:	0005883a 	mov	r2,zero
  80c778:	003fea06 	br	80c724 <__alt_data_end+0xff80c724>

0080c77c <__floatunsidf>:
  80c77c:	defffe04 	addi	sp,sp,-8
  80c780:	dc000015 	stw	r16,0(sp)
  80c784:	dfc00115 	stw	ra,4(sp)
  80c788:	2021883a 	mov	r16,r4
  80c78c:	20001026 	beq	r4,zero,80c7d0 <__floatunsidf+0x54>
  80c790:	080c8200 	call	80c820 <__clzsi2>
  80c794:	01410784 	movi	r5,1054
  80c798:	100d883a 	mov	r6,r2
  80c79c:	288bc83a 	sub	r5,r5,r2
  80c7a0:	00800284 	movi	r2,10
  80c7a4:	11801616 	blt	r2,r6,80c800 <__floatunsidf+0x84>
  80c7a8:	008002c4 	movi	r2,11
  80c7ac:	1185c83a 	sub	r2,r2,r6
  80c7b0:	8084d83a 	srl	r2,r16,r2
  80c7b4:	00c00434 	movhi	r3,16
  80c7b8:	31c00544 	addi	r7,r6,21
  80c7bc:	18ffffc4 	addi	r3,r3,-1
  80c7c0:	81e0983a 	sll	r16,r16,r7
  80c7c4:	10cc703a 	and	r6,r2,r3
  80c7c8:	2941ffcc 	andi	r5,r5,2047
  80c7cc:	00000206 	br	80c7d8 <__floatunsidf+0x5c>
  80c7d0:	000b883a 	mov	r5,zero
  80c7d4:	000d883a 	mov	r6,zero
  80c7d8:	280a953a 	slli	r5,r5,20
  80c7dc:	00c00434 	movhi	r3,16
  80c7e0:	18ffffc4 	addi	r3,r3,-1
  80c7e4:	30c6703a 	and	r3,r6,r3
  80c7e8:	8005883a 	mov	r2,r16
  80c7ec:	1946b03a 	or	r3,r3,r5
  80c7f0:	dfc00117 	ldw	ra,4(sp)
  80c7f4:	dc000017 	ldw	r16,0(sp)
  80c7f8:	dec00204 	addi	sp,sp,8
  80c7fc:	f800283a 	ret
  80c800:	31bffd44 	addi	r6,r6,-11
  80c804:	818c983a 	sll	r6,r16,r6
  80c808:	00800434 	movhi	r2,16
  80c80c:	10bfffc4 	addi	r2,r2,-1
  80c810:	2941ffcc 	andi	r5,r5,2047
  80c814:	0021883a 	mov	r16,zero
  80c818:	308c703a 	and	r6,r6,r2
  80c81c:	003fee06 	br	80c7d8 <__alt_data_end+0xff80c7d8>

0080c820 <__clzsi2>:
  80c820:	00bfffd4 	movui	r2,65535
  80c824:	11000b36 	bltu	r2,r4,80c854 <__clzsi2+0x34>
  80c828:	00803fc4 	movi	r2,255
  80c82c:	1100122e 	bgeu	r2,r4,80c878 <__clzsi2+0x58>
  80c830:	00c00204 	movi	r3,8
  80c834:	01400604 	movi	r5,24
  80c838:	20c8d83a 	srl	r4,r4,r3
  80c83c:	00802074 	movhi	r2,129
  80c840:	1082e004 	addi	r2,r2,2944
  80c844:	1109883a 	add	r4,r2,r4
  80c848:	20800003 	ldbu	r2,0(r4)
  80c84c:	2885c83a 	sub	r2,r5,r2
  80c850:	f800283a 	ret
  80c854:	00804034 	movhi	r2,256
  80c858:	10bfffc4 	addi	r2,r2,-1
  80c85c:	11000336 	bltu	r2,r4,80c86c <__clzsi2+0x4c>
  80c860:	00c00404 	movi	r3,16
  80c864:	180b883a 	mov	r5,r3
  80c868:	003ff306 	br	80c838 <__alt_data_end+0xff80c838>
  80c86c:	00c00604 	movi	r3,24
  80c870:	01400204 	movi	r5,8
  80c874:	003ff006 	br	80c838 <__alt_data_end+0xff80c838>
  80c878:	0007883a 	mov	r3,zero
  80c87c:	01400804 	movi	r5,32
  80c880:	003fed06 	br	80c838 <__alt_data_end+0xff80c838>

0080c884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c884:	defffe04 	addi	sp,sp,-8
  80c888:	dfc00115 	stw	ra,4(sp)
  80c88c:	df000015 	stw	fp,0(sp)
  80c890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c894:	00802074 	movhi	r2,129
  80c898:	108b2604 	addi	r2,r2,11416
  80c89c:	10800017 	ldw	r2,0(r2)
  80c8a0:	10000526 	beq	r2,zero,80c8b8 <alt_get_errno+0x34>
  80c8a4:	00802074 	movhi	r2,129
  80c8a8:	108b2604 	addi	r2,r2,11416
  80c8ac:	10800017 	ldw	r2,0(r2)
  80c8b0:	103ee83a 	callr	r2
  80c8b4:	00000206 	br	80c8c0 <alt_get_errno+0x3c>
  80c8b8:	00802074 	movhi	r2,129
  80c8bc:	10928204 	addi	r2,r2,18952
}
  80c8c0:	e037883a 	mov	sp,fp
  80c8c4:	dfc00117 	ldw	ra,4(sp)
  80c8c8:	df000017 	ldw	fp,0(sp)
  80c8cc:	dec00204 	addi	sp,sp,8
  80c8d0:	f800283a 	ret

0080c8d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c8d4:	defffb04 	addi	sp,sp,-20
  80c8d8:	dfc00415 	stw	ra,16(sp)
  80c8dc:	df000315 	stw	fp,12(sp)
  80c8e0:	df000304 	addi	fp,sp,12
  80c8e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c8e8:	e0bfff17 	ldw	r2,-4(fp)
  80c8ec:	10000616 	blt	r2,zero,80c908 <close+0x34>
  80c8f0:	e0bfff17 	ldw	r2,-4(fp)
  80c8f4:	10c00324 	muli	r3,r2,12
  80c8f8:	00802074 	movhi	r2,129
  80c8fc:	10861204 	addi	r2,r2,6216
  80c900:	1885883a 	add	r2,r3,r2
  80c904:	00000106 	br	80c90c <close+0x38>
  80c908:	0005883a 	mov	r2,zero
  80c90c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80c910:	e0bffd17 	ldw	r2,-12(fp)
  80c914:	10001926 	beq	r2,zero,80c97c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c918:	e0bffd17 	ldw	r2,-12(fp)
  80c91c:	10800017 	ldw	r2,0(r2)
  80c920:	10800417 	ldw	r2,16(r2)
  80c924:	10000626 	beq	r2,zero,80c940 <close+0x6c>
  80c928:	e0bffd17 	ldw	r2,-12(fp)
  80c92c:	10800017 	ldw	r2,0(r2)
  80c930:	10800417 	ldw	r2,16(r2)
  80c934:	e13ffd17 	ldw	r4,-12(fp)
  80c938:	103ee83a 	callr	r2
  80c93c:	00000106 	br	80c944 <close+0x70>
  80c940:	0005883a 	mov	r2,zero
  80c944:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c948:	e13fff17 	ldw	r4,-4(fp)
  80c94c:	080cfd00 	call	80cfd0 <alt_release_fd>
    if (rval < 0)
  80c950:	e0bffe17 	ldw	r2,-8(fp)
  80c954:	1000070e 	bge	r2,zero,80c974 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80c958:	080c8840 	call	80c884 <alt_get_errno>
  80c95c:	1007883a 	mov	r3,r2
  80c960:	e0bffe17 	ldw	r2,-8(fp)
  80c964:	0085c83a 	sub	r2,zero,r2
  80c968:	18800015 	stw	r2,0(r3)
      return -1;
  80c96c:	00bfffc4 	movi	r2,-1
  80c970:	00000706 	br	80c990 <close+0xbc>
    }
    return 0;
  80c974:	0005883a 	mov	r2,zero
  80c978:	00000506 	br	80c990 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c97c:	080c8840 	call	80c884 <alt_get_errno>
  80c980:	1007883a 	mov	r3,r2
  80c984:	00801444 	movi	r2,81
  80c988:	18800015 	stw	r2,0(r3)
    return -1;
  80c98c:	00bfffc4 	movi	r2,-1
  }
}
  80c990:	e037883a 	mov	sp,fp
  80c994:	dfc00117 	ldw	ra,4(sp)
  80c998:	df000017 	ldw	fp,0(sp)
  80c99c:	dec00204 	addi	sp,sp,8
  80c9a0:	f800283a 	ret

0080c9a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c9a4:	defffc04 	addi	sp,sp,-16
  80c9a8:	df000315 	stw	fp,12(sp)
  80c9ac:	df000304 	addi	fp,sp,12
  80c9b0:	e13ffd15 	stw	r4,-12(fp)
  80c9b4:	e17ffe15 	stw	r5,-8(fp)
  80c9b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c9bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80c9c0:	e037883a 	mov	sp,fp
  80c9c4:	df000017 	ldw	fp,0(sp)
  80c9c8:	dec00104 	addi	sp,sp,4
  80c9cc:	f800283a 	ret

0080c9d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c9d0:	defffe04 	addi	sp,sp,-8
  80c9d4:	dfc00115 	stw	ra,4(sp)
  80c9d8:	df000015 	stw	fp,0(sp)
  80c9dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c9e0:	00802074 	movhi	r2,129
  80c9e4:	108b2604 	addi	r2,r2,11416
  80c9e8:	10800017 	ldw	r2,0(r2)
  80c9ec:	10000526 	beq	r2,zero,80ca04 <alt_get_errno+0x34>
  80c9f0:	00802074 	movhi	r2,129
  80c9f4:	108b2604 	addi	r2,r2,11416
  80c9f8:	10800017 	ldw	r2,0(r2)
  80c9fc:	103ee83a 	callr	r2
  80ca00:	00000206 	br	80ca0c <alt_get_errno+0x3c>
  80ca04:	00802074 	movhi	r2,129
  80ca08:	10928204 	addi	r2,r2,18952
}
  80ca0c:	e037883a 	mov	sp,fp
  80ca10:	dfc00117 	ldw	ra,4(sp)
  80ca14:	df000017 	ldw	fp,0(sp)
  80ca18:	dec00204 	addi	sp,sp,8
  80ca1c:	f800283a 	ret

0080ca20 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ca20:	defffb04 	addi	sp,sp,-20
  80ca24:	dfc00415 	stw	ra,16(sp)
  80ca28:	df000315 	stw	fp,12(sp)
  80ca2c:	df000304 	addi	fp,sp,12
  80ca30:	e13ffe15 	stw	r4,-8(fp)
  80ca34:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ca38:	e0bffe17 	ldw	r2,-8(fp)
  80ca3c:	10000616 	blt	r2,zero,80ca58 <fstat+0x38>
  80ca40:	e0bffe17 	ldw	r2,-8(fp)
  80ca44:	10c00324 	muli	r3,r2,12
  80ca48:	00802074 	movhi	r2,129
  80ca4c:	10861204 	addi	r2,r2,6216
  80ca50:	1885883a 	add	r2,r3,r2
  80ca54:	00000106 	br	80ca5c <fstat+0x3c>
  80ca58:	0005883a 	mov	r2,zero
  80ca5c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80ca60:	e0bffd17 	ldw	r2,-12(fp)
  80ca64:	10001026 	beq	r2,zero,80caa8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ca68:	e0bffd17 	ldw	r2,-12(fp)
  80ca6c:	10800017 	ldw	r2,0(r2)
  80ca70:	10800817 	ldw	r2,32(r2)
  80ca74:	10000726 	beq	r2,zero,80ca94 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80ca78:	e0bffd17 	ldw	r2,-12(fp)
  80ca7c:	10800017 	ldw	r2,0(r2)
  80ca80:	10800817 	ldw	r2,32(r2)
  80ca84:	e13ffd17 	ldw	r4,-12(fp)
  80ca88:	e17fff17 	ldw	r5,-4(fp)
  80ca8c:	103ee83a 	callr	r2
  80ca90:	00000a06 	br	80cabc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ca94:	e0bfff17 	ldw	r2,-4(fp)
  80ca98:	00c80004 	movi	r3,8192
  80ca9c:	10c00115 	stw	r3,4(r2)
      return 0;
  80caa0:	0005883a 	mov	r2,zero
  80caa4:	00000506 	br	80cabc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80caa8:	080c9d00 	call	80c9d0 <alt_get_errno>
  80caac:	1007883a 	mov	r3,r2
  80cab0:	00801444 	movi	r2,81
  80cab4:	18800015 	stw	r2,0(r3)
    return -1;
  80cab8:	00bfffc4 	movi	r2,-1
  }
}
  80cabc:	e037883a 	mov	sp,fp
  80cac0:	dfc00117 	ldw	ra,4(sp)
  80cac4:	df000017 	ldw	fp,0(sp)
  80cac8:	dec00204 	addi	sp,sp,8
  80cacc:	f800283a 	ret

0080cad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cad0:	defffe04 	addi	sp,sp,-8
  80cad4:	dfc00115 	stw	ra,4(sp)
  80cad8:	df000015 	stw	fp,0(sp)
  80cadc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cae0:	00802074 	movhi	r2,129
  80cae4:	108b2604 	addi	r2,r2,11416
  80cae8:	10800017 	ldw	r2,0(r2)
  80caec:	10000526 	beq	r2,zero,80cb04 <alt_get_errno+0x34>
  80caf0:	00802074 	movhi	r2,129
  80caf4:	108b2604 	addi	r2,r2,11416
  80caf8:	10800017 	ldw	r2,0(r2)
  80cafc:	103ee83a 	callr	r2
  80cb00:	00000206 	br	80cb0c <alt_get_errno+0x3c>
  80cb04:	00802074 	movhi	r2,129
  80cb08:	10928204 	addi	r2,r2,18952
}
  80cb0c:	e037883a 	mov	sp,fp
  80cb10:	dfc00117 	ldw	ra,4(sp)
  80cb14:	df000017 	ldw	fp,0(sp)
  80cb18:	dec00204 	addi	sp,sp,8
  80cb1c:	f800283a 	ret

0080cb20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80cb20:	deffed04 	addi	sp,sp,-76
  80cb24:	dfc01215 	stw	ra,72(sp)
  80cb28:	df001115 	stw	fp,68(sp)
  80cb2c:	df001104 	addi	fp,sp,68
  80cb30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cb34:	e0bfff17 	ldw	r2,-4(fp)
  80cb38:	10000616 	blt	r2,zero,80cb54 <isatty+0x34>
  80cb3c:	e0bfff17 	ldw	r2,-4(fp)
  80cb40:	10c00324 	muli	r3,r2,12
  80cb44:	00802074 	movhi	r2,129
  80cb48:	10861204 	addi	r2,r2,6216
  80cb4c:	1885883a 	add	r2,r3,r2
  80cb50:	00000106 	br	80cb58 <isatty+0x38>
  80cb54:	0005883a 	mov	r2,zero
  80cb58:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80cb5c:	e0bfef17 	ldw	r2,-68(fp)
  80cb60:	10000e26 	beq	r2,zero,80cb9c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80cb64:	e0bfef17 	ldw	r2,-68(fp)
  80cb68:	10800017 	ldw	r2,0(r2)
  80cb6c:	10800817 	ldw	r2,32(r2)
  80cb70:	1000021e 	bne	r2,zero,80cb7c <isatty+0x5c>
    {
      return 1;
  80cb74:	00800044 	movi	r2,1
  80cb78:	00000d06 	br	80cbb0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80cb7c:	e0bff004 	addi	r2,fp,-64
  80cb80:	e13fff17 	ldw	r4,-4(fp)
  80cb84:	100b883a 	mov	r5,r2
  80cb88:	080ca200 	call	80ca20 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80cb8c:	e0bff117 	ldw	r2,-60(fp)
  80cb90:	10880020 	cmpeqi	r2,r2,8192
  80cb94:	10803fcc 	andi	r2,r2,255
  80cb98:	00000506 	br	80cbb0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cb9c:	080cad00 	call	80cad0 <alt_get_errno>
  80cba0:	1007883a 	mov	r3,r2
  80cba4:	00801444 	movi	r2,81
  80cba8:	18800015 	stw	r2,0(r3)
    return 0;
  80cbac:	0005883a 	mov	r2,zero
  }
}
  80cbb0:	e037883a 	mov	sp,fp
  80cbb4:	dfc00117 	ldw	ra,4(sp)
  80cbb8:	df000017 	ldw	fp,0(sp)
  80cbbc:	dec00204 	addi	sp,sp,8
  80cbc0:	f800283a 	ret

0080cbc4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80cbc4:	defffc04 	addi	sp,sp,-16
  80cbc8:	df000315 	stw	fp,12(sp)
  80cbcc:	df000304 	addi	fp,sp,12
  80cbd0:	e13ffd15 	stw	r4,-12(fp)
  80cbd4:	e17ffe15 	stw	r5,-8(fp)
  80cbd8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80cbdc:	e0fffe17 	ldw	r3,-8(fp)
  80cbe0:	e0bffd17 	ldw	r2,-12(fp)
  80cbe4:	18800c26 	beq	r3,r2,80cc18 <alt_load_section+0x54>
  {
    while( to != end )
  80cbe8:	00000806 	br	80cc0c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80cbec:	e0bffe17 	ldw	r2,-8(fp)
  80cbf0:	10c00104 	addi	r3,r2,4
  80cbf4:	e0fffe15 	stw	r3,-8(fp)
  80cbf8:	e0fffd17 	ldw	r3,-12(fp)
  80cbfc:	19000104 	addi	r4,r3,4
  80cc00:	e13ffd15 	stw	r4,-12(fp)
  80cc04:	18c00017 	ldw	r3,0(r3)
  80cc08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80cc0c:	e0fffe17 	ldw	r3,-8(fp)
  80cc10:	e0bfff17 	ldw	r2,-4(fp)
  80cc14:	18bff51e 	bne	r3,r2,80cbec <__alt_data_end+0xff80cbec>
    {
      *to++ = *from++;
    }
  }
}
  80cc18:	e037883a 	mov	sp,fp
  80cc1c:	df000017 	ldw	fp,0(sp)
  80cc20:	dec00104 	addi	sp,sp,4
  80cc24:	f800283a 	ret

0080cc28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80cc28:	defffe04 	addi	sp,sp,-8
  80cc2c:	dfc00115 	stw	ra,4(sp)
  80cc30:	df000015 	stw	fp,0(sp)
  80cc34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80cc38:	01002074 	movhi	r4,129
  80cc3c:	210b2d04 	addi	r4,r4,11444
  80cc40:	01402074 	movhi	r5,129
  80cc44:	2943df04 	addi	r5,r5,3964
  80cc48:	01802074 	movhi	r6,129
  80cc4c:	318b2d04 	addi	r6,r6,11444
  80cc50:	080cbc40 	call	80cbc4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80cc54:	01002034 	movhi	r4,128
  80cc58:	21000804 	addi	r4,r4,32
  80cc5c:	01402034 	movhi	r5,128
  80cc60:	29400804 	addi	r5,r5,32
  80cc64:	01802034 	movhi	r6,128
  80cc68:	31809104 	addi	r6,r6,580
  80cc6c:	080cbc40 	call	80cbc4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80cc70:	01002074 	movhi	r4,129
  80cc74:	21025804 	addi	r4,r4,2400
  80cc78:	01402074 	movhi	r5,129
  80cc7c:	29425804 	addi	r5,r5,2400
  80cc80:	01802074 	movhi	r6,129
  80cc84:	3183df04 	addi	r6,r6,3964
  80cc88:	080cbc40 	call	80cbc4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80cc8c:	080f77c0 	call	80f77c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80cc90:	080f96c0 	call	80f96c <alt_icache_flush_all>
}
  80cc94:	e037883a 	mov	sp,fp
  80cc98:	dfc00117 	ldw	ra,4(sp)
  80cc9c:	df000017 	ldw	fp,0(sp)
  80cca0:	dec00204 	addi	sp,sp,8
  80cca4:	f800283a 	ret

0080cca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cca8:	defffe04 	addi	sp,sp,-8
  80ccac:	dfc00115 	stw	ra,4(sp)
  80ccb0:	df000015 	stw	fp,0(sp)
  80ccb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ccb8:	00802074 	movhi	r2,129
  80ccbc:	108b2604 	addi	r2,r2,11416
  80ccc0:	10800017 	ldw	r2,0(r2)
  80ccc4:	10000526 	beq	r2,zero,80ccdc <alt_get_errno+0x34>
  80ccc8:	00802074 	movhi	r2,129
  80cccc:	108b2604 	addi	r2,r2,11416
  80ccd0:	10800017 	ldw	r2,0(r2)
  80ccd4:	103ee83a 	callr	r2
  80ccd8:	00000206 	br	80cce4 <alt_get_errno+0x3c>
  80ccdc:	00802074 	movhi	r2,129
  80cce0:	10928204 	addi	r2,r2,18952
}
  80cce4:	e037883a 	mov	sp,fp
  80cce8:	dfc00117 	ldw	ra,4(sp)
  80ccec:	df000017 	ldw	fp,0(sp)
  80ccf0:	dec00204 	addi	sp,sp,8
  80ccf4:	f800283a 	ret

0080ccf8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80ccf8:	defff904 	addi	sp,sp,-28
  80ccfc:	dfc00615 	stw	ra,24(sp)
  80cd00:	df000515 	stw	fp,20(sp)
  80cd04:	df000504 	addi	fp,sp,20
  80cd08:	e13ffd15 	stw	r4,-12(fp)
  80cd0c:	e17ffe15 	stw	r5,-8(fp)
  80cd10:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80cd14:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cd18:	e0bffd17 	ldw	r2,-12(fp)
  80cd1c:	10000616 	blt	r2,zero,80cd38 <lseek+0x40>
  80cd20:	e0bffd17 	ldw	r2,-12(fp)
  80cd24:	10c00324 	muli	r3,r2,12
  80cd28:	00802074 	movhi	r2,129
  80cd2c:	10861204 	addi	r2,r2,6216
  80cd30:	1885883a 	add	r2,r3,r2
  80cd34:	00000106 	br	80cd3c <lseek+0x44>
  80cd38:	0005883a 	mov	r2,zero
  80cd3c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80cd40:	e0bffc17 	ldw	r2,-16(fp)
  80cd44:	10001026 	beq	r2,zero,80cd88 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80cd48:	e0bffc17 	ldw	r2,-16(fp)
  80cd4c:	10800017 	ldw	r2,0(r2)
  80cd50:	10800717 	ldw	r2,28(r2)
  80cd54:	10000926 	beq	r2,zero,80cd7c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80cd58:	e0bffc17 	ldw	r2,-16(fp)
  80cd5c:	10800017 	ldw	r2,0(r2)
  80cd60:	10800717 	ldw	r2,28(r2)
  80cd64:	e13ffc17 	ldw	r4,-16(fp)
  80cd68:	e17ffe17 	ldw	r5,-8(fp)
  80cd6c:	e1bfff17 	ldw	r6,-4(fp)
  80cd70:	103ee83a 	callr	r2
  80cd74:	e0bffb15 	stw	r2,-20(fp)
  80cd78:	00000506 	br	80cd90 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80cd7c:	00bfde84 	movi	r2,-134
  80cd80:	e0bffb15 	stw	r2,-20(fp)
  80cd84:	00000206 	br	80cd90 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80cd88:	00bfebc4 	movi	r2,-81
  80cd8c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80cd90:	e0bffb17 	ldw	r2,-20(fp)
  80cd94:	1000070e 	bge	r2,zero,80cdb4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80cd98:	080cca80 	call	80cca8 <alt_get_errno>
  80cd9c:	1007883a 	mov	r3,r2
  80cda0:	e0bffb17 	ldw	r2,-20(fp)
  80cda4:	0085c83a 	sub	r2,zero,r2
  80cda8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80cdac:	00bfffc4 	movi	r2,-1
  80cdb0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80cdb4:	e0bffb17 	ldw	r2,-20(fp)
}
  80cdb8:	e037883a 	mov	sp,fp
  80cdbc:	dfc00117 	ldw	ra,4(sp)
  80cdc0:	df000017 	ldw	fp,0(sp)
  80cdc4:	dec00204 	addi	sp,sp,8
  80cdc8:	f800283a 	ret

0080cdcc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80cdcc:	defffd04 	addi	sp,sp,-12
  80cdd0:	dfc00215 	stw	ra,8(sp)
  80cdd4:	df000115 	stw	fp,4(sp)
  80cdd8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80cddc:	0009883a 	mov	r4,zero
  80cde0:	080d2600 	call	80d260 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80cde4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80cde8:	080d2940 	call	80d294 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80cdec:	01002074 	movhi	r4,129
  80cdf0:	21032304 	addi	r4,r4,3212
  80cdf4:	01402074 	movhi	r5,129
  80cdf8:	29432304 	addi	r5,r5,3212
  80cdfc:	01802074 	movhi	r6,129
  80ce00:	31832304 	addi	r6,r6,3212
  80ce04:	080fa5c0 	call	80fa5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ce08:	080f8b40 	call	80f8b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ce0c:	01002074 	movhi	r4,129
  80ce10:	213e4404 	addi	r4,r4,-1776
  80ce14:	08105bc0 	call	8105bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ce18:	d1276817 	ldw	r4,-25184(gp)
  80ce1c:	d0e76917 	ldw	r3,-25180(gp)
  80ce20:	d0a76a17 	ldw	r2,-25176(gp)
  80ce24:	180b883a 	mov	r5,r3
  80ce28:	100d883a 	mov	r6,r2
  80ce2c:	080034c0 	call	80034c <main>
  80ce30:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80ce34:	01000044 	movi	r4,1
  80ce38:	080c8d40 	call	80c8d4 <close>
  exit (result);
  80ce3c:	e13fff17 	ldw	r4,-4(fp)
  80ce40:	08105d00 	call	8105d0 <exit>

0080ce44 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80ce44:	defffe04 	addi	sp,sp,-8
  80ce48:	df000115 	stw	fp,4(sp)
  80ce4c:	df000104 	addi	fp,sp,4
  80ce50:	e13fff15 	stw	r4,-4(fp)
}
  80ce54:	e037883a 	mov	sp,fp
  80ce58:	df000017 	ldw	fp,0(sp)
  80ce5c:	dec00104 	addi	sp,sp,4
  80ce60:	f800283a 	ret

0080ce64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80ce64:	defffe04 	addi	sp,sp,-8
  80ce68:	df000115 	stw	fp,4(sp)
  80ce6c:	df000104 	addi	fp,sp,4
  80ce70:	e13fff15 	stw	r4,-4(fp)
}
  80ce74:	e037883a 	mov	sp,fp
  80ce78:	df000017 	ldw	fp,0(sp)
  80ce7c:	dec00104 	addi	sp,sp,4
  80ce80:	f800283a 	ret

0080ce84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ce84:	defffe04 	addi	sp,sp,-8
  80ce88:	dfc00115 	stw	ra,4(sp)
  80ce8c:	df000015 	stw	fp,0(sp)
  80ce90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ce94:	00802074 	movhi	r2,129
  80ce98:	108b2604 	addi	r2,r2,11416
  80ce9c:	10800017 	ldw	r2,0(r2)
  80cea0:	10000526 	beq	r2,zero,80ceb8 <alt_get_errno+0x34>
  80cea4:	00802074 	movhi	r2,129
  80cea8:	108b2604 	addi	r2,r2,11416
  80ceac:	10800017 	ldw	r2,0(r2)
  80ceb0:	103ee83a 	callr	r2
  80ceb4:	00000206 	br	80cec0 <alt_get_errno+0x3c>
  80ceb8:	00802074 	movhi	r2,129
  80cebc:	10928204 	addi	r2,r2,18952
}
  80cec0:	e037883a 	mov	sp,fp
  80cec4:	dfc00117 	ldw	ra,4(sp)
  80cec8:	df000017 	ldw	fp,0(sp)
  80cecc:	dec00204 	addi	sp,sp,8
  80ced0:	f800283a 	ret

0080ced4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ced4:	defff904 	addi	sp,sp,-28
  80ced8:	dfc00615 	stw	ra,24(sp)
  80cedc:	df000515 	stw	fp,20(sp)
  80cee0:	df000504 	addi	fp,sp,20
  80cee4:	e13ffd15 	stw	r4,-12(fp)
  80cee8:	e17ffe15 	stw	r5,-8(fp)
  80ceec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cef0:	e0bffd17 	ldw	r2,-12(fp)
  80cef4:	10000616 	blt	r2,zero,80cf10 <read+0x3c>
  80cef8:	e0bffd17 	ldw	r2,-12(fp)
  80cefc:	10c00324 	muli	r3,r2,12
  80cf00:	00802074 	movhi	r2,129
  80cf04:	10861204 	addi	r2,r2,6216
  80cf08:	1885883a 	add	r2,r3,r2
  80cf0c:	00000106 	br	80cf14 <read+0x40>
  80cf10:	0005883a 	mov	r2,zero
  80cf14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80cf18:	e0bffb17 	ldw	r2,-20(fp)
  80cf1c:	10002226 	beq	r2,zero,80cfa8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80cf20:	e0bffb17 	ldw	r2,-20(fp)
  80cf24:	10800217 	ldw	r2,8(r2)
  80cf28:	108000cc 	andi	r2,r2,3
  80cf2c:	10800060 	cmpeqi	r2,r2,1
  80cf30:	1000181e 	bne	r2,zero,80cf94 <read+0xc0>
        (fd->dev->read))
  80cf34:	e0bffb17 	ldw	r2,-20(fp)
  80cf38:	10800017 	ldw	r2,0(r2)
  80cf3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80cf40:	10001426 	beq	r2,zero,80cf94 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80cf44:	e0bffb17 	ldw	r2,-20(fp)
  80cf48:	10800017 	ldw	r2,0(r2)
  80cf4c:	10800517 	ldw	r2,20(r2)
  80cf50:	e0ffff17 	ldw	r3,-4(fp)
  80cf54:	e13ffb17 	ldw	r4,-20(fp)
  80cf58:	e17ffe17 	ldw	r5,-8(fp)
  80cf5c:	180d883a 	mov	r6,r3
  80cf60:	103ee83a 	callr	r2
  80cf64:	e0bffc15 	stw	r2,-16(fp)
  80cf68:	e0bffc17 	ldw	r2,-16(fp)
  80cf6c:	1000070e 	bge	r2,zero,80cf8c <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80cf70:	080ce840 	call	80ce84 <alt_get_errno>
  80cf74:	1007883a 	mov	r3,r2
  80cf78:	e0bffc17 	ldw	r2,-16(fp)
  80cf7c:	0085c83a 	sub	r2,zero,r2
  80cf80:	18800015 	stw	r2,0(r3)
          return -1;
  80cf84:	00bfffc4 	movi	r2,-1
  80cf88:	00000c06 	br	80cfbc <read+0xe8>
        }
        return rval;
  80cf8c:	e0bffc17 	ldw	r2,-16(fp)
  80cf90:	00000a06 	br	80cfbc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80cf94:	080ce840 	call	80ce84 <alt_get_errno>
  80cf98:	1007883a 	mov	r3,r2
  80cf9c:	00800344 	movi	r2,13
  80cfa0:	18800015 	stw	r2,0(r3)
  80cfa4:	00000406 	br	80cfb8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80cfa8:	080ce840 	call	80ce84 <alt_get_errno>
  80cfac:	1007883a 	mov	r3,r2
  80cfb0:	00801444 	movi	r2,81
  80cfb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80cfb8:	00bfffc4 	movi	r2,-1
}
  80cfbc:	e037883a 	mov	sp,fp
  80cfc0:	dfc00117 	ldw	ra,4(sp)
  80cfc4:	df000017 	ldw	fp,0(sp)
  80cfc8:	dec00204 	addi	sp,sp,8
  80cfcc:	f800283a 	ret

0080cfd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80cfd0:	defffe04 	addi	sp,sp,-8
  80cfd4:	df000115 	stw	fp,4(sp)
  80cfd8:	df000104 	addi	fp,sp,4
  80cfdc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80cfe0:	e0bfff17 	ldw	r2,-4(fp)
  80cfe4:	108000d0 	cmplti	r2,r2,3
  80cfe8:	10000d1e 	bne	r2,zero,80d020 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80cfec:	00802074 	movhi	r2,129
  80cff0:	10861204 	addi	r2,r2,6216
  80cff4:	e0ffff17 	ldw	r3,-4(fp)
  80cff8:	18c00324 	muli	r3,r3,12
  80cffc:	18c00204 	addi	r3,r3,8
  80d000:	10c5883a 	add	r2,r2,r3
  80d004:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80d008:	00802074 	movhi	r2,129
  80d00c:	10861204 	addi	r2,r2,6216
  80d010:	e0ffff17 	ldw	r3,-4(fp)
  80d014:	18c00324 	muli	r3,r3,12
  80d018:	10c5883a 	add	r2,r2,r3
  80d01c:	10000015 	stw	zero,0(r2)
  }
}
  80d020:	e037883a 	mov	sp,fp
  80d024:	df000017 	ldw	fp,0(sp)
  80d028:	dec00104 	addi	sp,sp,4
  80d02c:	f800283a 	ret

0080d030 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80d030:	defff904 	addi	sp,sp,-28
  80d034:	df000615 	stw	fp,24(sp)
  80d038:	df000604 	addi	fp,sp,24
  80d03c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d040:	0005303a 	rdctl	r2,status
  80d044:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d048:	e0fffc17 	ldw	r3,-16(fp)
  80d04c:	00bfff84 	movi	r2,-2
  80d050:	1884703a 	and	r2,r3,r2
  80d054:	1001703a 	wrctl	status,r2
  
  return context;
  80d058:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80d05c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80d060:	d0a00c17 	ldw	r2,-32720(gp)
  80d064:	10c000c4 	addi	r3,r2,3
  80d068:	00bfff04 	movi	r2,-4
  80d06c:	1884703a 	and	r2,r3,r2
  80d070:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80d074:	d0e00c17 	ldw	r3,-32720(gp)
  80d078:	e0bfff17 	ldw	r2,-4(fp)
  80d07c:	1887883a 	add	r3,r3,r2
  80d080:	00804034 	movhi	r2,256
  80d084:	10800004 	addi	r2,r2,0
  80d088:	10c0062e 	bgeu	r2,r3,80d0a4 <sbrk+0x74>
  80d08c:	e0bffa17 	ldw	r2,-24(fp)
  80d090:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d094:	e0bffd17 	ldw	r2,-12(fp)
  80d098:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80d09c:	00bfffc4 	movi	r2,-1
  80d0a0:	00000b06 	br	80d0d0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80d0a4:	d0a00c17 	ldw	r2,-32720(gp)
  80d0a8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  80d0ac:	d0e00c17 	ldw	r3,-32720(gp)
  80d0b0:	e0bfff17 	ldw	r2,-4(fp)
  80d0b4:	1885883a 	add	r2,r3,r2
  80d0b8:	d0a00c15 	stw	r2,-32720(gp)
  80d0bc:	e0bffa17 	ldw	r2,-24(fp)
  80d0c0:	e0bffe15 	stw	r2,-8(fp)
  80d0c4:	e0bffe17 	ldw	r2,-8(fp)
  80d0c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80d0cc:	e0bffb17 	ldw	r2,-20(fp)
} 
  80d0d0:	e037883a 	mov	sp,fp
  80d0d4:	df000017 	ldw	fp,0(sp)
  80d0d8:	dec00104 	addi	sp,sp,4
  80d0dc:	f800283a 	ret

0080d0e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d0e0:	defffe04 	addi	sp,sp,-8
  80d0e4:	dfc00115 	stw	ra,4(sp)
  80d0e8:	df000015 	stw	fp,0(sp)
  80d0ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d0f0:	00802074 	movhi	r2,129
  80d0f4:	108b2604 	addi	r2,r2,11416
  80d0f8:	10800017 	ldw	r2,0(r2)
  80d0fc:	10000526 	beq	r2,zero,80d114 <alt_get_errno+0x34>
  80d100:	00802074 	movhi	r2,129
  80d104:	108b2604 	addi	r2,r2,11416
  80d108:	10800017 	ldw	r2,0(r2)
  80d10c:	103ee83a 	callr	r2
  80d110:	00000206 	br	80d11c <alt_get_errno+0x3c>
  80d114:	00802074 	movhi	r2,129
  80d118:	10928204 	addi	r2,r2,18952
}
  80d11c:	e037883a 	mov	sp,fp
  80d120:	dfc00117 	ldw	ra,4(sp)
  80d124:	df000017 	ldw	fp,0(sp)
  80d128:	dec00204 	addi	sp,sp,8
  80d12c:	f800283a 	ret

0080d130 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80d130:	defff904 	addi	sp,sp,-28
  80d134:	dfc00615 	stw	ra,24(sp)
  80d138:	df000515 	stw	fp,20(sp)
  80d13c:	df000504 	addi	fp,sp,20
  80d140:	e13ffd15 	stw	r4,-12(fp)
  80d144:	e17ffe15 	stw	r5,-8(fp)
  80d148:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d14c:	e0bffd17 	ldw	r2,-12(fp)
  80d150:	10000616 	blt	r2,zero,80d16c <write+0x3c>
  80d154:	e0bffd17 	ldw	r2,-12(fp)
  80d158:	10c00324 	muli	r3,r2,12
  80d15c:	00802074 	movhi	r2,129
  80d160:	10861204 	addi	r2,r2,6216
  80d164:	1885883a 	add	r2,r3,r2
  80d168:	00000106 	br	80d170 <write+0x40>
  80d16c:	0005883a 	mov	r2,zero
  80d170:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d174:	e0bffb17 	ldw	r2,-20(fp)
  80d178:	10002126 	beq	r2,zero,80d200 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80d17c:	e0bffb17 	ldw	r2,-20(fp)
  80d180:	10800217 	ldw	r2,8(r2)
  80d184:	108000cc 	andi	r2,r2,3
  80d188:	10001826 	beq	r2,zero,80d1ec <write+0xbc>
  80d18c:	e0bffb17 	ldw	r2,-20(fp)
  80d190:	10800017 	ldw	r2,0(r2)
  80d194:	10800617 	ldw	r2,24(r2)
  80d198:	10001426 	beq	r2,zero,80d1ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80d19c:	e0bffb17 	ldw	r2,-20(fp)
  80d1a0:	10800017 	ldw	r2,0(r2)
  80d1a4:	10800617 	ldw	r2,24(r2)
  80d1a8:	e0ffff17 	ldw	r3,-4(fp)
  80d1ac:	e13ffb17 	ldw	r4,-20(fp)
  80d1b0:	e17ffe17 	ldw	r5,-8(fp)
  80d1b4:	180d883a 	mov	r6,r3
  80d1b8:	103ee83a 	callr	r2
  80d1bc:	e0bffc15 	stw	r2,-16(fp)
  80d1c0:	e0bffc17 	ldw	r2,-16(fp)
  80d1c4:	1000070e 	bge	r2,zero,80d1e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80d1c8:	080d0e00 	call	80d0e0 <alt_get_errno>
  80d1cc:	1007883a 	mov	r3,r2
  80d1d0:	e0bffc17 	ldw	r2,-16(fp)
  80d1d4:	0085c83a 	sub	r2,zero,r2
  80d1d8:	18800015 	stw	r2,0(r3)
        return -1;
  80d1dc:	00bfffc4 	movi	r2,-1
  80d1e0:	00000c06 	br	80d214 <write+0xe4>
      }
      return rval;
  80d1e4:	e0bffc17 	ldw	r2,-16(fp)
  80d1e8:	00000a06 	br	80d214 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d1ec:	080d0e00 	call	80d0e0 <alt_get_errno>
  80d1f0:	1007883a 	mov	r3,r2
  80d1f4:	00800344 	movi	r2,13
  80d1f8:	18800015 	stw	r2,0(r3)
  80d1fc:	00000406 	br	80d210 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d200:	080d0e00 	call	80d0e0 <alt_get_errno>
  80d204:	1007883a 	mov	r3,r2
  80d208:	00801444 	movi	r2,81
  80d20c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d210:	00bfffc4 	movi	r2,-1
}
  80d214:	e037883a 	mov	sp,fp
  80d218:	dfc00117 	ldw	ra,4(sp)
  80d21c:	df000017 	ldw	fp,0(sp)
  80d220:	dec00204 	addi	sp,sp,8
  80d224:	f800283a 	ret

0080d228 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80d228:	defffd04 	addi	sp,sp,-12
  80d22c:	dfc00215 	stw	ra,8(sp)
  80d230:	df000115 	stw	fp,4(sp)
  80d234:	df000104 	addi	fp,sp,4
  80d238:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80d23c:	e13fff17 	ldw	r4,-4(fp)
  80d240:	01402074 	movhi	r5,129
  80d244:	294b2304 	addi	r5,r5,11404
  80d248:	080f8100 	call	80f810 <alt_dev_llist_insert>
}
  80d24c:	e037883a 	mov	sp,fp
  80d250:	dfc00117 	ldw	ra,4(sp)
  80d254:	df000017 	ldw	fp,0(sp)
  80d258:	dec00204 	addi	sp,sp,8
  80d25c:	f800283a 	ret

0080d260 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80d260:	defffd04 	addi	sp,sp,-12
  80d264:	dfc00215 	stw	ra,8(sp)
  80d268:	df000115 	stw	fp,4(sp)
  80d26c:	df000104 	addi	fp,sp,4
  80d270:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80d274:	08100c40 	call	8100c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80d278:	00800044 	movi	r2,1
  80d27c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80d280:	e037883a 	mov	sp,fp
  80d284:	dfc00117 	ldw	ra,4(sp)
  80d288:	df000017 	ldw	fp,0(sp)
  80d28c:	dec00204 	addi	sp,sp,8
  80d290:	f800283a 	ret

0080d294 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80d294:	defffe04 	addi	sp,sp,-8
  80d298:	dfc00115 	stw	ra,4(sp)
  80d29c:	df000015 	stw	fp,0(sp)
  80d2a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  80d2a4:	01004034 	movhi	r4,256
  80d2a8:	21042004 	addi	r4,r4,4224
  80d2ac:	000b883a 	mov	r5,zero
  80d2b0:	01800104 	movi	r6,4
  80d2b4:	01c0fa04 	movi	r7,1000
  80d2b8:	080ecd00 	call	80ecd0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80d2bc:	01002074 	movhi	r4,129
  80d2c0:	21067c04 	addi	r4,r4,6640
  80d2c4:	000b883a 	mov	r5,zero
  80d2c8:	000d883a 	mov	r6,zero
  80d2cc:	080d4a80 	call	80d4a8 <altera_avalon_jtag_uart_init>
  80d2d0:	01002074 	movhi	r4,129
  80d2d4:	21067204 	addi	r4,r4,6600
  80d2d8:	080d2280 	call	80d228 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  80d2dc:	01002074 	movhi	r4,129
  80d2e0:	210a9404 	addi	r4,r4,10832
  80d2e4:	080eac00 	call	80eac0 <altera_avalon_lcd_16207_init>
  80d2e8:	01002074 	movhi	r4,129
  80d2ec:	210a8a04 	addi	r4,r4,10792
  80d2f0:	080d2280 	call	80d228 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80d2f4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80d2f8:	01002074 	movhi	r4,129
  80d2fc:	210adc04 	addi	r4,r4,11120
  80d300:	000b883a 	mov	r5,zero
  80d304:	018000c4 	movi	r6,3
  80d308:	080ee600 	call	80ee60 <altera_avalon_uart_init>
  80d30c:	01002074 	movhi	r4,129
  80d310:	210ad204 	addi	r4,r4,11080
  80d314:	080d2280 	call	80d228 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  80d318:	01002074 	movhi	r4,129
  80d31c:	210b0304 	addi	r4,r4,11276
  80d320:	080d2280 	call	80d228 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  80d324:	01002074 	movhi	r4,129
  80d328:	210b0f04 	addi	r4,r4,11324
  80d32c:	080d2280 	call	80d228 <alt_dev_reg>
}
  80d330:	e037883a 	mov	sp,fp
  80d334:	dfc00117 	ldw	ra,4(sp)
  80d338:	df000017 	ldw	fp,0(sp)
  80d33c:	dec00204 	addi	sp,sp,8
  80d340:	f800283a 	ret

0080d344 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d344:	defffa04 	addi	sp,sp,-24
  80d348:	dfc00515 	stw	ra,20(sp)
  80d34c:	df000415 	stw	fp,16(sp)
  80d350:	df000404 	addi	fp,sp,16
  80d354:	e13ffd15 	stw	r4,-12(fp)
  80d358:	e17ffe15 	stw	r5,-8(fp)
  80d35c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d360:	e0bffd17 	ldw	r2,-12(fp)
  80d364:	10800017 	ldw	r2,0(r2)
  80d368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80d36c:	e0bffc17 	ldw	r2,-16(fp)
  80d370:	10c00a04 	addi	r3,r2,40
  80d374:	e0bffd17 	ldw	r2,-12(fp)
  80d378:	10800217 	ldw	r2,8(r2)
  80d37c:	1809883a 	mov	r4,r3
  80d380:	e17ffe17 	ldw	r5,-8(fp)
  80d384:	e1bfff17 	ldw	r6,-4(fp)
  80d388:	100f883a 	mov	r7,r2
  80d38c:	080d9640 	call	80d964 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80d390:	e037883a 	mov	sp,fp
  80d394:	dfc00117 	ldw	ra,4(sp)
  80d398:	df000017 	ldw	fp,0(sp)
  80d39c:	dec00204 	addi	sp,sp,8
  80d3a0:	f800283a 	ret

0080d3a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d3a4:	defffa04 	addi	sp,sp,-24
  80d3a8:	dfc00515 	stw	ra,20(sp)
  80d3ac:	df000415 	stw	fp,16(sp)
  80d3b0:	df000404 	addi	fp,sp,16
  80d3b4:	e13ffd15 	stw	r4,-12(fp)
  80d3b8:	e17ffe15 	stw	r5,-8(fp)
  80d3bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d3c0:	e0bffd17 	ldw	r2,-12(fp)
  80d3c4:	10800017 	ldw	r2,0(r2)
  80d3c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80d3cc:	e0bffc17 	ldw	r2,-16(fp)
  80d3d0:	10c00a04 	addi	r3,r2,40
  80d3d4:	e0bffd17 	ldw	r2,-12(fp)
  80d3d8:	10800217 	ldw	r2,8(r2)
  80d3dc:	1809883a 	mov	r4,r3
  80d3e0:	e17ffe17 	ldw	r5,-8(fp)
  80d3e4:	e1bfff17 	ldw	r6,-4(fp)
  80d3e8:	100f883a 	mov	r7,r2
  80d3ec:	080db700 	call	80db70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80d3f0:	e037883a 	mov	sp,fp
  80d3f4:	dfc00117 	ldw	ra,4(sp)
  80d3f8:	df000017 	ldw	fp,0(sp)
  80d3fc:	dec00204 	addi	sp,sp,8
  80d400:	f800283a 	ret

0080d404 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80d404:	defffc04 	addi	sp,sp,-16
  80d408:	dfc00315 	stw	ra,12(sp)
  80d40c:	df000215 	stw	fp,8(sp)
  80d410:	df000204 	addi	fp,sp,8
  80d414:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d418:	e0bfff17 	ldw	r2,-4(fp)
  80d41c:	10800017 	ldw	r2,0(r2)
  80d420:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80d424:	e0bffe17 	ldw	r2,-8(fp)
  80d428:	10c00a04 	addi	r3,r2,40
  80d42c:	e0bfff17 	ldw	r2,-4(fp)
  80d430:	10800217 	ldw	r2,8(r2)
  80d434:	1809883a 	mov	r4,r3
  80d438:	100b883a 	mov	r5,r2
  80d43c:	080d8100 	call	80d810 <altera_avalon_jtag_uart_close>
}
  80d440:	e037883a 	mov	sp,fp
  80d444:	dfc00117 	ldw	ra,4(sp)
  80d448:	df000017 	ldw	fp,0(sp)
  80d44c:	dec00204 	addi	sp,sp,8
  80d450:	f800283a 	ret

0080d454 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80d454:	defffa04 	addi	sp,sp,-24
  80d458:	dfc00515 	stw	ra,20(sp)
  80d45c:	df000415 	stw	fp,16(sp)
  80d460:	df000404 	addi	fp,sp,16
  80d464:	e13ffd15 	stw	r4,-12(fp)
  80d468:	e17ffe15 	stw	r5,-8(fp)
  80d46c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80d470:	e0bffd17 	ldw	r2,-12(fp)
  80d474:	10800017 	ldw	r2,0(r2)
  80d478:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80d47c:	e0bffc17 	ldw	r2,-16(fp)
  80d480:	10800a04 	addi	r2,r2,40
  80d484:	1009883a 	mov	r4,r2
  80d488:	e17ffe17 	ldw	r5,-8(fp)
  80d48c:	e1bfff17 	ldw	r6,-4(fp)
  80d490:	080d8780 	call	80d878 <altera_avalon_jtag_uart_ioctl>
}
  80d494:	e037883a 	mov	sp,fp
  80d498:	dfc00117 	ldw	ra,4(sp)
  80d49c:	df000017 	ldw	fp,0(sp)
  80d4a0:	dec00204 	addi	sp,sp,8
  80d4a4:	f800283a 	ret

0080d4a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80d4a8:	defffb04 	addi	sp,sp,-20
  80d4ac:	dfc00415 	stw	ra,16(sp)
  80d4b0:	df000315 	stw	fp,12(sp)
  80d4b4:	df000304 	addi	fp,sp,12
  80d4b8:	e13ffd15 	stw	r4,-12(fp)
  80d4bc:	e17ffe15 	stw	r5,-8(fp)
  80d4c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d4c4:	e0bffd17 	ldw	r2,-12(fp)
  80d4c8:	00c00044 	movi	r3,1
  80d4cc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80d4d0:	e0bffd17 	ldw	r2,-12(fp)
  80d4d4:	10800017 	ldw	r2,0(r2)
  80d4d8:	10800104 	addi	r2,r2,4
  80d4dc:	1007883a 	mov	r3,r2
  80d4e0:	e0bffd17 	ldw	r2,-12(fp)
  80d4e4:	10800817 	ldw	r2,32(r2)
  80d4e8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80d4ec:	e0bfff17 	ldw	r2,-4(fp)
  80d4f0:	1009883a 	mov	r4,r2
  80d4f4:	e17ffd17 	ldw	r5,-12(fp)
  80d4f8:	01802074 	movhi	r6,129
  80d4fc:	31b55804 	addi	r6,r6,-10912
  80d500:	080fad40 	call	80fad4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80d504:	e0bffd17 	ldw	r2,-12(fp)
  80d508:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80d50c:	e0bffd17 	ldw	r2,-12(fp)
  80d510:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d514:	00802074 	movhi	r2,129
  80d518:	10928704 	addi	r2,r2,18972
  80d51c:	10800017 	ldw	r2,0(r2)
  80d520:	1809883a 	mov	r4,r3
  80d524:	100b883a 	mov	r5,r2
  80d528:	01802074 	movhi	r6,129
  80d52c:	31b5da04 	addi	r6,r6,-10392
  80d530:	e1fffd17 	ldw	r7,-12(fp)
  80d534:	080f63c0 	call	80f63c <alt_alarm_start>
  80d538:	1000040e 	bge	r2,zero,80d54c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80d53c:	e0fffd17 	ldw	r3,-12(fp)
  80d540:	00a00034 	movhi	r2,32768
  80d544:	10bfffc4 	addi	r2,r2,-1
  80d548:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80d54c:	e037883a 	mov	sp,fp
  80d550:	dfc00117 	ldw	ra,4(sp)
  80d554:	df000017 	ldw	fp,0(sp)
  80d558:	dec00204 	addi	sp,sp,8
  80d55c:	f800283a 	ret

0080d560 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80d560:	defff704 	addi	sp,sp,-36
  80d564:	df000815 	stw	fp,32(sp)
  80d568:	df000804 	addi	fp,sp,32
  80d56c:	e13ffe15 	stw	r4,-8(fp)
  80d570:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80d574:	e0bffe17 	ldw	r2,-8(fp)
  80d578:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  80d57c:	e0bffa17 	ldw	r2,-24(fp)
  80d580:	10800017 	ldw	r2,0(r2)
  80d584:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d588:	e0bffb17 	ldw	r2,-20(fp)
  80d58c:	10800104 	addi	r2,r2,4
  80d590:	10800037 	ldwio	r2,0(r2)
  80d594:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80d598:	e0bffc17 	ldw	r2,-16(fp)
  80d59c:	1080c00c 	andi	r2,r2,768
  80d5a0:	1000011e 	bne	r2,zero,80d5a8 <altera_avalon_jtag_uart_irq+0x48>
      break;
  80d5a4:	00006c06 	br	80d758 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80d5a8:	e0bffc17 	ldw	r2,-16(fp)
  80d5ac:	1080400c 	andi	r2,r2,256
  80d5b0:	10003426 	beq	r2,zero,80d684 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80d5b4:	00800074 	movhi	r2,1
  80d5b8:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d5bc:	e0bffa17 	ldw	r2,-24(fp)
  80d5c0:	10800a17 	ldw	r2,40(r2)
  80d5c4:	10800044 	addi	r2,r2,1
  80d5c8:	1081ffcc 	andi	r2,r2,2047
  80d5cc:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  80d5d0:	e0bffa17 	ldw	r2,-24(fp)
  80d5d4:	10c00b17 	ldw	r3,44(r2)
  80d5d8:	e0bffd17 	ldw	r2,-12(fp)
  80d5dc:	1880011e 	bne	r3,r2,80d5e4 <altera_avalon_jtag_uart_irq+0x84>
          break;
  80d5e0:	00001606 	br	80d63c <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80d5e4:	e0bffb17 	ldw	r2,-20(fp)
  80d5e8:	10800037 	ldwio	r2,0(r2)
  80d5ec:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80d5f0:	e0bff817 	ldw	r2,-32(fp)
  80d5f4:	10a0000c 	andi	r2,r2,32768
  80d5f8:	1000011e 	bne	r2,zero,80d600 <altera_avalon_jtag_uart_irq+0xa0>
          break;
  80d5fc:	00000f06 	br	80d63c <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80d600:	e0bffa17 	ldw	r2,-24(fp)
  80d604:	10800a17 	ldw	r2,40(r2)
  80d608:	e0fff817 	ldw	r3,-32(fp)
  80d60c:	1809883a 	mov	r4,r3
  80d610:	e0fffa17 	ldw	r3,-24(fp)
  80d614:	1885883a 	add	r2,r3,r2
  80d618:	10800e04 	addi	r2,r2,56
  80d61c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d620:	e0bffa17 	ldw	r2,-24(fp)
  80d624:	10800a17 	ldw	r2,40(r2)
  80d628:	10800044 	addi	r2,r2,1
  80d62c:	10c1ffcc 	andi	r3,r2,2047
  80d630:	e0bffa17 	ldw	r2,-24(fp)
  80d634:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80d638:	003fe006 	br	80d5bc <__alt_data_end+0xff80d5bc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80d63c:	e0bff817 	ldw	r2,-32(fp)
  80d640:	10bfffec 	andhi	r2,r2,65535
  80d644:	10000f26 	beq	r2,zero,80d684 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d648:	e0bffa17 	ldw	r2,-24(fp)
  80d64c:	10c00817 	ldw	r3,32(r2)
  80d650:	00bfff84 	movi	r2,-2
  80d654:	1886703a 	and	r3,r3,r2
  80d658:	e0bffa17 	ldw	r2,-24(fp)
  80d65c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80d660:	e0bffb17 	ldw	r2,-20(fp)
  80d664:	10800104 	addi	r2,r2,4
  80d668:	1007883a 	mov	r3,r2
  80d66c:	e0bffa17 	ldw	r2,-24(fp)
  80d670:	10800817 	ldw	r2,32(r2)
  80d674:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d678:	e0bffb17 	ldw	r2,-20(fp)
  80d67c:	10800104 	addi	r2,r2,4
  80d680:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80d684:	e0bffc17 	ldw	r2,-16(fp)
  80d688:	1080800c 	andi	r2,r2,512
  80d68c:	10003126 	beq	r2,zero,80d754 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80d690:	e0bffc17 	ldw	r2,-16(fp)
  80d694:	1004d43a 	srli	r2,r2,16
  80d698:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d69c:	00001406 	br	80d6f0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80d6a0:	e0bffb17 	ldw	r2,-20(fp)
  80d6a4:	e0fffa17 	ldw	r3,-24(fp)
  80d6a8:	18c00d17 	ldw	r3,52(r3)
  80d6ac:	e13ffa17 	ldw	r4,-24(fp)
  80d6b0:	20c7883a 	add	r3,r4,r3
  80d6b4:	18c20e04 	addi	r3,r3,2104
  80d6b8:	18c00003 	ldbu	r3,0(r3)
  80d6bc:	18c03fcc 	andi	r3,r3,255
  80d6c0:	18c0201c 	xori	r3,r3,128
  80d6c4:	18ffe004 	addi	r3,r3,-128
  80d6c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d6cc:	e0bffa17 	ldw	r2,-24(fp)
  80d6d0:	10800d17 	ldw	r2,52(r2)
  80d6d4:	10800044 	addi	r2,r2,1
  80d6d8:	10c1ffcc 	andi	r3,r2,2047
  80d6dc:	e0bffa17 	ldw	r2,-24(fp)
  80d6e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80d6e4:	e0bff917 	ldw	r2,-28(fp)
  80d6e8:	10bfffc4 	addi	r2,r2,-1
  80d6ec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80d6f0:	e0bff917 	ldw	r2,-28(fp)
  80d6f4:	10000526 	beq	r2,zero,80d70c <altera_avalon_jtag_uart_irq+0x1ac>
  80d6f8:	e0bffa17 	ldw	r2,-24(fp)
  80d6fc:	10c00d17 	ldw	r3,52(r2)
  80d700:	e0bffa17 	ldw	r2,-24(fp)
  80d704:	10800c17 	ldw	r2,48(r2)
  80d708:	18bfe51e 	bne	r3,r2,80d6a0 <__alt_data_end+0xff80d6a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80d70c:	e0bff917 	ldw	r2,-28(fp)
  80d710:	10001026 	beq	r2,zero,80d754 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d714:	e0bffa17 	ldw	r2,-24(fp)
  80d718:	10c00817 	ldw	r3,32(r2)
  80d71c:	00bfff44 	movi	r2,-3
  80d720:	1886703a 	and	r3,r3,r2
  80d724:	e0bffa17 	ldw	r2,-24(fp)
  80d728:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d72c:	e0bffa17 	ldw	r2,-24(fp)
  80d730:	10800017 	ldw	r2,0(r2)
  80d734:	10800104 	addi	r2,r2,4
  80d738:	1007883a 	mov	r3,r2
  80d73c:	e0bffa17 	ldw	r2,-24(fp)
  80d740:	10800817 	ldw	r2,32(r2)
  80d744:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80d748:	e0bffb17 	ldw	r2,-20(fp)
  80d74c:	10800104 	addi	r2,r2,4
  80d750:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80d754:	003f8c06 	br	80d588 <__alt_data_end+0xff80d588>
}
  80d758:	e037883a 	mov	sp,fp
  80d75c:	df000017 	ldw	fp,0(sp)
  80d760:	dec00104 	addi	sp,sp,4
  80d764:	f800283a 	ret

0080d768 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80d768:	defff804 	addi	sp,sp,-32
  80d76c:	df000715 	stw	fp,28(sp)
  80d770:	df000704 	addi	fp,sp,28
  80d774:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80d778:	e0bffb17 	ldw	r2,-20(fp)
  80d77c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80d780:	e0bff917 	ldw	r2,-28(fp)
  80d784:	10800017 	ldw	r2,0(r2)
  80d788:	10800104 	addi	r2,r2,4
  80d78c:	10800037 	ldwio	r2,0(r2)
  80d790:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80d794:	e0bffa17 	ldw	r2,-24(fp)
  80d798:	1081000c 	andi	r2,r2,1024
  80d79c:	10000b26 	beq	r2,zero,80d7cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80d7a0:	e0bff917 	ldw	r2,-28(fp)
  80d7a4:	10800017 	ldw	r2,0(r2)
  80d7a8:	10800104 	addi	r2,r2,4
  80d7ac:	1007883a 	mov	r3,r2
  80d7b0:	e0bff917 	ldw	r2,-28(fp)
  80d7b4:	10800817 	ldw	r2,32(r2)
  80d7b8:	10810014 	ori	r2,r2,1024
  80d7bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80d7c0:	e0bff917 	ldw	r2,-28(fp)
  80d7c4:	10000915 	stw	zero,36(r2)
  80d7c8:	00000a06 	br	80d7f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80d7cc:	e0bff917 	ldw	r2,-28(fp)
  80d7d0:	10c00917 	ldw	r3,36(r2)
  80d7d4:	00a00034 	movhi	r2,32768
  80d7d8:	10bfff04 	addi	r2,r2,-4
  80d7dc:	10c00536 	bltu	r2,r3,80d7f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80d7e0:	e0bff917 	ldw	r2,-28(fp)
  80d7e4:	10800917 	ldw	r2,36(r2)
  80d7e8:	10c00044 	addi	r3,r2,1
  80d7ec:	e0bff917 	ldw	r2,-28(fp)
  80d7f0:	10c00915 	stw	r3,36(r2)
  80d7f4:	00802074 	movhi	r2,129
  80d7f8:	10928704 	addi	r2,r2,18972
  80d7fc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80d800:	e037883a 	mov	sp,fp
  80d804:	df000017 	ldw	fp,0(sp)
  80d808:	dec00104 	addi	sp,sp,4
  80d80c:	f800283a 	ret

0080d810 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80d810:	defffd04 	addi	sp,sp,-12
  80d814:	df000215 	stw	fp,8(sp)
  80d818:	df000204 	addi	fp,sp,8
  80d81c:	e13ffe15 	stw	r4,-8(fp)
  80d820:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d824:	00000506 	br	80d83c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80d828:	e0bfff17 	ldw	r2,-4(fp)
  80d82c:	1090000c 	andi	r2,r2,16384
  80d830:	10000226 	beq	r2,zero,80d83c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80d834:	00bffd44 	movi	r2,-11
  80d838:	00000b06 	br	80d868 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80d83c:	e0bffe17 	ldw	r2,-8(fp)
  80d840:	10c00d17 	ldw	r3,52(r2)
  80d844:	e0bffe17 	ldw	r2,-8(fp)
  80d848:	10800c17 	ldw	r2,48(r2)
  80d84c:	18800526 	beq	r3,r2,80d864 <altera_avalon_jtag_uart_close+0x54>
  80d850:	e0bffe17 	ldw	r2,-8(fp)
  80d854:	10c00917 	ldw	r3,36(r2)
  80d858:	e0bffe17 	ldw	r2,-8(fp)
  80d85c:	10800117 	ldw	r2,4(r2)
  80d860:	18bff136 	bltu	r3,r2,80d828 <__alt_data_end+0xff80d828>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d864:	0005883a 	mov	r2,zero
}
  80d868:	e037883a 	mov	sp,fp
  80d86c:	df000017 	ldw	fp,0(sp)
  80d870:	dec00104 	addi	sp,sp,4
  80d874:	f800283a 	ret

0080d878 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80d878:	defffa04 	addi	sp,sp,-24
  80d87c:	df000515 	stw	fp,20(sp)
  80d880:	df000504 	addi	fp,sp,20
  80d884:	e13ffd15 	stw	r4,-12(fp)
  80d888:	e17ffe15 	stw	r5,-8(fp)
  80d88c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80d890:	00bff9c4 	movi	r2,-25
  80d894:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80d898:	e0bffe17 	ldw	r2,-8(fp)
  80d89c:	10da8060 	cmpeqi	r3,r2,27137
  80d8a0:	1800031e 	bne	r3,zero,80d8b0 <altera_avalon_jtag_uart_ioctl+0x38>
  80d8a4:	109a80a0 	cmpeqi	r2,r2,27138
  80d8a8:	1000191e 	bne	r2,zero,80d910 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  80d8ac:	00002806 	br	80d950 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80d8b0:	e0bffd17 	ldw	r2,-12(fp)
  80d8b4:	10c00117 	ldw	r3,4(r2)
  80d8b8:	00a00034 	movhi	r2,32768
  80d8bc:	10bfffc4 	addi	r2,r2,-1
  80d8c0:	18801226 	beq	r3,r2,80d90c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  80d8c4:	e0bfff17 	ldw	r2,-4(fp)
  80d8c8:	10800017 	ldw	r2,0(r2)
  80d8cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80d8d0:	e0bffc17 	ldw	r2,-16(fp)
  80d8d4:	10800090 	cmplti	r2,r2,2
  80d8d8:	1000061e 	bne	r2,zero,80d8f4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80d8dc:	e0fffc17 	ldw	r3,-16(fp)
  80d8e0:	00a00034 	movhi	r2,32768
  80d8e4:	10bfffc4 	addi	r2,r2,-1
  80d8e8:	18800226 	beq	r3,r2,80d8f4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80d8ec:	e0bffc17 	ldw	r2,-16(fp)
  80d8f0:	00000206 	br	80d8fc <altera_avalon_jtag_uart_ioctl+0x84>
  80d8f4:	00a00034 	movhi	r2,32768
  80d8f8:	10bfff84 	addi	r2,r2,-2
  80d8fc:	e0fffd17 	ldw	r3,-12(fp)
  80d900:	18800115 	stw	r2,4(r3)
      rc = 0;
  80d904:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80d908:	00001106 	br	80d950 <altera_avalon_jtag_uart_ioctl+0xd8>
  80d90c:	00001006 	br	80d950 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80d910:	e0bffd17 	ldw	r2,-12(fp)
  80d914:	10c00117 	ldw	r3,4(r2)
  80d918:	00a00034 	movhi	r2,32768
  80d91c:	10bfffc4 	addi	r2,r2,-1
  80d920:	18800a26 	beq	r3,r2,80d94c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80d924:	e0bffd17 	ldw	r2,-12(fp)
  80d928:	10c00917 	ldw	r3,36(r2)
  80d92c:	e0bffd17 	ldw	r2,-12(fp)
  80d930:	10800117 	ldw	r2,4(r2)
  80d934:	1885803a 	cmpltu	r2,r3,r2
  80d938:	10c03fcc 	andi	r3,r2,255
  80d93c:	e0bfff17 	ldw	r2,-4(fp)
  80d940:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80d944:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80d948:	00000006 	br	80d94c <altera_avalon_jtag_uart_ioctl+0xd4>
  80d94c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80d950:	e0bffb17 	ldw	r2,-20(fp)
}
  80d954:	e037883a 	mov	sp,fp
  80d958:	df000017 	ldw	fp,0(sp)
  80d95c:	dec00104 	addi	sp,sp,4
  80d960:	f800283a 	ret

0080d964 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80d964:	defff304 	addi	sp,sp,-52
  80d968:	dfc00c15 	stw	ra,48(sp)
  80d96c:	df000b15 	stw	fp,44(sp)
  80d970:	df000b04 	addi	fp,sp,44
  80d974:	e13ffc15 	stw	r4,-16(fp)
  80d978:	e17ffd15 	stw	r5,-12(fp)
  80d97c:	e1bffe15 	stw	r6,-8(fp)
  80d980:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80d984:	e0bffd17 	ldw	r2,-12(fp)
  80d988:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d98c:	00004906 	br	80dab4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80d990:	e0bffc17 	ldw	r2,-16(fp)
  80d994:	10800a17 	ldw	r2,40(r2)
  80d998:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80d99c:	e0bffc17 	ldw	r2,-16(fp)
  80d9a0:	10800b17 	ldw	r2,44(r2)
  80d9a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80d9a8:	e0fff717 	ldw	r3,-36(fp)
  80d9ac:	e0bff817 	ldw	r2,-32(fp)
  80d9b0:	18800536 	bltu	r3,r2,80d9c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80d9b4:	e0fff717 	ldw	r3,-36(fp)
  80d9b8:	e0bff817 	ldw	r2,-32(fp)
  80d9bc:	1885c83a 	sub	r2,r3,r2
  80d9c0:	e0bff615 	stw	r2,-40(fp)
  80d9c4:	00000406 	br	80d9d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80d9c8:	00c20004 	movi	r3,2048
  80d9cc:	e0bff817 	ldw	r2,-32(fp)
  80d9d0:	1885c83a 	sub	r2,r3,r2
  80d9d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80d9d8:	e0bff617 	ldw	r2,-40(fp)
  80d9dc:	1000011e 	bne	r2,zero,80d9e4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  80d9e0:	00001d06 	br	80da58 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  80d9e4:	e0fffe17 	ldw	r3,-8(fp)
  80d9e8:	e0bff617 	ldw	r2,-40(fp)
  80d9ec:	1880022e 	bgeu	r3,r2,80d9f8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80d9f0:	e0bffe17 	ldw	r2,-8(fp)
  80d9f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80d9f8:	e0bff817 	ldw	r2,-32(fp)
  80d9fc:	10800e04 	addi	r2,r2,56
  80da00:	e0fffc17 	ldw	r3,-16(fp)
  80da04:	1885883a 	add	r2,r3,r2
  80da08:	e13ff517 	ldw	r4,-44(fp)
  80da0c:	100b883a 	mov	r5,r2
  80da10:	e1bff617 	ldw	r6,-40(fp)
  80da14:	080578c0 	call	80578c <memcpy>
      ptr   += n;
  80da18:	e0fff517 	ldw	r3,-44(fp)
  80da1c:	e0bff617 	ldw	r2,-40(fp)
  80da20:	1885883a 	add	r2,r3,r2
  80da24:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80da28:	e0fffe17 	ldw	r3,-8(fp)
  80da2c:	e0bff617 	ldw	r2,-40(fp)
  80da30:	1885c83a 	sub	r2,r3,r2
  80da34:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80da38:	e0fff817 	ldw	r3,-32(fp)
  80da3c:	e0bff617 	ldw	r2,-40(fp)
  80da40:	1885883a 	add	r2,r3,r2
  80da44:	10c1ffcc 	andi	r3,r2,2047
  80da48:	e0bffc17 	ldw	r2,-16(fp)
  80da4c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80da50:	e0bffe17 	ldw	r2,-8(fp)
  80da54:	00bfce16 	blt	zero,r2,80d990 <__alt_data_end+0xff80d990>

    /* If we read any data then return it */
    if (ptr != buffer)
  80da58:	e0fff517 	ldw	r3,-44(fp)
  80da5c:	e0bffd17 	ldw	r2,-12(fp)
  80da60:	18800126 	beq	r3,r2,80da68 <altera_avalon_jtag_uart_read+0x104>
      break;
  80da64:	00001506 	br	80dabc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80da68:	e0bfff17 	ldw	r2,-4(fp)
  80da6c:	1090000c 	andi	r2,r2,16384
  80da70:	10000126 	beq	r2,zero,80da78 <altera_avalon_jtag_uart_read+0x114>
      break;
  80da74:	00001106 	br	80dabc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80da78:	0001883a 	nop
  80da7c:	e0bffc17 	ldw	r2,-16(fp)
  80da80:	10c00a17 	ldw	r3,40(r2)
  80da84:	e0bff717 	ldw	r2,-36(fp)
  80da88:	1880051e 	bne	r3,r2,80daa0 <altera_avalon_jtag_uart_read+0x13c>
  80da8c:	e0bffc17 	ldw	r2,-16(fp)
  80da90:	10c00917 	ldw	r3,36(r2)
  80da94:	e0bffc17 	ldw	r2,-16(fp)
  80da98:	10800117 	ldw	r2,4(r2)
  80da9c:	18bff736 	bltu	r3,r2,80da7c <__alt_data_end+0xff80da7c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80daa0:	e0bffc17 	ldw	r2,-16(fp)
  80daa4:	10c00a17 	ldw	r3,40(r2)
  80daa8:	e0bff717 	ldw	r2,-36(fp)
  80daac:	1880011e 	bne	r3,r2,80dab4 <altera_avalon_jtag_uart_read+0x150>
      break;
  80dab0:	00000206 	br	80dabc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80dab4:	e0bffe17 	ldw	r2,-8(fp)
  80dab8:	00bfb516 	blt	zero,r2,80d990 <__alt_data_end+0xff80d990>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80dabc:	e0fff517 	ldw	r3,-44(fp)
  80dac0:	e0bffd17 	ldw	r2,-12(fp)
  80dac4:	18801826 	beq	r3,r2,80db28 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dac8:	0005303a 	rdctl	r2,status
  80dacc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dad0:	e0fffa17 	ldw	r3,-24(fp)
  80dad4:	00bfff84 	movi	r2,-2
  80dad8:	1884703a 	and	r2,r3,r2
  80dadc:	1001703a 	wrctl	status,r2
  
  return context;
  80dae0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80dae4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80dae8:	e0bffc17 	ldw	r2,-16(fp)
  80daec:	10800817 	ldw	r2,32(r2)
  80daf0:	10c00054 	ori	r3,r2,1
  80daf4:	e0bffc17 	ldw	r2,-16(fp)
  80daf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80dafc:	e0bffc17 	ldw	r2,-16(fp)
  80db00:	10800017 	ldw	r2,0(r2)
  80db04:	10800104 	addi	r2,r2,4
  80db08:	1007883a 	mov	r3,r2
  80db0c:	e0bffc17 	ldw	r2,-16(fp)
  80db10:	10800817 	ldw	r2,32(r2)
  80db14:	18800035 	stwio	r2,0(r3)
  80db18:	e0bff917 	ldw	r2,-28(fp)
  80db1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80db20:	e0bffb17 	ldw	r2,-20(fp)
  80db24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80db28:	e0fff517 	ldw	r3,-44(fp)
  80db2c:	e0bffd17 	ldw	r2,-12(fp)
  80db30:	18800426 	beq	r3,r2,80db44 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  80db34:	e0fff517 	ldw	r3,-44(fp)
  80db38:	e0bffd17 	ldw	r2,-12(fp)
  80db3c:	1885c83a 	sub	r2,r3,r2
  80db40:	00000606 	br	80db5c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  80db44:	e0bfff17 	ldw	r2,-4(fp)
  80db48:	1090000c 	andi	r2,r2,16384
  80db4c:	10000226 	beq	r2,zero,80db58 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  80db50:	00bffd44 	movi	r2,-11
  80db54:	00000106 	br	80db5c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  80db58:	00bffec4 	movi	r2,-5
}
  80db5c:	e037883a 	mov	sp,fp
  80db60:	dfc00117 	ldw	ra,4(sp)
  80db64:	df000017 	ldw	fp,0(sp)
  80db68:	dec00204 	addi	sp,sp,8
  80db6c:	f800283a 	ret

0080db70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80db70:	defff304 	addi	sp,sp,-52
  80db74:	dfc00c15 	stw	ra,48(sp)
  80db78:	df000b15 	stw	fp,44(sp)
  80db7c:	df000b04 	addi	fp,sp,44
  80db80:	e13ffc15 	stw	r4,-16(fp)
  80db84:	e17ffd15 	stw	r5,-12(fp)
  80db88:	e1bffe15 	stw	r6,-8(fp)
  80db8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80db90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80db94:	e0bffd17 	ldw	r2,-12(fp)
  80db98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80db9c:	00003806 	br	80dc80 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80dba0:	e0bffc17 	ldw	r2,-16(fp)
  80dba4:	10800c17 	ldw	r2,48(r2)
  80dba8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  80dbac:	e0bffc17 	ldw	r2,-16(fp)
  80dbb0:	10800d17 	ldw	r2,52(r2)
  80dbb4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80dbb8:	e0fff817 	ldw	r3,-32(fp)
  80dbbc:	e0bff517 	ldw	r2,-44(fp)
  80dbc0:	1880062e 	bgeu	r3,r2,80dbdc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80dbc4:	e0fff517 	ldw	r3,-44(fp)
  80dbc8:	e0bff817 	ldw	r2,-32(fp)
  80dbcc:	1885c83a 	sub	r2,r3,r2
  80dbd0:	10bfffc4 	addi	r2,r2,-1
  80dbd4:	e0bff615 	stw	r2,-40(fp)
  80dbd8:	00000b06 	br	80dc08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80dbdc:	e0bff517 	ldw	r2,-44(fp)
  80dbe0:	10000526 	beq	r2,zero,80dbf8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80dbe4:	00c20004 	movi	r3,2048
  80dbe8:	e0bff817 	ldw	r2,-32(fp)
  80dbec:	1885c83a 	sub	r2,r3,r2
  80dbf0:	e0bff615 	stw	r2,-40(fp)
  80dbf4:	00000406 	br	80dc08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80dbf8:	00c1ffc4 	movi	r3,2047
  80dbfc:	e0bff817 	ldw	r2,-32(fp)
  80dc00:	1885c83a 	sub	r2,r3,r2
  80dc04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80dc08:	e0bff617 	ldw	r2,-40(fp)
  80dc0c:	1000011e 	bne	r2,zero,80dc14 <altera_avalon_jtag_uart_write+0xa4>
        break;
  80dc10:	00001d06 	br	80dc88 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  80dc14:	e0fffe17 	ldw	r3,-8(fp)
  80dc18:	e0bff617 	ldw	r2,-40(fp)
  80dc1c:	1880022e 	bgeu	r3,r2,80dc28 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  80dc20:	e0bffe17 	ldw	r2,-8(fp)
  80dc24:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80dc28:	e0bff817 	ldw	r2,-32(fp)
  80dc2c:	10820e04 	addi	r2,r2,2104
  80dc30:	e0fffc17 	ldw	r3,-16(fp)
  80dc34:	1885883a 	add	r2,r3,r2
  80dc38:	1009883a 	mov	r4,r2
  80dc3c:	e17ffd17 	ldw	r5,-12(fp)
  80dc40:	e1bff617 	ldw	r6,-40(fp)
  80dc44:	080578c0 	call	80578c <memcpy>
      ptr   += n;
  80dc48:	e0fffd17 	ldw	r3,-12(fp)
  80dc4c:	e0bff617 	ldw	r2,-40(fp)
  80dc50:	1885883a 	add	r2,r3,r2
  80dc54:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80dc58:	e0fffe17 	ldw	r3,-8(fp)
  80dc5c:	e0bff617 	ldw	r2,-40(fp)
  80dc60:	1885c83a 	sub	r2,r3,r2
  80dc64:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80dc68:	e0fff817 	ldw	r3,-32(fp)
  80dc6c:	e0bff617 	ldw	r2,-40(fp)
  80dc70:	1885883a 	add	r2,r3,r2
  80dc74:	10c1ffcc 	andi	r3,r2,2047
  80dc78:	e0bffc17 	ldw	r2,-16(fp)
  80dc7c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80dc80:	e0bffe17 	ldw	r2,-8(fp)
  80dc84:	00bfc616 	blt	zero,r2,80dba0 <__alt_data_end+0xff80dba0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc88:	0005303a 	rdctl	r2,status
  80dc8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc90:	e0fffa17 	ldw	r3,-24(fp)
  80dc94:	00bfff84 	movi	r2,-2
  80dc98:	1884703a 	and	r2,r3,r2
  80dc9c:	1001703a 	wrctl	status,r2
  
  return context;
  80dca0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80dca4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80dca8:	e0bffc17 	ldw	r2,-16(fp)
  80dcac:	10800817 	ldw	r2,32(r2)
  80dcb0:	10c00094 	ori	r3,r2,2
  80dcb4:	e0bffc17 	ldw	r2,-16(fp)
  80dcb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80dcbc:	e0bffc17 	ldw	r2,-16(fp)
  80dcc0:	10800017 	ldw	r2,0(r2)
  80dcc4:	10800104 	addi	r2,r2,4
  80dcc8:	1007883a 	mov	r3,r2
  80dccc:	e0bffc17 	ldw	r2,-16(fp)
  80dcd0:	10800817 	ldw	r2,32(r2)
  80dcd4:	18800035 	stwio	r2,0(r3)
  80dcd8:	e0bff917 	ldw	r2,-28(fp)
  80dcdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dce0:	e0bffb17 	ldw	r2,-20(fp)
  80dce4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80dce8:	e0bffe17 	ldw	r2,-8(fp)
  80dcec:	0080120e 	bge	zero,r2,80dd38 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  80dcf0:	e0bfff17 	ldw	r2,-4(fp)
  80dcf4:	1090000c 	andi	r2,r2,16384
  80dcf8:	10000126 	beq	r2,zero,80dd00 <altera_avalon_jtag_uart_write+0x190>
        break;
  80dcfc:	00001006 	br	80dd40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80dd00:	0001883a 	nop
  80dd04:	e0bffc17 	ldw	r2,-16(fp)
  80dd08:	10c00d17 	ldw	r3,52(r2)
  80dd0c:	e0bff517 	ldw	r2,-44(fp)
  80dd10:	1880051e 	bne	r3,r2,80dd28 <altera_avalon_jtag_uart_write+0x1b8>
  80dd14:	e0bffc17 	ldw	r2,-16(fp)
  80dd18:	10c00917 	ldw	r3,36(r2)
  80dd1c:	e0bffc17 	ldw	r2,-16(fp)
  80dd20:	10800117 	ldw	r2,4(r2)
  80dd24:	18bff736 	bltu	r3,r2,80dd04 <__alt_data_end+0xff80dd04>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80dd28:	e0bffc17 	ldw	r2,-16(fp)
  80dd2c:	10800917 	ldw	r2,36(r2)
  80dd30:	10000126 	beq	r2,zero,80dd38 <altera_avalon_jtag_uart_write+0x1c8>
         break;
  80dd34:	00000206 	br	80dd40 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  80dd38:	e0bffe17 	ldw	r2,-8(fp)
  80dd3c:	00bf9716 	blt	zero,r2,80db9c <__alt_data_end+0xff80db9c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80dd40:	e0fffd17 	ldw	r3,-12(fp)
  80dd44:	e0bff717 	ldw	r2,-36(fp)
  80dd48:	18800426 	beq	r3,r2,80dd5c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  80dd4c:	e0fffd17 	ldw	r3,-12(fp)
  80dd50:	e0bff717 	ldw	r2,-36(fp)
  80dd54:	1885c83a 	sub	r2,r3,r2
  80dd58:	00000606 	br	80dd74 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  80dd5c:	e0bfff17 	ldw	r2,-4(fp)
  80dd60:	1090000c 	andi	r2,r2,16384
  80dd64:	10000226 	beq	r2,zero,80dd70 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  80dd68:	00bffd44 	movi	r2,-11
  80dd6c:	00000106 	br	80dd74 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80dd70:	00bffec4 	movi	r2,-5
}
  80dd74:	e037883a 	mov	sp,fp
  80dd78:	dfc00117 	ldw	ra,4(sp)
  80dd7c:	df000017 	ldw	fp,0(sp)
  80dd80:	dec00204 	addi	sp,sp,8
  80dd84:	f800283a 	ret

0080dd88 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80dd88:	defffa04 	addi	sp,sp,-24
  80dd8c:	dfc00515 	stw	ra,20(sp)
  80dd90:	df000415 	stw	fp,16(sp)
  80dd94:	df000404 	addi	fp,sp,16
  80dd98:	e13ffe15 	stw	r4,-8(fp)
  80dd9c:	2805883a 	mov	r2,r5
  80dda0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80dda4:	e0bffe17 	ldw	r2,-8(fp)
  80dda8:	10800017 	ldw	r2,0(r2)
  80ddac:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80ddb0:	008003f4 	movhi	r2,15
  80ddb4:	10909004 	addi	r2,r2,16960
  80ddb8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80ddbc:	e0bffe17 	ldw	r2,-8(fp)
  80ddc0:	10800803 	ldbu	r2,32(r2)
  80ddc4:	10803fcc 	andi	r2,r2,255
  80ddc8:	1080201c 	xori	r2,r2,128
  80ddcc:	10bfe004 	addi	r2,r2,-128
  80ddd0:	10000126 	beq	r2,zero,80ddd8 <lcd_write_command+0x50>
    return;
  80ddd4:	00001406 	br	80de28 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80ddd8:	00000906 	br	80de00 <lcd_write_command+0x78>
    if (--i == 0)
  80dddc:	e0bffc17 	ldw	r2,-16(fp)
  80dde0:	10bfffc4 	addi	r2,r2,-1
  80dde4:	e0bffc15 	stw	r2,-16(fp)
  80dde8:	e0bffc17 	ldw	r2,-16(fp)
  80ddec:	1000041e 	bne	r2,zero,80de00 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80ddf0:	e0bffe17 	ldw	r2,-8(fp)
  80ddf4:	00c00044 	movi	r3,1
  80ddf8:	10c00805 	stb	r3,32(r2)
      return;
  80ddfc:	00000a06 	br	80de28 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80de00:	e0bffd17 	ldw	r2,-12(fp)
  80de04:	10800104 	addi	r2,r2,4
  80de08:	10800037 	ldwio	r2,0(r2)
  80de0c:	1080200c 	andi	r2,r2,128
  80de10:	103ff21e 	bne	r2,zero,80dddc <__alt_data_end+0xff80dddc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80de14:	01001904 	movi	r4,100
  80de18:	08100940 	call	810094 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80de1c:	e0bffd17 	ldw	r2,-12(fp)
  80de20:	e0ffff03 	ldbu	r3,-4(fp)
  80de24:	10c00035 	stwio	r3,0(r2)
}
  80de28:	e037883a 	mov	sp,fp
  80de2c:	dfc00117 	ldw	ra,4(sp)
  80de30:	df000017 	ldw	fp,0(sp)
  80de34:	dec00204 	addi	sp,sp,8
  80de38:	f800283a 	ret

0080de3c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80de3c:	defffa04 	addi	sp,sp,-24
  80de40:	dfc00515 	stw	ra,20(sp)
  80de44:	df000415 	stw	fp,16(sp)
  80de48:	df000404 	addi	fp,sp,16
  80de4c:	e13ffe15 	stw	r4,-8(fp)
  80de50:	2805883a 	mov	r2,r5
  80de54:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80de58:	e0bffe17 	ldw	r2,-8(fp)
  80de5c:	10800017 	ldw	r2,0(r2)
  80de60:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80de64:	008003f4 	movhi	r2,15
  80de68:	10909004 	addi	r2,r2,16960
  80de6c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80de70:	e0bffe17 	ldw	r2,-8(fp)
  80de74:	10800803 	ldbu	r2,32(r2)
  80de78:	10803fcc 	andi	r2,r2,255
  80de7c:	1080201c 	xori	r2,r2,128
  80de80:	10bfe004 	addi	r2,r2,-128
  80de84:	10000126 	beq	r2,zero,80de8c <lcd_write_data+0x50>
    return;
  80de88:	00001c06 	br	80defc <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80de8c:	00000906 	br	80deb4 <lcd_write_data+0x78>
    if (--i == 0)
  80de90:	e0bffc17 	ldw	r2,-16(fp)
  80de94:	10bfffc4 	addi	r2,r2,-1
  80de98:	e0bffc15 	stw	r2,-16(fp)
  80de9c:	e0bffc17 	ldw	r2,-16(fp)
  80dea0:	1000041e 	bne	r2,zero,80deb4 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80dea4:	e0bffe17 	ldw	r2,-8(fp)
  80dea8:	00c00044 	movi	r3,1
  80deac:	10c00805 	stb	r3,32(r2)
      return;
  80deb0:	00001206 	br	80defc <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80deb4:	e0bffd17 	ldw	r2,-12(fp)
  80deb8:	10800104 	addi	r2,r2,4
  80debc:	10800037 	ldwio	r2,0(r2)
  80dec0:	1080200c 	andi	r2,r2,128
  80dec4:	103ff21e 	bne	r2,zero,80de90 <__alt_data_end+0xff80de90>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80dec8:	01001904 	movi	r4,100
  80decc:	08100940 	call	810094 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80ded0:	e0bffd17 	ldw	r2,-12(fp)
  80ded4:	10800204 	addi	r2,r2,8
  80ded8:	1007883a 	mov	r3,r2
  80dedc:	e0bfff03 	ldbu	r2,-4(fp)
  80dee0:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80dee4:	e0bffe17 	ldw	r2,-8(fp)
  80dee8:	108008c3 	ldbu	r2,35(r2)
  80deec:	10800044 	addi	r2,r2,1
  80def0:	1007883a 	mov	r3,r2
  80def4:	e0bffe17 	ldw	r2,-8(fp)
  80def8:	10c008c5 	stb	r3,35(r2)
}
  80defc:	e037883a 	mov	sp,fp
  80df00:	dfc00117 	ldw	ra,4(sp)
  80df04:	df000017 	ldw	fp,0(sp)
  80df08:	dec00204 	addi	sp,sp,8
  80df0c:	f800283a 	ret

0080df10 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80df10:	defffc04 	addi	sp,sp,-16
  80df14:	dfc00315 	stw	ra,12(sp)
  80df18:	df000215 	stw	fp,8(sp)
  80df1c:	df000204 	addi	fp,sp,8
  80df20:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80df24:	e13fff17 	ldw	r4,-4(fp)
  80df28:	01400044 	movi	r5,1
  80df2c:	080dd880 	call	80dd88 <lcd_write_command>

  sp->x = 0;
  80df30:	e0bfff17 	ldw	r2,-4(fp)
  80df34:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80df38:	e0bfff17 	ldw	r2,-4(fp)
  80df3c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80df40:	e0bfff17 	ldw	r2,-4(fp)
  80df44:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80df48:	e03ffe15 	stw	zero,-8(fp)
  80df4c:	00001b06 	br	80dfbc <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80df50:	e0bffe17 	ldw	r2,-8(fp)
  80df54:	108018e4 	muli	r2,r2,99
  80df58:	10801004 	addi	r2,r2,64
  80df5c:	e0ffff17 	ldw	r3,-4(fp)
  80df60:	1885883a 	add	r2,r3,r2
  80df64:	1009883a 	mov	r4,r2
  80df68:	01400804 	movi	r5,32
  80df6c:	01801444 	movi	r6,81
  80df70:	08058c40 	call	8058c4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80df74:	e0bffe17 	ldw	r2,-8(fp)
  80df78:	108018e4 	muli	r2,r2,99
  80df7c:	10800c04 	addi	r2,r2,48
  80df80:	e0ffff17 	ldw	r3,-4(fp)
  80df84:	1885883a 	add	r2,r3,r2
  80df88:	1009883a 	mov	r4,r2
  80df8c:	01400804 	movi	r5,32
  80df90:	01800404 	movi	r6,16
  80df94:	08058c40 	call	8058c4 <memset>
    sp->line[y].width = 0;
  80df98:	e0ffff17 	ldw	r3,-4(fp)
  80df9c:	e0bffe17 	ldw	r2,-8(fp)
  80dfa0:	108018e4 	muli	r2,r2,99
  80dfa4:	10802404 	addi	r2,r2,144
  80dfa8:	1885883a 	add	r2,r3,r2
  80dfac:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dfb0:	e0bffe17 	ldw	r2,-8(fp)
  80dfb4:	10800044 	addi	r2,r2,1
  80dfb8:	e0bffe15 	stw	r2,-8(fp)
  80dfbc:	e0bffe17 	ldw	r2,-8(fp)
  80dfc0:	10800090 	cmplti	r2,r2,2
  80dfc4:	103fe21e 	bne	r2,zero,80df50 <__alt_data_end+0xff80df50>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80dfc8:	e037883a 	mov	sp,fp
  80dfcc:	dfc00117 	ldw	ra,4(sp)
  80dfd0:	df000017 	ldw	fp,0(sp)
  80dfd4:	dec00204 	addi	sp,sp,8
  80dfd8:	f800283a 	ret

0080dfdc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80dfdc:	defff704 	addi	sp,sp,-36
  80dfe0:	dfc00815 	stw	ra,32(sp)
  80dfe4:	df000715 	stw	fp,28(sp)
  80dfe8:	df000704 	addi	fp,sp,28
  80dfec:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80dff0:	e0bfff17 	ldw	r2,-4(fp)
  80dff4:	10800943 	ldbu	r2,37(r2)
  80dff8:	10803fcc 	andi	r2,r2,255
  80dffc:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e000:	e03ff915 	stw	zero,-28(fp)
  80e004:	00006706 	br	80e1a4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80e008:	e0ffff17 	ldw	r3,-4(fp)
  80e00c:	e0bff917 	ldw	r2,-28(fp)
  80e010:	108018e4 	muli	r2,r2,99
  80e014:	10802404 	addi	r2,r2,144
  80e018:	1885883a 	add	r2,r3,r2
  80e01c:	10800043 	ldbu	r2,1(r2)
  80e020:	10803fcc 	andi	r2,r2,255
  80e024:	1080201c 	xori	r2,r2,128
  80e028:	10bfe004 	addi	r2,r2,-128
  80e02c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80e030:	e0ffff17 	ldw	r3,-4(fp)
  80e034:	e0bff917 	ldw	r2,-28(fp)
  80e038:	108018e4 	muli	r2,r2,99
  80e03c:	10802404 	addi	r2,r2,144
  80e040:	1885883a 	add	r2,r3,r2
  80e044:	10800083 	ldbu	r2,2(r2)
  80e048:	10c03fcc 	andi	r3,r2,255
  80e04c:	e0bffc17 	ldw	r2,-16(fp)
  80e050:	1885383a 	mul	r2,r3,r2
  80e054:	1005d23a 	srai	r2,r2,8
  80e058:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80e05c:	e0fffb17 	ldw	r3,-20(fp)
  80e060:	e0bffd17 	ldw	r2,-12(fp)
  80e064:	18800116 	blt	r3,r2,80e06c <lcd_repaint_screen+0x90>
      offset = 0;
  80e068:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80e06c:	e03ffa15 	stw	zero,-24(fp)
  80e070:	00004606 	br	80e18c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80e074:	e0fffa17 	ldw	r3,-24(fp)
  80e078:	e0bffb17 	ldw	r2,-20(fp)
  80e07c:	1885883a 	add	r2,r3,r2
  80e080:	1009883a 	mov	r4,r2
  80e084:	e17ffd17 	ldw	r5,-12(fp)
  80e088:	080a2180 	call	80a218 <__modsi3>
  80e08c:	1009883a 	mov	r4,r2
  80e090:	e0ffff17 	ldw	r3,-4(fp)
  80e094:	e0bff917 	ldw	r2,-28(fp)
  80e098:	108018e4 	muli	r2,r2,99
  80e09c:	1885883a 	add	r2,r3,r2
  80e0a0:	1105883a 	add	r2,r2,r4
  80e0a4:	10801004 	addi	r2,r2,64
  80e0a8:	10800003 	ldbu	r2,0(r2)
  80e0ac:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80e0b0:	e0ffff17 	ldw	r3,-4(fp)
  80e0b4:	e0bff917 	ldw	r2,-28(fp)
  80e0b8:	108018e4 	muli	r2,r2,99
  80e0bc:	1887883a 	add	r3,r3,r2
  80e0c0:	e0bffa17 	ldw	r2,-24(fp)
  80e0c4:	1885883a 	add	r2,r3,r2
  80e0c8:	10800c04 	addi	r2,r2,48
  80e0cc:	10800003 	ldbu	r2,0(r2)
  80e0d0:	10c03fcc 	andi	r3,r2,255
  80e0d4:	18c0201c 	xori	r3,r3,128
  80e0d8:	18ffe004 	addi	r3,r3,-128
  80e0dc:	e0bffe07 	ldb	r2,-8(fp)
  80e0e0:	18802726 	beq	r3,r2,80e180 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80e0e4:	e0fff917 	ldw	r3,-28(fp)
  80e0e8:	d0a00d04 	addi	r2,gp,-32716
  80e0ec:	1885883a 	add	r2,r3,r2
  80e0f0:	10800003 	ldbu	r2,0(r2)
  80e0f4:	1007883a 	mov	r3,r2
  80e0f8:	e0bffa17 	ldw	r2,-24(fp)
  80e0fc:	1885883a 	add	r2,r3,r2
  80e100:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80e104:	e0fffe43 	ldbu	r3,-7(fp)
  80e108:	e0bfff17 	ldw	r2,-4(fp)
  80e10c:	108008c3 	ldbu	r2,35(r2)
  80e110:	10803fcc 	andi	r2,r2,255
  80e114:	1080201c 	xori	r2,r2,128
  80e118:	10bfe004 	addi	r2,r2,-128
  80e11c:	18800a26 	beq	r3,r2,80e148 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80e120:	e0fffe43 	ldbu	r3,-7(fp)
  80e124:	00bfe004 	movi	r2,-128
  80e128:	1884b03a 	or	r2,r3,r2
  80e12c:	10803fcc 	andi	r2,r2,255
  80e130:	e13fff17 	ldw	r4,-4(fp)
  80e134:	100b883a 	mov	r5,r2
  80e138:	080dd880 	call	80dd88 <lcd_write_command>
          sp->address = address;
  80e13c:	e0fffe43 	ldbu	r3,-7(fp)
  80e140:	e0bfff17 	ldw	r2,-4(fp)
  80e144:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80e148:	e0bffe03 	ldbu	r2,-8(fp)
  80e14c:	10803fcc 	andi	r2,r2,255
  80e150:	e13fff17 	ldw	r4,-4(fp)
  80e154:	100b883a 	mov	r5,r2
  80e158:	080de3c0 	call	80de3c <lcd_write_data>
        sp->line[y].visible[x] = c;
  80e15c:	e0ffff17 	ldw	r3,-4(fp)
  80e160:	e0bff917 	ldw	r2,-28(fp)
  80e164:	108018e4 	muli	r2,r2,99
  80e168:	1887883a 	add	r3,r3,r2
  80e16c:	e0bffa17 	ldw	r2,-24(fp)
  80e170:	1885883a 	add	r2,r3,r2
  80e174:	10800c04 	addi	r2,r2,48
  80e178:	e0fffe03 	ldbu	r3,-8(fp)
  80e17c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80e180:	e0bffa17 	ldw	r2,-24(fp)
  80e184:	10800044 	addi	r2,r2,1
  80e188:	e0bffa15 	stw	r2,-24(fp)
  80e18c:	e0bffa17 	ldw	r2,-24(fp)
  80e190:	10800410 	cmplti	r2,r2,16
  80e194:	103fb71e 	bne	r2,zero,80e074 <__alt_data_end+0xff80e074>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e198:	e0bff917 	ldw	r2,-28(fp)
  80e19c:	10800044 	addi	r2,r2,1
  80e1a0:	e0bff915 	stw	r2,-28(fp)
  80e1a4:	e0bff917 	ldw	r2,-28(fp)
  80e1a8:	10800090 	cmplti	r2,r2,2
  80e1ac:	103f961e 	bne	r2,zero,80e008 <__alt_data_end+0xff80e008>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80e1b0:	e037883a 	mov	sp,fp
  80e1b4:	dfc00117 	ldw	ra,4(sp)
  80e1b8:	df000017 	ldw	fp,0(sp)
  80e1bc:	dec00204 	addi	sp,sp,8
  80e1c0:	f800283a 	ret

0080e1c4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80e1c4:	defffc04 	addi	sp,sp,-16
  80e1c8:	dfc00315 	stw	ra,12(sp)
  80e1cc:	df000215 	stw	fp,8(sp)
  80e1d0:	df000204 	addi	fp,sp,8
  80e1d4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e1d8:	e03ffe15 	stw	zero,-8(fp)
  80e1dc:	00001d06 	br	80e254 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80e1e0:	e0bffe17 	ldw	r2,-8(fp)
  80e1e4:	00800f16 	blt	zero,r2,80e224 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80e1e8:	e0bffe17 	ldw	r2,-8(fp)
  80e1ec:	108018e4 	muli	r2,r2,99
  80e1f0:	10801004 	addi	r2,r2,64
  80e1f4:	e0ffff17 	ldw	r3,-4(fp)
  80e1f8:	1889883a 	add	r4,r3,r2
  80e1fc:	e0bffe17 	ldw	r2,-8(fp)
  80e200:	10800044 	addi	r2,r2,1
  80e204:	108018e4 	muli	r2,r2,99
  80e208:	10801004 	addi	r2,r2,64
  80e20c:	e0ffff17 	ldw	r3,-4(fp)
  80e210:	1885883a 	add	r2,r3,r2
  80e214:	100b883a 	mov	r5,r2
  80e218:	01801404 	movi	r6,80
  80e21c:	080578c0 	call	80578c <memcpy>
  80e220:	00000906 	br	80e248 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80e224:	e0bffe17 	ldw	r2,-8(fp)
  80e228:	108018e4 	muli	r2,r2,99
  80e22c:	10801004 	addi	r2,r2,64
  80e230:	e0ffff17 	ldw	r3,-4(fp)
  80e234:	1885883a 	add	r2,r3,r2
  80e238:	1009883a 	mov	r4,r2
  80e23c:	01400804 	movi	r5,32
  80e240:	01801404 	movi	r6,80
  80e244:	08058c40 	call	8058c4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e248:	e0bffe17 	ldw	r2,-8(fp)
  80e24c:	10800044 	addi	r2,r2,1
  80e250:	e0bffe15 	stw	r2,-8(fp)
  80e254:	e0bffe17 	ldw	r2,-8(fp)
  80e258:	10800090 	cmplti	r2,r2,2
  80e25c:	103fe01e 	bne	r2,zero,80e1e0 <__alt_data_end+0xff80e1e0>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80e260:	e0bfff17 	ldw	r2,-4(fp)
  80e264:	10800883 	ldbu	r2,34(r2)
  80e268:	10bfffc4 	addi	r2,r2,-1
  80e26c:	1007883a 	mov	r3,r2
  80e270:	e0bfff17 	ldw	r2,-4(fp)
  80e274:	10c00885 	stb	r3,34(r2)
}
  80e278:	e037883a 	mov	sp,fp
  80e27c:	dfc00117 	ldw	ra,4(sp)
  80e280:	df000017 	ldw	fp,0(sp)
  80e284:	dec00204 	addi	sp,sp,8
  80e288:	f800283a 	ret

0080e28c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80e28c:	defff904 	addi	sp,sp,-28
  80e290:	dfc00615 	stw	ra,24(sp)
  80e294:	df000515 	stw	fp,20(sp)
  80e298:	df000504 	addi	fp,sp,20
  80e29c:	e13ffe15 	stw	r4,-8(fp)
  80e2a0:	2805883a 	mov	r2,r5
  80e2a4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80e2a8:	e03ffb15 	stw	zero,-20(fp)
  80e2ac:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80e2b0:	e0bffe17 	ldw	r2,-8(fp)
  80e2b4:	10800a03 	ldbu	r2,40(r2)
  80e2b8:	10803fcc 	andi	r2,r2,255
  80e2bc:	1080201c 	xori	r2,r2,128
  80e2c0:	10bfe004 	addi	r2,r2,-128
  80e2c4:	108016d8 	cmpnei	r2,r2,91
  80e2c8:	1000441e 	bne	r2,zero,80e3dc <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  80e2cc:	e0bffe17 	ldw	r2,-8(fp)
  80e2d0:	10800a44 	addi	r2,r2,41
  80e2d4:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80e2d8:	00000c06 	br	80e30c <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80e2dc:	e0bffb17 	ldw	r2,-20(fp)
  80e2e0:	10c002a4 	muli	r3,r2,10
  80e2e4:	e0bffd17 	ldw	r2,-12(fp)
  80e2e8:	11000044 	addi	r4,r2,1
  80e2ec:	e13ffd15 	stw	r4,-12(fp)
  80e2f0:	10800003 	ldbu	r2,0(r2)
  80e2f4:	10803fcc 	andi	r2,r2,255
  80e2f8:	1080201c 	xori	r2,r2,128
  80e2fc:	10bfe004 	addi	r2,r2,-128
  80e300:	10bff404 	addi	r2,r2,-48
  80e304:	1885883a 	add	r2,r3,r2
  80e308:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80e30c:	00802074 	movhi	r2,129
  80e310:	108b2c04 	addi	r2,r2,11440
  80e314:	10c00017 	ldw	r3,0(r2)
  80e318:	e0bffd17 	ldw	r2,-12(fp)
  80e31c:	10800003 	ldbu	r2,0(r2)
  80e320:	10803fcc 	andi	r2,r2,255
  80e324:	1080201c 	xori	r2,r2,128
  80e328:	10bfe004 	addi	r2,r2,-128
  80e32c:	10800044 	addi	r2,r2,1
  80e330:	1885883a 	add	r2,r3,r2
  80e334:	10800003 	ldbu	r2,0(r2)
  80e338:	10803fcc 	andi	r2,r2,255
  80e33c:	1080010c 	andi	r2,r2,4
  80e340:	103fe61e 	bne	r2,zero,80e2dc <__alt_data_end+0xff80e2dc>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80e344:	e0bffd17 	ldw	r2,-12(fp)
  80e348:	10800003 	ldbu	r2,0(r2)
  80e34c:	10803fcc 	andi	r2,r2,255
  80e350:	1080201c 	xori	r2,r2,128
  80e354:	10bfe004 	addi	r2,r2,-128
  80e358:	10800ed8 	cmpnei	r2,r2,59
  80e35c:	10001e1e 	bne	r2,zero,80e3d8 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80e360:	e0bffd17 	ldw	r2,-12(fp)
  80e364:	10800044 	addi	r2,r2,1
  80e368:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80e36c:	00000c06 	br	80e3a0 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80e370:	e0bffc17 	ldw	r2,-16(fp)
  80e374:	10c002a4 	muli	r3,r2,10
  80e378:	e0bffd17 	ldw	r2,-12(fp)
  80e37c:	11000044 	addi	r4,r2,1
  80e380:	e13ffd15 	stw	r4,-12(fp)
  80e384:	10800003 	ldbu	r2,0(r2)
  80e388:	10803fcc 	andi	r2,r2,255
  80e38c:	1080201c 	xori	r2,r2,128
  80e390:	10bfe004 	addi	r2,r2,-128
  80e394:	10bff404 	addi	r2,r2,-48
  80e398:	1885883a 	add	r2,r3,r2
  80e39c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80e3a0:	00802074 	movhi	r2,129
  80e3a4:	108b2c04 	addi	r2,r2,11440
  80e3a8:	10c00017 	ldw	r3,0(r2)
  80e3ac:	e0bffd17 	ldw	r2,-12(fp)
  80e3b0:	10800003 	ldbu	r2,0(r2)
  80e3b4:	10803fcc 	andi	r2,r2,255
  80e3b8:	1080201c 	xori	r2,r2,128
  80e3bc:	10bfe004 	addi	r2,r2,-128
  80e3c0:	10800044 	addi	r2,r2,1
  80e3c4:	1885883a 	add	r2,r3,r2
  80e3c8:	10800003 	ldbu	r2,0(r2)
  80e3cc:	10803fcc 	andi	r2,r2,255
  80e3d0:	1080010c 	andi	r2,r2,4
  80e3d4:	103fe61e 	bne	r2,zero,80e370 <__alt_data_end+0xff80e370>
  80e3d8:	00000206 	br	80e3e4 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80e3dc:	00bfffc4 	movi	r2,-1
  80e3e0:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80e3e4:	e0bfff07 	ldb	r2,-4(fp)
  80e3e8:	10c012a0 	cmpeqi	r3,r2,74
  80e3ec:	1800281e 	bne	r3,zero,80e490 <lcd_handle_escape+0x204>
  80e3f0:	10c012c8 	cmpgei	r3,r2,75
  80e3f4:	1800031e 	bne	r3,zero,80e404 <lcd_handle_escape+0x178>
  80e3f8:	10801220 	cmpeqi	r2,r2,72
  80e3fc:	1000051e 	bne	r2,zero,80e414 <lcd_handle_escape+0x188>
  80e400:	00004506 	br	80e518 <lcd_handle_escape+0x28c>
  80e404:	10c012e0 	cmpeqi	r3,r2,75
  80e408:	1800281e 	bne	r3,zero,80e4ac <lcd_handle_escape+0x220>
  80e40c:	108019a0 	cmpeqi	r2,r2,102
  80e410:	10004126 	beq	r2,zero,80e518 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80e414:	e0bffc17 	ldw	r2,-16(fp)
  80e418:	0080050e 	bge	zero,r2,80e430 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  80e41c:	e0bffc17 	ldw	r2,-16(fp)
  80e420:	10bfffc4 	addi	r2,r2,-1
  80e424:	1007883a 	mov	r3,r2
  80e428:	e0bffe17 	ldw	r2,-8(fp)
  80e42c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80e430:	e0bffb17 	ldw	r2,-20(fp)
  80e434:	0080150e 	bge	zero,r2,80e48c <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  80e438:	e0bffb17 	ldw	r2,-20(fp)
  80e43c:	10bfffc4 	addi	r2,r2,-1
  80e440:	1007883a 	mov	r3,r2
  80e444:	e0bffe17 	ldw	r2,-8(fp)
  80e448:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80e44c:	e0bffe17 	ldw	r2,-8(fp)
  80e450:	10800883 	ldbu	r2,34(r2)
  80e454:	10803fcc 	andi	r2,r2,255
  80e458:	10800170 	cmpltui	r2,r2,5
  80e45c:	1000031e 	bne	r2,zero,80e46c <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  80e460:	e0bffe17 	ldw	r2,-8(fp)
  80e464:	00c00104 	movi	r3,4
  80e468:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80e46c:	00000206 	br	80e478 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  80e470:	e13ffe17 	ldw	r4,-8(fp)
  80e474:	080e1c40 	call	80e1c4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80e478:	e0bffe17 	ldw	r2,-8(fp)
  80e47c:	10800883 	ldbu	r2,34(r2)
  80e480:	10803fcc 	andi	r2,r2,255
  80e484:	108000e8 	cmpgeui	r2,r2,3
  80e488:	103ff91e 	bne	r2,zero,80e470 <__alt_data_end+0xff80e470>
        lcd_scroll_up(sp);
    }
    break;
  80e48c:	00002206 	br	80e518 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80e490:	e0bffb17 	ldw	r2,-20(fp)
  80e494:	10800098 	cmpnei	r2,r2,2
  80e498:	1000031e 	bne	r2,zero,80e4a8 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  80e49c:	e13ffe17 	ldw	r4,-8(fp)
  80e4a0:	080df100 	call	80df10 <lcd_clear_screen>
    break;
  80e4a4:	00001c06 	br	80e518 <lcd_handle_escape+0x28c>
  80e4a8:	00001b06 	br	80e518 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80e4ac:	e0bffb17 	ldw	r2,-20(fp)
  80e4b0:	00801816 	blt	zero,r2,80e514 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80e4b4:	e0bffe17 	ldw	r2,-8(fp)
  80e4b8:	10800843 	ldbu	r2,33(r2)
  80e4bc:	10803fcc 	andi	r2,r2,255
  80e4c0:	10801428 	cmpgeui	r2,r2,80
  80e4c4:	1000131e 	bne	r2,zero,80e514 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80e4c8:	e0bffe17 	ldw	r2,-8(fp)
  80e4cc:	10800883 	ldbu	r2,34(r2)
  80e4d0:	10803fcc 	andi	r2,r2,255
  80e4d4:	108018e4 	muli	r2,r2,99
  80e4d8:	10801004 	addi	r2,r2,64
  80e4dc:	e0fffe17 	ldw	r3,-8(fp)
  80e4e0:	1887883a 	add	r3,r3,r2
  80e4e4:	e0bffe17 	ldw	r2,-8(fp)
  80e4e8:	10800843 	ldbu	r2,33(r2)
  80e4ec:	10803fcc 	andi	r2,r2,255
  80e4f0:	1889883a 	add	r4,r3,r2
  80e4f4:	e0bffe17 	ldw	r2,-8(fp)
  80e4f8:	10800843 	ldbu	r2,33(r2)
  80e4fc:	10803fcc 	andi	r2,r2,255
  80e500:	00c01404 	movi	r3,80
  80e504:	1885c83a 	sub	r2,r3,r2
  80e508:	01400804 	movi	r5,32
  80e50c:	100d883a 	mov	r6,r2
  80e510:	08058c40 	call	8058c4 <memset>
    }
    break;
  80e514:	0001883a 	nop
  }
}
  80e518:	e037883a 	mov	sp,fp
  80e51c:	dfc00117 	ldw	ra,4(sp)
  80e520:	df000017 	ldw	fp,0(sp)
  80e524:	dec00204 	addi	sp,sp,8
  80e528:	f800283a 	ret

0080e52c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80e52c:	defff304 	addi	sp,sp,-52
  80e530:	dfc00c15 	stw	ra,48(sp)
  80e534:	df000b15 	stw	fp,44(sp)
  80e538:	df000b04 	addi	fp,sp,44
  80e53c:	e13ffc15 	stw	r4,-16(fp)
  80e540:	e17ffd15 	stw	r5,-12(fp)
  80e544:	e1bffe15 	stw	r6,-8(fp)
  80e548:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80e54c:	e0bffe17 	ldw	r2,-8(fp)
  80e550:	e0fffd17 	ldw	r3,-12(fp)
  80e554:	1885883a 	add	r2,r3,r2
  80e558:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80e55c:	e0bffc17 	ldw	r2,-16(fp)
  80e560:	00c00044 	movi	r3,1
  80e564:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80e568:	00009e06 	br	80e7e4 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  80e56c:	e0bffd17 	ldw	r2,-12(fp)
  80e570:	10800003 	ldbu	r2,0(r2)
  80e574:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80e578:	e0bffc17 	ldw	r2,-16(fp)
  80e57c:	10800903 	ldbu	r2,36(r2)
  80e580:	10803fcc 	andi	r2,r2,255
  80e584:	1080201c 	xori	r2,r2,128
  80e588:	10bfe004 	addi	r2,r2,-128
  80e58c:	10003a16 	blt	r2,zero,80e678 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  80e590:	e0bffc17 	ldw	r2,-16(fp)
  80e594:	10800903 	ldbu	r2,36(r2)
  80e598:	10803fcc 	andi	r2,r2,255
  80e59c:	1080201c 	xori	r2,r2,128
  80e5a0:	10bfe004 	addi	r2,r2,-128
  80e5a4:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80e5a8:	e0bffa17 	ldw	r2,-24(fp)
  80e5ac:	1000031e 	bne	r2,zero,80e5bc <altera_avalon_lcd_16207_write+0x90>
  80e5b0:	e0bff907 	ldb	r2,-28(fp)
  80e5b4:	108016d8 	cmpnei	r2,r2,91
  80e5b8:	10000f1e 	bne	r2,zero,80e5f8 <altera_avalon_lcd_16207_write+0xcc>
  80e5bc:	e0bffa17 	ldw	r2,-24(fp)
  80e5c0:	10001a26 	beq	r2,zero,80e62c <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80e5c4:	00802074 	movhi	r2,129
  80e5c8:	108b2c04 	addi	r2,r2,11440
  80e5cc:	10c00017 	ldw	r3,0(r2)
  80e5d0:	e0bff907 	ldb	r2,-28(fp)
  80e5d4:	10800044 	addi	r2,r2,1
  80e5d8:	1885883a 	add	r2,r3,r2
  80e5dc:	10800003 	ldbu	r2,0(r2)
  80e5e0:	10803fcc 	andi	r2,r2,255
  80e5e4:	1080010c 	andi	r2,r2,4
  80e5e8:	1000101e 	bne	r2,zero,80e62c <altera_avalon_lcd_16207_write+0x100>
  80e5ec:	e0bff907 	ldb	r2,-28(fp)
  80e5f0:	10800ee0 	cmpeqi	r2,r2,59
  80e5f4:	10000d1e 	bne	r2,zero,80e62c <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  80e5f8:	e0fffc17 	ldw	r3,-16(fp)
  80e5fc:	e0bffa17 	ldw	r2,-24(fp)
  80e600:	1885883a 	add	r2,r3,r2
  80e604:	10800a04 	addi	r2,r2,40
  80e608:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80e60c:	e0bff907 	ldb	r2,-28(fp)
  80e610:	e13ffc17 	ldw	r4,-16(fp)
  80e614:	100b883a 	mov	r5,r2
  80e618:	080e28c0 	call	80e28c <lcd_handle_escape>

        sp->esccount = -1;
  80e61c:	e0bffc17 	ldw	r2,-16(fp)
  80e620:	00ffffc4 	movi	r3,-1
  80e624:	10c00905 	stb	r3,36(r2)
  80e628:	00001206 	br	80e674 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80e62c:	e0bffc17 	ldw	r2,-16(fp)
  80e630:	10800903 	ldbu	r2,36(r2)
  80e634:	10803fcc 	andi	r2,r2,255
  80e638:	108001e8 	cmpgeui	r2,r2,7
  80e63c:	10000d1e 	bne	r2,zero,80e674 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  80e640:	e0fffc17 	ldw	r3,-16(fp)
  80e644:	e0bffa17 	ldw	r2,-24(fp)
  80e648:	1885883a 	add	r2,r3,r2
  80e64c:	10800a04 	addi	r2,r2,40
  80e650:	e0fff903 	ldbu	r3,-28(fp)
  80e654:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80e658:	e0bffc17 	ldw	r2,-16(fp)
  80e65c:	10800903 	ldbu	r2,36(r2)
  80e660:	10800044 	addi	r2,r2,1
  80e664:	1007883a 	mov	r3,r2
  80e668:	e0bffc17 	ldw	r2,-16(fp)
  80e66c:	10c00905 	stb	r3,36(r2)
  80e670:	00005906 	br	80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
  80e674:	00005806 	br	80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  80e678:	e0bff907 	ldb	r2,-28(fp)
  80e67c:	108006d8 	cmpnei	r2,r2,27
  80e680:	1000031e 	bne	r2,zero,80e690 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  80e684:	e0bffc17 	ldw	r2,-16(fp)
  80e688:	10000905 	stb	zero,36(r2)
  80e68c:	00005206 	br	80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  80e690:	e0bff907 	ldb	r2,-28(fp)
  80e694:	10800358 	cmpnei	r2,r2,13
  80e698:	1000031e 	bne	r2,zero,80e6a8 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  80e69c:	e0bffc17 	ldw	r2,-16(fp)
  80e6a0:	10000845 	stb	zero,33(r2)
  80e6a4:	00004c06 	br	80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  80e6a8:	e0bff907 	ldb	r2,-28(fp)
  80e6ac:	10800298 	cmpnei	r2,r2,10
  80e6b0:	1000101e 	bne	r2,zero,80e6f4 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  80e6b4:	e0bffc17 	ldw	r2,-16(fp)
  80e6b8:	10000845 	stb	zero,33(r2)
      sp->y++;
  80e6bc:	e0bffc17 	ldw	r2,-16(fp)
  80e6c0:	10800883 	ldbu	r2,34(r2)
  80e6c4:	10800044 	addi	r2,r2,1
  80e6c8:	1007883a 	mov	r3,r2
  80e6cc:	e0bffc17 	ldw	r2,-16(fp)
  80e6d0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80e6d4:	e0bffc17 	ldw	r2,-16(fp)
  80e6d8:	10800883 	ldbu	r2,34(r2)
  80e6dc:	10803fcc 	andi	r2,r2,255
  80e6e0:	108000f0 	cmpltui	r2,r2,3
  80e6e4:	10003c1e 	bne	r2,zero,80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  80e6e8:	e13ffc17 	ldw	r4,-16(fp)
  80e6ec:	080e1c40 	call	80e1c4 <lcd_scroll_up>
  80e6f0:	00003906 	br	80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  80e6f4:	e0bff907 	ldb	r2,-28(fp)
  80e6f8:	10800218 	cmpnei	r2,r2,8
  80e6fc:	10000b1e 	bne	r2,zero,80e72c <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  80e700:	e0bffc17 	ldw	r2,-16(fp)
  80e704:	10800843 	ldbu	r2,33(r2)
  80e708:	10803fcc 	andi	r2,r2,255
  80e70c:	10003226 	beq	r2,zero,80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  80e710:	e0bffc17 	ldw	r2,-16(fp)
  80e714:	10800843 	ldbu	r2,33(r2)
  80e718:	10bfffc4 	addi	r2,r2,-1
  80e71c:	1007883a 	mov	r3,r2
  80e720:	e0bffc17 	ldw	r2,-16(fp)
  80e724:	10c00845 	stb	r3,33(r2)
  80e728:	00002b06 	br	80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  80e72c:	00802074 	movhi	r2,129
  80e730:	108b2c04 	addi	r2,r2,11440
  80e734:	10c00017 	ldw	r3,0(r2)
  80e738:	e0bff907 	ldb	r2,-28(fp)
  80e73c:	10800044 	addi	r2,r2,1
  80e740:	1885883a 	add	r2,r3,r2
  80e744:	10800003 	ldbu	r2,0(r2)
  80e748:	10803fcc 	andi	r2,r2,255
  80e74c:	1080201c 	xori	r2,r2,128
  80e750:	10bfe004 	addi	r2,r2,-128
  80e754:	108025cc 	andi	r2,r2,151
  80e758:	10001f26 	beq	r2,zero,80e7d8 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80e75c:	e0bffc17 	ldw	r2,-16(fp)
  80e760:	10800883 	ldbu	r2,34(r2)
  80e764:	10803fcc 	andi	r2,r2,255
  80e768:	108000b0 	cmpltui	r2,r2,2
  80e76c:	1000021e 	bne	r2,zero,80e778 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  80e770:	e13ffc17 	ldw	r4,-16(fp)
  80e774:	080e1c40 	call	80e1c4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80e778:	e0bffc17 	ldw	r2,-16(fp)
  80e77c:	10800843 	ldbu	r2,33(r2)
  80e780:	10803fcc 	andi	r2,r2,255
  80e784:	10801428 	cmpgeui	r2,r2,80
  80e788:	10000d1e 	bne	r2,zero,80e7c0 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  80e78c:	e0bffc17 	ldw	r2,-16(fp)
  80e790:	10800883 	ldbu	r2,34(r2)
  80e794:	10c03fcc 	andi	r3,r2,255
  80e798:	e0bffc17 	ldw	r2,-16(fp)
  80e79c:	10800843 	ldbu	r2,33(r2)
  80e7a0:	10803fcc 	andi	r2,r2,255
  80e7a4:	e13ffc17 	ldw	r4,-16(fp)
  80e7a8:	18c018e4 	muli	r3,r3,99
  80e7ac:	20c7883a 	add	r3,r4,r3
  80e7b0:	1885883a 	add	r2,r3,r2
  80e7b4:	10801004 	addi	r2,r2,64
  80e7b8:	e0fff903 	ldbu	r3,-28(fp)
  80e7bc:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80e7c0:	e0bffc17 	ldw	r2,-16(fp)
  80e7c4:	10800843 	ldbu	r2,33(r2)
  80e7c8:	10800044 	addi	r2,r2,1
  80e7cc:	1007883a 	mov	r3,r2
  80e7d0:	e0bffc17 	ldw	r2,-16(fp)
  80e7d4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80e7d8:	e0bffd17 	ldw	r2,-12(fp)
  80e7dc:	10800044 	addi	r2,r2,1
  80e7e0:	e0bffd15 	stw	r2,-12(fp)
  80e7e4:	e0fffd17 	ldw	r3,-12(fp)
  80e7e8:	e0bff817 	ldw	r2,-32(fp)
  80e7ec:	18bf5f36 	bltu	r3,r2,80e56c <__alt_data_end+0xff80e56c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80e7f0:	00800404 	movi	r2,16
  80e7f4:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e7f8:	e03ff515 	stw	zero,-44(fp)
  80e7fc:	00003606 	br	80e8d8 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80e800:	00801404 	movi	r2,80
  80e804:	e0bff715 	stw	r2,-36(fp)
  80e808:	00001206 	br	80e854 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  80e80c:	e0bff717 	ldw	r2,-36(fp)
  80e810:	10bfffc4 	addi	r2,r2,-1
  80e814:	e13ffc17 	ldw	r4,-16(fp)
  80e818:	e0fff517 	ldw	r3,-44(fp)
  80e81c:	18c018e4 	muli	r3,r3,99
  80e820:	20c7883a 	add	r3,r4,r3
  80e824:	1885883a 	add	r2,r3,r2
  80e828:	10801004 	addi	r2,r2,64
  80e82c:	10800003 	ldbu	r2,0(r2)
  80e830:	10803fcc 	andi	r2,r2,255
  80e834:	1080201c 	xori	r2,r2,128
  80e838:	10bfe004 	addi	r2,r2,-128
  80e83c:	10800820 	cmpeqi	r2,r2,32
  80e840:	1000011e 	bne	r2,zero,80e848 <altera_avalon_lcd_16207_write+0x31c>
        break;
  80e844:	00000506 	br	80e85c <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80e848:	e0bff717 	ldw	r2,-36(fp)
  80e84c:	10bfffc4 	addi	r2,r2,-1
  80e850:	e0bff715 	stw	r2,-36(fp)
  80e854:	e0bff717 	ldw	r2,-36(fp)
  80e858:	00bfec16 	blt	zero,r2,80e80c <__alt_data_end+0xff80e80c>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80e85c:	e0bff717 	ldw	r2,-36(fp)
  80e860:	10800448 	cmpgei	r2,r2,17
  80e864:	1000031e 	bne	r2,zero,80e874 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  80e868:	00800404 	movi	r2,16
  80e86c:	e0bff715 	stw	r2,-36(fp)
  80e870:	00000306 	br	80e880 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  80e874:	e0bff717 	ldw	r2,-36(fp)
  80e878:	10800044 	addi	r2,r2,1
  80e87c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80e880:	e0bff717 	ldw	r2,-36(fp)
  80e884:	1009883a 	mov	r4,r2
  80e888:	e0fffc17 	ldw	r3,-16(fp)
  80e88c:	e0bff517 	ldw	r2,-44(fp)
  80e890:	108018e4 	muli	r2,r2,99
  80e894:	10802404 	addi	r2,r2,144
  80e898:	1885883a 	add	r2,r3,r2
  80e89c:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  80e8a0:	e0fff617 	ldw	r3,-40(fp)
  80e8a4:	e0bff717 	ldw	r2,-36(fp)
  80e8a8:	1880020e 	bge	r3,r2,80e8b4 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  80e8ac:	e0bff717 	ldw	r2,-36(fp)
  80e8b0:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80e8b4:	e0fffc17 	ldw	r3,-16(fp)
  80e8b8:	e0bff517 	ldw	r2,-44(fp)
  80e8bc:	108018e4 	muli	r2,r2,99
  80e8c0:	10802404 	addi	r2,r2,144
  80e8c4:	1885883a 	add	r2,r3,r2
  80e8c8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e8cc:	e0bff517 	ldw	r2,-44(fp)
  80e8d0:	10800044 	addi	r2,r2,1
  80e8d4:	e0bff515 	stw	r2,-44(fp)
  80e8d8:	e0bff517 	ldw	r2,-44(fp)
  80e8dc:	10800090 	cmplti	r2,r2,2
  80e8e0:	103fc71e 	bne	r2,zero,80e800 <__alt_data_end+0xff80e800>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80e8e4:	e0bff617 	ldw	r2,-40(fp)
  80e8e8:	10800448 	cmpgei	r2,r2,17
  80e8ec:	1000031e 	bne	r2,zero,80e8fc <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  80e8f0:	e0bffc17 	ldw	r2,-16(fp)
  80e8f4:	10000985 	stb	zero,38(r2)
  80e8f8:	00002e06 	br	80e9b4 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  80e8fc:	e0bff617 	ldw	r2,-40(fp)
  80e900:	1085883a 	add	r2,r2,r2
  80e904:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80e908:	e0bff617 	ldw	r2,-40(fp)
  80e90c:	1007883a 	mov	r3,r2
  80e910:	e0bffc17 	ldw	r2,-16(fp)
  80e914:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e918:	e03ff515 	stw	zero,-44(fp)
  80e91c:	00002206 	br	80e9a8 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80e920:	e0fffc17 	ldw	r3,-16(fp)
  80e924:	e0bff517 	ldw	r2,-44(fp)
  80e928:	108018e4 	muli	r2,r2,99
  80e92c:	10802404 	addi	r2,r2,144
  80e930:	1885883a 	add	r2,r3,r2
  80e934:	10800043 	ldbu	r2,1(r2)
  80e938:	10803fcc 	andi	r2,r2,255
  80e93c:	1080201c 	xori	r2,r2,128
  80e940:	10bfe004 	addi	r2,r2,-128
  80e944:	10800450 	cmplti	r2,r2,17
  80e948:	1000141e 	bne	r2,zero,80e99c <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80e94c:	e0fffc17 	ldw	r3,-16(fp)
  80e950:	e0bff517 	ldw	r2,-44(fp)
  80e954:	108018e4 	muli	r2,r2,99
  80e958:	10802404 	addi	r2,r2,144
  80e95c:	1885883a 	add	r2,r3,r2
  80e960:	10800043 	ldbu	r2,1(r2)
  80e964:	10803fcc 	andi	r2,r2,255
  80e968:	1080201c 	xori	r2,r2,128
  80e96c:	10bfe004 	addi	r2,r2,-128
  80e970:	1004923a 	slli	r2,r2,8
  80e974:	1009883a 	mov	r4,r2
  80e978:	e17ff617 	ldw	r5,-40(fp)
  80e97c:	080a1c40 	call	80a1c4 <__divsi3>
  80e980:	1009883a 	mov	r4,r2
  80e984:	e0fffc17 	ldw	r3,-16(fp)
  80e988:	e0bff517 	ldw	r2,-44(fp)
  80e98c:	108018e4 	muli	r2,r2,99
  80e990:	10802404 	addi	r2,r2,144
  80e994:	1885883a 	add	r2,r3,r2
  80e998:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e99c:	e0bff517 	ldw	r2,-44(fp)
  80e9a0:	10800044 	addi	r2,r2,1
  80e9a4:	e0bff515 	stw	r2,-44(fp)
  80e9a8:	e0bff517 	ldw	r2,-44(fp)
  80e9ac:	10800090 	cmplti	r2,r2,2
  80e9b0:	103fdb1e 	bne	r2,zero,80e920 <__alt_data_end+0xff80e920>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80e9b4:	e0bffc17 	ldw	r2,-16(fp)
  80e9b8:	10800943 	ldbu	r2,37(r2)
  80e9bc:	10803fcc 	andi	r2,r2,255
  80e9c0:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80e9c4:	e13ffc17 	ldw	r4,-16(fp)
  80e9c8:	080dfdc0 	call	80dfdc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80e9cc:	e0bffc17 	ldw	r2,-16(fp)
  80e9d0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80e9d4:	e0bffc17 	ldw	r2,-16(fp)
  80e9d8:	10800943 	ldbu	r2,37(r2)
  80e9dc:	10c03fcc 	andi	r3,r2,255
  80e9e0:	e0bffb17 	ldw	r2,-20(fp)
  80e9e4:	1880011e 	bne	r3,r2,80e9ec <altera_avalon_lcd_16207_write+0x4c0>
      break;
  80e9e8:	00000406 	br	80e9fc <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80e9ec:	e0bffc17 	ldw	r2,-16(fp)
  80e9f0:	00c00044 	movi	r3,1
  80e9f4:	10c009c5 	stb	r3,39(r2)
  }
  80e9f8:	003fee06 	br	80e9b4 <__alt_data_end+0xff80e9b4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80e9fc:	e0bffe17 	ldw	r2,-8(fp)
}
  80ea00:	e037883a 	mov	sp,fp
  80ea04:	dfc00117 	ldw	ra,4(sp)
  80ea08:	df000017 	ldw	fp,0(sp)
  80ea0c:	dec00204 	addi	sp,sp,8
  80ea10:	f800283a 	ret

0080ea14 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80ea14:	defffc04 	addi	sp,sp,-16
  80ea18:	dfc00315 	stw	ra,12(sp)
  80ea1c:	df000215 	stw	fp,8(sp)
  80ea20:	df000204 	addi	fp,sp,8
  80ea24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80ea28:	e0bfff17 	ldw	r2,-4(fp)
  80ea2c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80ea30:	e0bffe17 	ldw	r2,-8(fp)
  80ea34:	10800943 	ldbu	r2,37(r2)
  80ea38:	10803fcc 	andi	r2,r2,255
  80ea3c:	10c00044 	addi	r3,r2,1
  80ea40:	e0bffe17 	ldw	r2,-8(fp)
  80ea44:	10800983 	ldbu	r2,38(r2)
  80ea48:	10803fcc 	andi	r2,r2,255
  80ea4c:	18800316 	blt	r3,r2,80ea5c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80ea50:	e0bffe17 	ldw	r2,-8(fp)
  80ea54:	10000945 	stb	zero,37(r2)
  80ea58:	00000606 	br	80ea74 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80ea5c:	e0bffe17 	ldw	r2,-8(fp)
  80ea60:	10800943 	ldbu	r2,37(r2)
  80ea64:	10800044 	addi	r2,r2,1
  80ea68:	1007883a 	mov	r3,r2
  80ea6c:	e0bffe17 	ldw	r2,-8(fp)
  80ea70:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80ea74:	e0bffe17 	ldw	r2,-8(fp)
  80ea78:	10800983 	ldbu	r2,38(r2)
  80ea7c:	10803fcc 	andi	r2,r2,255
  80ea80:	10000826 	beq	r2,zero,80eaa4 <alt_lcd_16207_timeout+0x90>
  80ea84:	e0bffe17 	ldw	r2,-8(fp)
  80ea88:	108009c3 	ldbu	r2,39(r2)
  80ea8c:	10803fcc 	andi	r2,r2,255
  80ea90:	1080201c 	xori	r2,r2,128
  80ea94:	10bfe004 	addi	r2,r2,-128
  80ea98:	1000021e 	bne	r2,zero,80eaa4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80ea9c:	e13ffe17 	ldw	r4,-8(fp)
  80eaa0:	080dfdc0 	call	80dfdc <lcd_repaint_screen>

  return sp->period;
  80eaa4:	e0bffe17 	ldw	r2,-8(fp)
  80eaa8:	10800717 	ldw	r2,28(r2)
}
  80eaac:	e037883a 	mov	sp,fp
  80eab0:	dfc00117 	ldw	ra,4(sp)
  80eab4:	df000017 	ldw	fp,0(sp)
  80eab8:	dec00204 	addi	sp,sp,8
  80eabc:	f800283a 	ret

0080eac0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80eac0:	defffc04 	addi	sp,sp,-16
  80eac4:	dfc00315 	stw	ra,12(sp)
  80eac8:	df000215 	stw	fp,8(sp)
  80eacc:	df000204 	addi	fp,sp,8
  80ead0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80ead4:	e0bfff17 	ldw	r2,-4(fp)
  80ead8:	10800017 	ldw	r2,0(r2)
  80eadc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80eae0:	e0bfff17 	ldw	r2,-4(fp)
  80eae4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80eae8:	010ea604 	movi	r4,15000
  80eaec:	08100940 	call	810094 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80eaf0:	e0bffe17 	ldw	r2,-8(fp)
  80eaf4:	00c00c04 	movi	r3,48
  80eaf8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80eafc:	01040104 	movi	r4,4100
  80eb00:	08100940 	call	810094 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80eb04:	e0bffe17 	ldw	r2,-8(fp)
  80eb08:	00c00c04 	movi	r3,48
  80eb0c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80eb10:	0100fa04 	movi	r4,1000
  80eb14:	08100940 	call	810094 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80eb18:	e0bffe17 	ldw	r2,-8(fp)
  80eb1c:	00c00c04 	movi	r3,48
  80eb20:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80eb24:	e13fff17 	ldw	r4,-4(fp)
  80eb28:	01400e04 	movi	r5,56
  80eb2c:	080dd880 	call	80dd88 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80eb30:	e13fff17 	ldw	r4,-4(fp)
  80eb34:	01400204 	movi	r5,8
  80eb38:	080dd880 	call	80dd88 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80eb3c:	e13fff17 	ldw	r4,-4(fp)
  80eb40:	080df100 	call	80df10 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80eb44:	e13fff17 	ldw	r4,-4(fp)
  80eb48:	01400184 	movi	r5,6
  80eb4c:	080dd880 	call	80dd88 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80eb50:	e13fff17 	ldw	r4,-4(fp)
  80eb54:	01400304 	movi	r5,12
  80eb58:	080dd880 	call	80dd88 <lcd_write_command>

  sp->esccount = -1;
  80eb5c:	e0bfff17 	ldw	r2,-4(fp)
  80eb60:	00ffffc4 	movi	r3,-1
  80eb64:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80eb68:	e0bfff17 	ldw	r2,-4(fp)
  80eb6c:	10800a04 	addi	r2,r2,40
  80eb70:	1009883a 	mov	r4,r2
  80eb74:	000b883a 	mov	r5,zero
  80eb78:	01800204 	movi	r6,8
  80eb7c:	08058c40 	call	8058c4 <memset>

  sp->scrollpos = 0;
  80eb80:	e0bfff17 	ldw	r2,-4(fp)
  80eb84:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80eb88:	e0bfff17 	ldw	r2,-4(fp)
  80eb8c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80eb90:	e0bfff17 	ldw	r2,-4(fp)
  80eb94:	100009c5 	stb	zero,39(r2)
  80eb98:	00802074 	movhi	r2,129
  80eb9c:	10928704 	addi	r2,r2,18972
  80eba0:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80eba4:	1009883a 	mov	r4,r2
  80eba8:	01400284 	movi	r5,10
  80ebac:	080a2740 	call	80a274 <__udivsi3>
  80ebb0:	1007883a 	mov	r3,r2
  80ebb4:	e0bfff17 	ldw	r2,-4(fp)
  80ebb8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80ebbc:	e0bfff17 	ldw	r2,-4(fp)
  80ebc0:	10c00104 	addi	r3,r2,4
  80ebc4:	e0bfff17 	ldw	r2,-4(fp)
  80ebc8:	10800717 	ldw	r2,28(r2)
  80ebcc:	1809883a 	mov	r4,r3
  80ebd0:	100b883a 	mov	r5,r2
  80ebd4:	01802074 	movhi	r6,129
  80ebd8:	31ba8504 	addi	r6,r6,-5612
  80ebdc:	e1ffff17 	ldw	r7,-4(fp)
  80ebe0:	080f63c0 	call	80f63c <alt_alarm_start>
}
  80ebe4:	e037883a 	mov	sp,fp
  80ebe8:	dfc00117 	ldw	ra,4(sp)
  80ebec:	df000017 	ldw	fp,0(sp)
  80ebf0:	dec00204 	addi	sp,sp,8
  80ebf4:	f800283a 	ret

0080ebf8 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ebf8:	defffa04 	addi	sp,sp,-24
  80ebfc:	dfc00515 	stw	ra,20(sp)
  80ec00:	df000415 	stw	fp,16(sp)
  80ec04:	df000404 	addi	fp,sp,16
  80ec08:	e13ffd15 	stw	r4,-12(fp)
  80ec0c:	e17ffe15 	stw	r5,-8(fp)
  80ec10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80ec14:	e0bffd17 	ldw	r2,-12(fp)
  80ec18:	10800017 	ldw	r2,0(r2)
  80ec1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80ec20:	e0bffc17 	ldw	r2,-16(fp)
  80ec24:	10c00a04 	addi	r3,r2,40
  80ec28:	e0bffd17 	ldw	r2,-12(fp)
  80ec2c:	10800217 	ldw	r2,8(r2)
  80ec30:	1809883a 	mov	r4,r3
  80ec34:	e17ffe17 	ldw	r5,-8(fp)
  80ec38:	e1bfff17 	ldw	r6,-4(fp)
  80ec3c:	100f883a 	mov	r7,r2
  80ec40:	080e52c0 	call	80e52c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80ec44:	e037883a 	mov	sp,fp
  80ec48:	dfc00117 	ldw	ra,4(sp)
  80ec4c:	df000017 	ldw	fp,0(sp)
  80ec50:	dec00204 	addi	sp,sp,8
  80ec54:	f800283a 	ret

0080ec58 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80ec58:	defff904 	addi	sp,sp,-28
  80ec5c:	dfc00615 	stw	ra,24(sp)
  80ec60:	df000515 	stw	fp,20(sp)
  80ec64:	df000504 	addi	fp,sp,20
  80ec68:	e13ffe15 	stw	r4,-8(fp)
  80ec6c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80ec70:	0007883a 	mov	r3,zero
  80ec74:	e0bffe17 	ldw	r2,-8(fp)
  80ec78:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80ec7c:	e0bffe17 	ldw	r2,-8(fp)
  80ec80:	10800104 	addi	r2,r2,4
  80ec84:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec88:	0005303a 	rdctl	r2,status
  80ec8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec90:	e0fffc17 	ldw	r3,-16(fp)
  80ec94:	00bfff84 	movi	r2,-2
  80ec98:	1884703a 	and	r2,r3,r2
  80ec9c:	1001703a 	wrctl	status,r2
  
  return context;
  80eca0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80eca4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  80eca8:	080ff900 	call	80ff90 <alt_tick>
  80ecac:	e0bffb17 	ldw	r2,-20(fp)
  80ecb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ecb4:	e0bffd17 	ldw	r2,-12(fp)
  80ecb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80ecbc:	e037883a 	mov	sp,fp
  80ecc0:	dfc00117 	ldw	ra,4(sp)
  80ecc4:	df000017 	ldw	fp,0(sp)
  80ecc8:	dec00204 	addi	sp,sp,8
  80eccc:	f800283a 	ret

0080ecd0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80ecd0:	defff904 	addi	sp,sp,-28
  80ecd4:	dfc00615 	stw	ra,24(sp)
  80ecd8:	df000515 	stw	fp,20(sp)
  80ecdc:	df000504 	addi	fp,sp,20
  80ece0:	e13ffc15 	stw	r4,-16(fp)
  80ece4:	e17ffd15 	stw	r5,-12(fp)
  80ece8:	e1bffe15 	stw	r6,-8(fp)
  80ecec:	e1ffff15 	stw	r7,-4(fp)
  80ecf0:	e0bfff17 	ldw	r2,-4(fp)
  80ecf4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80ecf8:	00802074 	movhi	r2,129
  80ecfc:	10928704 	addi	r2,r2,18972
  80ed00:	10800017 	ldw	r2,0(r2)
  80ed04:	1000041e 	bne	r2,zero,80ed18 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  80ed08:	00802074 	movhi	r2,129
  80ed0c:	10928704 	addi	r2,r2,18972
  80ed10:	e0fffb17 	ldw	r3,-20(fp)
  80ed14:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ed18:	e0bffc17 	ldw	r2,-16(fp)
  80ed1c:	10800104 	addi	r2,r2,4
  80ed20:	00c001c4 	movi	r3,7
  80ed24:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  80ed28:	e13ffe17 	ldw	r4,-8(fp)
  80ed2c:	e17ffc17 	ldw	r5,-16(fp)
  80ed30:	01802074 	movhi	r6,129
  80ed34:	31bb1604 	addi	r6,r6,-5032
  80ed38:	080fad40 	call	80fad4 <alt_irq_register>
#endif  
}
  80ed3c:	e037883a 	mov	sp,fp
  80ed40:	dfc00117 	ldw	ra,4(sp)
  80ed44:	df000017 	ldw	fp,0(sp)
  80ed48:	dec00204 	addi	sp,sp,8
  80ed4c:	f800283a 	ret

0080ed50 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ed50:	defffa04 	addi	sp,sp,-24
  80ed54:	dfc00515 	stw	ra,20(sp)
  80ed58:	df000415 	stw	fp,16(sp)
  80ed5c:	df000404 	addi	fp,sp,16
  80ed60:	e13ffd15 	stw	r4,-12(fp)
  80ed64:	e17ffe15 	stw	r5,-8(fp)
  80ed68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ed6c:	e0bffd17 	ldw	r2,-12(fp)
  80ed70:	10800017 	ldw	r2,0(r2)
  80ed74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80ed78:	e0bffc17 	ldw	r2,-16(fp)
  80ed7c:	10c00a04 	addi	r3,r2,40
  80ed80:	e0bffd17 	ldw	r2,-12(fp)
  80ed84:	10800217 	ldw	r2,8(r2)
  80ed88:	1809883a 	mov	r4,r3
  80ed8c:	e17ffe17 	ldw	r5,-8(fp)
  80ed90:	e1bfff17 	ldw	r6,-4(fp)
  80ed94:	100f883a 	mov	r7,r2
  80ed98:	080f2640 	call	80f264 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80ed9c:	e037883a 	mov	sp,fp
  80eda0:	dfc00117 	ldw	ra,4(sp)
  80eda4:	df000017 	ldw	fp,0(sp)
  80eda8:	dec00204 	addi	sp,sp,8
  80edac:	f800283a 	ret

0080edb0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80edb0:	defffa04 	addi	sp,sp,-24
  80edb4:	dfc00515 	stw	ra,20(sp)
  80edb8:	df000415 	stw	fp,16(sp)
  80edbc:	df000404 	addi	fp,sp,16
  80edc0:	e13ffd15 	stw	r4,-12(fp)
  80edc4:	e17ffe15 	stw	r5,-8(fp)
  80edc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80edcc:	e0bffd17 	ldw	r2,-12(fp)
  80edd0:	10800017 	ldw	r2,0(r2)
  80edd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80edd8:	e0bffc17 	ldw	r2,-16(fp)
  80eddc:	10c00a04 	addi	r3,r2,40
  80ede0:	e0bffd17 	ldw	r2,-12(fp)
  80ede4:	10800217 	ldw	r2,8(r2)
  80ede8:	1809883a 	mov	r4,r3
  80edec:	e17ffe17 	ldw	r5,-8(fp)
  80edf0:	e1bfff17 	ldw	r6,-4(fp)
  80edf4:	100f883a 	mov	r7,r2
  80edf8:	080f4900 	call	80f490 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80edfc:	e037883a 	mov	sp,fp
  80ee00:	dfc00117 	ldw	ra,4(sp)
  80ee04:	df000017 	ldw	fp,0(sp)
  80ee08:	dec00204 	addi	sp,sp,8
  80ee0c:	f800283a 	ret

0080ee10 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80ee10:	defffc04 	addi	sp,sp,-16
  80ee14:	dfc00315 	stw	ra,12(sp)
  80ee18:	df000215 	stw	fp,8(sp)
  80ee1c:	df000204 	addi	fp,sp,8
  80ee20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ee24:	e0bfff17 	ldw	r2,-4(fp)
  80ee28:	10800017 	ldw	r2,0(r2)
  80ee2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80ee30:	e0bffe17 	ldw	r2,-8(fp)
  80ee34:	10c00a04 	addi	r3,r2,40
  80ee38:	e0bfff17 	ldw	r2,-4(fp)
  80ee3c:	10800217 	ldw	r2,8(r2)
  80ee40:	1809883a 	mov	r4,r3
  80ee44:	100b883a 	mov	r5,r2
  80ee48:	080f1c00 	call	80f1c0 <altera_avalon_uart_close>
}
  80ee4c:	e037883a 	mov	sp,fp
  80ee50:	dfc00117 	ldw	ra,4(sp)
  80ee54:	df000017 	ldw	fp,0(sp)
  80ee58:	dec00204 	addi	sp,sp,8
  80ee5c:	f800283a 	ret

0080ee60 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80ee60:	defff904 	addi	sp,sp,-28
  80ee64:	dfc00615 	stw	ra,24(sp)
  80ee68:	df000515 	stw	fp,20(sp)
  80ee6c:	df000504 	addi	fp,sp,20
  80ee70:	e13ffd15 	stw	r4,-12(fp)
  80ee74:	e17ffe15 	stw	r5,-8(fp)
  80ee78:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80ee7c:	e0bffd17 	ldw	r2,-12(fp)
  80ee80:	10800017 	ldw	r2,0(r2)
  80ee84:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80ee88:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80ee8c:	1000041e 	bne	r2,zero,80eea0 <altera_avalon_uart_init+0x40>
  80ee90:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80ee94:	1000021e 	bne	r2,zero,80eea0 <altera_avalon_uart_init+0x40>
  80ee98:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80ee9c:	10000226 	beq	r2,zero,80eea8 <altera_avalon_uart_init+0x48>
  80eea0:	00800044 	movi	r2,1
  80eea4:	00000106 	br	80eeac <altera_avalon_uart_init+0x4c>
  80eea8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80eeac:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80eeb0:	e0bffc17 	ldw	r2,-16(fp)
  80eeb4:	10000d1e 	bne	r2,zero,80eeec <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80eeb8:	e0bffd17 	ldw	r2,-12(fp)
  80eebc:	00c32004 	movi	r3,3200
  80eec0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80eec4:	e0bffb17 	ldw	r2,-20(fp)
  80eec8:	10800304 	addi	r2,r2,12
  80eecc:	e0fffd17 	ldw	r3,-12(fp)
  80eed0:	18c00117 	ldw	r3,4(r3)
  80eed4:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  80eed8:	e13fff17 	ldw	r4,-4(fp)
  80eedc:	e17ffd17 	ldw	r5,-12(fp)
  80eee0:	01802074 	movhi	r6,129
  80eee4:	31bbc004 	addi	r6,r6,-4352
  80eee8:	080fad40 	call	80fad4 <alt_irq_register>
#endif  
  }
}
  80eeec:	e037883a 	mov	sp,fp
  80eef0:	dfc00117 	ldw	ra,4(sp)
  80eef4:	df000017 	ldw	fp,0(sp)
  80eef8:	dec00204 	addi	sp,sp,8
  80eefc:	f800283a 	ret

0080ef00 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80ef00:	defff904 	addi	sp,sp,-28
  80ef04:	dfc00615 	stw	ra,24(sp)
  80ef08:	df000515 	stw	fp,20(sp)
  80ef0c:	df000504 	addi	fp,sp,20
  80ef10:	e13ffe15 	stw	r4,-8(fp)
  80ef14:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80ef18:	e0bffe17 	ldw	r2,-8(fp)
  80ef1c:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  80ef20:	e0bffb17 	ldw	r2,-20(fp)
  80ef24:	10800017 	ldw	r2,0(r2)
  80ef28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80ef2c:	e0bffc17 	ldw	r2,-16(fp)
  80ef30:	10800204 	addi	r2,r2,8
  80ef34:	10800037 	ldwio	r2,0(r2)
  80ef38:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80ef3c:	e0bffc17 	ldw	r2,-16(fp)
  80ef40:	10800204 	addi	r2,r2,8
  80ef44:	0007883a 	mov	r3,zero
  80ef48:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80ef4c:	e0bffc17 	ldw	r2,-16(fp)
  80ef50:	10800204 	addi	r2,r2,8
  80ef54:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80ef58:	e0bffd17 	ldw	r2,-12(fp)
  80ef5c:	1080200c 	andi	r2,r2,128
  80ef60:	10000326 	beq	r2,zero,80ef70 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  80ef64:	e13ffb17 	ldw	r4,-20(fp)
  80ef68:	e17ffd17 	ldw	r5,-12(fp)
  80ef6c:	080ef9c0 	call	80ef9c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80ef70:	e0bffd17 	ldw	r2,-12(fp)
  80ef74:	1081100c 	andi	r2,r2,1088
  80ef78:	10000326 	beq	r2,zero,80ef88 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80ef7c:	e13ffb17 	ldw	r4,-20(fp)
  80ef80:	e17ffd17 	ldw	r5,-12(fp)
  80ef84:	080f07c0 	call	80f07c <altera_avalon_uart_txirq>
  }
  

}
  80ef88:	e037883a 	mov	sp,fp
  80ef8c:	dfc00117 	ldw	ra,4(sp)
  80ef90:	df000017 	ldw	fp,0(sp)
  80ef94:	dec00204 	addi	sp,sp,8
  80ef98:	f800283a 	ret

0080ef9c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80ef9c:	defffc04 	addi	sp,sp,-16
  80efa0:	df000315 	stw	fp,12(sp)
  80efa4:	df000304 	addi	fp,sp,12
  80efa8:	e13ffe15 	stw	r4,-8(fp)
  80efac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80efb0:	e0bfff17 	ldw	r2,-4(fp)
  80efb4:	108000cc 	andi	r2,r2,3
  80efb8:	10000126 	beq	r2,zero,80efc0 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80efbc:	00002b06 	br	80f06c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80efc0:	e0bffe17 	ldw	r2,-8(fp)
  80efc4:	10800317 	ldw	r2,12(r2)
  80efc8:	e0bffe17 	ldw	r2,-8(fp)
  80efcc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80efd0:	e0bffe17 	ldw	r2,-8(fp)
  80efd4:	10800317 	ldw	r2,12(r2)
  80efd8:	10800044 	addi	r2,r2,1
  80efdc:	10800fcc 	andi	r2,r2,63
  80efe0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80efe4:	e0bffe17 	ldw	r2,-8(fp)
  80efe8:	10800317 	ldw	r2,12(r2)
  80efec:	e0fffe17 	ldw	r3,-8(fp)
  80eff0:	18c00017 	ldw	r3,0(r3)
  80eff4:	18c00037 	ldwio	r3,0(r3)
  80eff8:	1809883a 	mov	r4,r3
  80effc:	e0fffe17 	ldw	r3,-8(fp)
  80f000:	1885883a 	add	r2,r3,r2
  80f004:	10800704 	addi	r2,r2,28
  80f008:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80f00c:	e0bffe17 	ldw	r2,-8(fp)
  80f010:	e0fffd17 	ldw	r3,-12(fp)
  80f014:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f018:	e0bffe17 	ldw	r2,-8(fp)
  80f01c:	10800317 	ldw	r2,12(r2)
  80f020:	10800044 	addi	r2,r2,1
  80f024:	10800fcc 	andi	r2,r2,63
  80f028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80f02c:	e0bffe17 	ldw	r2,-8(fp)
  80f030:	10c00217 	ldw	r3,8(r2)
  80f034:	e0bffd17 	ldw	r2,-12(fp)
  80f038:	18800c1e 	bne	r3,r2,80f06c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f03c:	e0bffe17 	ldw	r2,-8(fp)
  80f040:	10c00117 	ldw	r3,4(r2)
  80f044:	00bfdfc4 	movi	r2,-129
  80f048:	1886703a 	and	r3,r3,r2
  80f04c:	e0bffe17 	ldw	r2,-8(fp)
  80f050:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80f054:	e0bffe17 	ldw	r2,-8(fp)
  80f058:	10800017 	ldw	r2,0(r2)
  80f05c:	10800304 	addi	r2,r2,12
  80f060:	e0fffe17 	ldw	r3,-8(fp)
  80f064:	18c00117 	ldw	r3,4(r3)
  80f068:	10c00035 	stwio	r3,0(r2)
  }   
}
  80f06c:	e037883a 	mov	sp,fp
  80f070:	df000017 	ldw	fp,0(sp)
  80f074:	dec00104 	addi	sp,sp,4
  80f078:	f800283a 	ret

0080f07c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80f07c:	defffb04 	addi	sp,sp,-20
  80f080:	df000415 	stw	fp,16(sp)
  80f084:	df000404 	addi	fp,sp,16
  80f088:	e13ffc15 	stw	r4,-16(fp)
  80f08c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80f090:	e0bffc17 	ldw	r2,-16(fp)
  80f094:	10c00417 	ldw	r3,16(r2)
  80f098:	e0bffc17 	ldw	r2,-16(fp)
  80f09c:	10800517 	ldw	r2,20(r2)
  80f0a0:	18803226 	beq	r3,r2,80f16c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f0a4:	e0bffc17 	ldw	r2,-16(fp)
  80f0a8:	10800617 	ldw	r2,24(r2)
  80f0ac:	1080008c 	andi	r2,r2,2
  80f0b0:	10000326 	beq	r2,zero,80f0c0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80f0b4:	e0bffd17 	ldw	r2,-12(fp)
  80f0b8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f0bc:	10001d26 	beq	r2,zero,80f134 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80f0c0:	e0bffc17 	ldw	r2,-16(fp)
  80f0c4:	10800417 	ldw	r2,16(r2)
  80f0c8:	e0bffc17 	ldw	r2,-16(fp)
  80f0cc:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80f0d0:	e0bffc17 	ldw	r2,-16(fp)
  80f0d4:	10800017 	ldw	r2,0(r2)
  80f0d8:	10800104 	addi	r2,r2,4
  80f0dc:	e0fffc17 	ldw	r3,-16(fp)
  80f0e0:	18c00417 	ldw	r3,16(r3)
  80f0e4:	e13ffc17 	ldw	r4,-16(fp)
  80f0e8:	20c7883a 	add	r3,r4,r3
  80f0ec:	18c01704 	addi	r3,r3,92
  80f0f0:	18c00003 	ldbu	r3,0(r3)
  80f0f4:	18c03fcc 	andi	r3,r3,255
  80f0f8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80f0fc:	e0bffc17 	ldw	r2,-16(fp)
  80f100:	10800417 	ldw	r2,16(r2)
  80f104:	10800044 	addi	r2,r2,1
  80f108:	e0fffc17 	ldw	r3,-16(fp)
  80f10c:	18800415 	stw	r2,16(r3)
  80f110:	10c00fcc 	andi	r3,r2,63
  80f114:	e0bffc17 	ldw	r2,-16(fp)
  80f118:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f11c:	e0bffc17 	ldw	r2,-16(fp)
  80f120:	10800117 	ldw	r2,4(r2)
  80f124:	10c01014 	ori	r3,r2,64
  80f128:	e0bffc17 	ldw	r2,-16(fp)
  80f12c:	10c00115 	stw	r3,4(r2)
  80f130:	00000e06 	br	80f16c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80f134:	e0bffc17 	ldw	r2,-16(fp)
  80f138:	10800017 	ldw	r2,0(r2)
  80f13c:	10800204 	addi	r2,r2,8
  80f140:	10800037 	ldwio	r2,0(r2)
  80f144:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80f148:	e0bffd17 	ldw	r2,-12(fp)
  80f14c:	1082000c 	andi	r2,r2,2048
  80f150:	1000061e 	bne	r2,zero,80f16c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f154:	e0bffc17 	ldw	r2,-16(fp)
  80f158:	10c00117 	ldw	r3,4(r2)
  80f15c:	00bfefc4 	movi	r2,-65
  80f160:	1886703a 	and	r3,r3,r2
  80f164:	e0bffc17 	ldw	r2,-16(fp)
  80f168:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80f16c:	e0bffc17 	ldw	r2,-16(fp)
  80f170:	10c00417 	ldw	r3,16(r2)
  80f174:	e0bffc17 	ldw	r2,-16(fp)
  80f178:	10800517 	ldw	r2,20(r2)
  80f17c:	1880061e 	bne	r3,r2,80f198 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f180:	e0bffc17 	ldw	r2,-16(fp)
  80f184:	10c00117 	ldw	r3,4(r2)
  80f188:	00beefc4 	movi	r2,-1089
  80f18c:	1886703a 	and	r3,r3,r2
  80f190:	e0bffc17 	ldw	r2,-16(fp)
  80f194:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f198:	e0bffc17 	ldw	r2,-16(fp)
  80f19c:	10800017 	ldw	r2,0(r2)
  80f1a0:	10800304 	addi	r2,r2,12
  80f1a4:	e0fffc17 	ldw	r3,-16(fp)
  80f1a8:	18c00117 	ldw	r3,4(r3)
  80f1ac:	10c00035 	stwio	r3,0(r2)
}
  80f1b0:	e037883a 	mov	sp,fp
  80f1b4:	df000017 	ldw	fp,0(sp)
  80f1b8:	dec00104 	addi	sp,sp,4
  80f1bc:	f800283a 	ret

0080f1c0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80f1c0:	defffd04 	addi	sp,sp,-12
  80f1c4:	df000215 	stw	fp,8(sp)
  80f1c8:	df000204 	addi	fp,sp,8
  80f1cc:	e13ffe15 	stw	r4,-8(fp)
  80f1d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f1d4:	00000506 	br	80f1ec <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80f1d8:	e0bfff17 	ldw	r2,-4(fp)
  80f1dc:	1090000c 	andi	r2,r2,16384
  80f1e0:	10000226 	beq	r2,zero,80f1ec <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80f1e4:	00bffd44 	movi	r2,-11
  80f1e8:	00000606 	br	80f204 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f1ec:	e0bffe17 	ldw	r2,-8(fp)
  80f1f0:	10c00417 	ldw	r3,16(r2)
  80f1f4:	e0bffe17 	ldw	r2,-8(fp)
  80f1f8:	10800517 	ldw	r2,20(r2)
  80f1fc:	18bff61e 	bne	r3,r2,80f1d8 <__alt_data_end+0xff80f1d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f200:	0005883a 	mov	r2,zero
}
  80f204:	e037883a 	mov	sp,fp
  80f208:	df000017 	ldw	fp,0(sp)
  80f20c:	dec00104 	addi	sp,sp,4
  80f210:	f800283a 	ret

0080f214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f214:	defffe04 	addi	sp,sp,-8
  80f218:	dfc00115 	stw	ra,4(sp)
  80f21c:	df000015 	stw	fp,0(sp)
  80f220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f224:	00802074 	movhi	r2,129
  80f228:	108b2604 	addi	r2,r2,11416
  80f22c:	10800017 	ldw	r2,0(r2)
  80f230:	10000526 	beq	r2,zero,80f248 <alt_get_errno+0x34>
  80f234:	00802074 	movhi	r2,129
  80f238:	108b2604 	addi	r2,r2,11416
  80f23c:	10800017 	ldw	r2,0(r2)
  80f240:	103ee83a 	callr	r2
  80f244:	00000206 	br	80f250 <alt_get_errno+0x3c>
  80f248:	00802074 	movhi	r2,129
  80f24c:	10928204 	addi	r2,r2,18952
}
  80f250:	e037883a 	mov	sp,fp
  80f254:	dfc00117 	ldw	ra,4(sp)
  80f258:	df000017 	ldw	fp,0(sp)
  80f25c:	dec00204 	addi	sp,sp,8
  80f260:	f800283a 	ret

0080f264 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80f264:	defff204 	addi	sp,sp,-56
  80f268:	dfc00d15 	stw	ra,52(sp)
  80f26c:	df000c15 	stw	fp,48(sp)
  80f270:	df000c04 	addi	fp,sp,48
  80f274:	e13ffc15 	stw	r4,-16(fp)
  80f278:	e17ffd15 	stw	r5,-12(fp)
  80f27c:	e1bffe15 	stw	r6,-8(fp)
  80f280:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80f284:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80f288:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80f28c:	e0bfff17 	ldw	r2,-4(fp)
  80f290:	1090000c 	andi	r2,r2,16384
  80f294:	1005003a 	cmpeq	r2,r2,zero
  80f298:	10803fcc 	andi	r2,r2,255
  80f29c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f2a0:	00001306 	br	80f2f0 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80f2a4:	e0bff517 	ldw	r2,-44(fp)
  80f2a8:	10800044 	addi	r2,r2,1
  80f2ac:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80f2b0:	e0bffd17 	ldw	r2,-12(fp)
  80f2b4:	10c00044 	addi	r3,r2,1
  80f2b8:	e0fffd15 	stw	r3,-12(fp)
  80f2bc:	e0fffc17 	ldw	r3,-16(fp)
  80f2c0:	18c00217 	ldw	r3,8(r3)
  80f2c4:	e13ffc17 	ldw	r4,-16(fp)
  80f2c8:	20c7883a 	add	r3,r4,r3
  80f2cc:	18c00704 	addi	r3,r3,28
  80f2d0:	18c00003 	ldbu	r3,0(r3)
  80f2d4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80f2d8:	e0bffc17 	ldw	r2,-16(fp)
  80f2dc:	10800217 	ldw	r2,8(r2)
  80f2e0:	10800044 	addi	r2,r2,1
  80f2e4:	10c00fcc 	andi	r3,r2,63
  80f2e8:	e0bffc17 	ldw	r2,-16(fp)
  80f2ec:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f2f0:	e0fff517 	ldw	r3,-44(fp)
  80f2f4:	e0bffe17 	ldw	r2,-8(fp)
  80f2f8:	1880050e 	bge	r3,r2,80f310 <altera_avalon_uart_read+0xac>
  80f2fc:	e0bffc17 	ldw	r2,-16(fp)
  80f300:	10c00217 	ldw	r3,8(r2)
  80f304:	e0bffc17 	ldw	r2,-16(fp)
  80f308:	10800317 	ldw	r2,12(r2)
  80f30c:	18bfe51e 	bne	r3,r2,80f2a4 <__alt_data_end+0xff80f2a4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80f310:	e0bff517 	ldw	r2,-44(fp)
  80f314:	1000251e 	bne	r2,zero,80f3ac <altera_avalon_uart_read+0x148>
  80f318:	e0bffc17 	ldw	r2,-16(fp)
  80f31c:	10c00217 	ldw	r3,8(r2)
  80f320:	e0bffc17 	ldw	r2,-16(fp)
  80f324:	10800317 	ldw	r2,12(r2)
  80f328:	1880201e 	bne	r3,r2,80f3ac <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80f32c:	e0bff617 	ldw	r2,-40(fp)
  80f330:	1000071e 	bne	r2,zero,80f350 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80f334:	080f2140 	call	80f214 <alt_get_errno>
  80f338:	1007883a 	mov	r3,r2
  80f33c:	008002c4 	movi	r2,11
  80f340:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80f344:	00800044 	movi	r2,1
  80f348:	e0bff405 	stb	r2,-48(fp)
        break;
  80f34c:	00001b06 	br	80f3bc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f350:	0005303a 	rdctl	r2,status
  80f354:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f358:	e0fff817 	ldw	r3,-32(fp)
  80f35c:	00bfff84 	movi	r2,-2
  80f360:	1884703a 	and	r2,r3,r2
  80f364:	1001703a 	wrctl	status,r2
  
  return context;
  80f368:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80f36c:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f370:	e0bffc17 	ldw	r2,-16(fp)
  80f374:	10800117 	ldw	r2,4(r2)
  80f378:	10c02014 	ori	r3,r2,128
  80f37c:	e0bffc17 	ldw	r2,-16(fp)
  80f380:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f384:	e0bffc17 	ldw	r2,-16(fp)
  80f388:	10800017 	ldw	r2,0(r2)
  80f38c:	10800304 	addi	r2,r2,12
  80f390:	e0fffc17 	ldw	r3,-16(fp)
  80f394:	18c00117 	ldw	r3,4(r3)
  80f398:	10c00035 	stwio	r3,0(r2)
  80f39c:	e0bff717 	ldw	r2,-36(fp)
  80f3a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3a4:	e0bff917 	ldw	r2,-28(fp)
  80f3a8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80f3ac:	e0bff517 	ldw	r2,-44(fp)
  80f3b0:	1000021e 	bne	r2,zero,80f3bc <altera_avalon_uart_read+0x158>
  80f3b4:	e0bffe17 	ldw	r2,-8(fp)
  80f3b8:	103fb91e 	bne	r2,zero,80f2a0 <__alt_data_end+0xff80f2a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3bc:	0005303a 	rdctl	r2,status
  80f3c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3c4:	e0fffa17 	ldw	r3,-24(fp)
  80f3c8:	00bfff84 	movi	r2,-2
  80f3cc:	1884703a 	and	r2,r3,r2
  80f3d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f3d4:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80f3d8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f3dc:	e0bffc17 	ldw	r2,-16(fp)
  80f3e0:	10800117 	ldw	r2,4(r2)
  80f3e4:	10c02014 	ori	r3,r2,128
  80f3e8:	e0bffc17 	ldw	r2,-16(fp)
  80f3ec:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f3f0:	e0bffc17 	ldw	r2,-16(fp)
  80f3f4:	10800017 	ldw	r2,0(r2)
  80f3f8:	10800304 	addi	r2,r2,12
  80f3fc:	e0fffc17 	ldw	r3,-16(fp)
  80f400:	18c00117 	ldw	r3,4(r3)
  80f404:	10c00035 	stwio	r3,0(r2)
  80f408:	e0bff717 	ldw	r2,-36(fp)
  80f40c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f410:	e0bffb17 	ldw	r2,-20(fp)
  80f414:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80f418:	e0bff403 	ldbu	r2,-48(fp)
  80f41c:	10000226 	beq	r2,zero,80f428 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80f420:	00bffd44 	movi	r2,-11
  80f424:	00000106 	br	80f42c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80f428:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80f42c:	e037883a 	mov	sp,fp
  80f430:	dfc00117 	ldw	ra,4(sp)
  80f434:	df000017 	ldw	fp,0(sp)
  80f438:	dec00204 	addi	sp,sp,8
  80f43c:	f800283a 	ret

0080f440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f440:	defffe04 	addi	sp,sp,-8
  80f444:	dfc00115 	stw	ra,4(sp)
  80f448:	df000015 	stw	fp,0(sp)
  80f44c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f450:	00802074 	movhi	r2,129
  80f454:	108b2604 	addi	r2,r2,11416
  80f458:	10800017 	ldw	r2,0(r2)
  80f45c:	10000526 	beq	r2,zero,80f474 <alt_get_errno+0x34>
  80f460:	00802074 	movhi	r2,129
  80f464:	108b2604 	addi	r2,r2,11416
  80f468:	10800017 	ldw	r2,0(r2)
  80f46c:	103ee83a 	callr	r2
  80f470:	00000206 	br	80f47c <alt_get_errno+0x3c>
  80f474:	00802074 	movhi	r2,129
  80f478:	10928204 	addi	r2,r2,18952
}
  80f47c:	e037883a 	mov	sp,fp
  80f480:	dfc00117 	ldw	ra,4(sp)
  80f484:	df000017 	ldw	fp,0(sp)
  80f488:	dec00204 	addi	sp,sp,8
  80f48c:	f800283a 	ret

0080f490 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80f490:	defff204 	addi	sp,sp,-56
  80f494:	dfc00d15 	stw	ra,52(sp)
  80f498:	df000c15 	stw	fp,48(sp)
  80f49c:	df000c04 	addi	fp,sp,48
  80f4a0:	e13ffc15 	stw	r4,-16(fp)
  80f4a4:	e17ffd15 	stw	r5,-12(fp)
  80f4a8:	e1bffe15 	stw	r6,-8(fp)
  80f4ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80f4b0:	e0bffe17 	ldw	r2,-8(fp)
  80f4b4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80f4b8:	e0bfff17 	ldw	r2,-4(fp)
  80f4bc:	1090000c 	andi	r2,r2,16384
  80f4c0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f4c4:	00003c06 	br	80f5b8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f4c8:	e0bffc17 	ldw	r2,-16(fp)
  80f4cc:	10800517 	ldw	r2,20(r2)
  80f4d0:	10800044 	addi	r2,r2,1
  80f4d4:	10800fcc 	andi	r2,r2,63
  80f4d8:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80f4dc:	e0bffc17 	ldw	r2,-16(fp)
  80f4e0:	10c00417 	ldw	r3,16(r2)
  80f4e4:	e0bff617 	ldw	r2,-40(fp)
  80f4e8:	1880221e 	bne	r3,r2,80f574 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80f4ec:	e0bff517 	ldw	r2,-44(fp)
  80f4f0:	10000526 	beq	r2,zero,80f508 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80f4f4:	080f4400 	call	80f440 <alt_get_errno>
  80f4f8:	1007883a 	mov	r3,r2
  80f4fc:	008002c4 	movi	r2,11
  80f500:	18800015 	stw	r2,0(r3)
        break;
  80f504:	00002e06 	br	80f5c0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f508:	0005303a 	rdctl	r2,status
  80f50c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f510:	e0fff817 	ldw	r3,-32(fp)
  80f514:	00bfff84 	movi	r2,-2
  80f518:	1884703a 	and	r2,r3,r2
  80f51c:	1001703a 	wrctl	status,r2
  
  return context;
  80f520:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80f524:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f528:	e0bffc17 	ldw	r2,-16(fp)
  80f52c:	10800117 	ldw	r2,4(r2)
  80f530:	10c11014 	ori	r3,r2,1088
  80f534:	e0bffc17 	ldw	r2,-16(fp)
  80f538:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f53c:	e0bffc17 	ldw	r2,-16(fp)
  80f540:	10800017 	ldw	r2,0(r2)
  80f544:	10800304 	addi	r2,r2,12
  80f548:	e0fffc17 	ldw	r3,-16(fp)
  80f54c:	18c00117 	ldw	r3,4(r3)
  80f550:	10c00035 	stwio	r3,0(r2)
  80f554:	e0bff717 	ldw	r2,-36(fp)
  80f558:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f55c:	e0bff917 	ldw	r2,-28(fp)
  80f560:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80f564:	e0bffc17 	ldw	r2,-16(fp)
  80f568:	10c00417 	ldw	r3,16(r2)
  80f56c:	e0bff617 	ldw	r2,-40(fp)
  80f570:	18bffc26 	beq	r3,r2,80f564 <__alt_data_end+0xff80f564>
      }
    }

    count--;
  80f574:	e0bff417 	ldw	r2,-48(fp)
  80f578:	10bfffc4 	addi	r2,r2,-1
  80f57c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80f580:	e0bffc17 	ldw	r2,-16(fp)
  80f584:	10c00517 	ldw	r3,20(r2)
  80f588:	e0bffd17 	ldw	r2,-12(fp)
  80f58c:	11000044 	addi	r4,r2,1
  80f590:	e13ffd15 	stw	r4,-12(fp)
  80f594:	10800003 	ldbu	r2,0(r2)
  80f598:	1009883a 	mov	r4,r2
  80f59c:	e0bffc17 	ldw	r2,-16(fp)
  80f5a0:	10c5883a 	add	r2,r2,r3
  80f5a4:	10801704 	addi	r2,r2,92
  80f5a8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80f5ac:	e0bffc17 	ldw	r2,-16(fp)
  80f5b0:	e0fff617 	ldw	r3,-40(fp)
  80f5b4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f5b8:	e0bff417 	ldw	r2,-48(fp)
  80f5bc:	103fc21e 	bne	r2,zero,80f4c8 <__alt_data_end+0xff80f4c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f5c0:	0005303a 	rdctl	r2,status
  80f5c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f5c8:	e0fffa17 	ldw	r3,-24(fp)
  80f5cc:	00bfff84 	movi	r2,-2
  80f5d0:	1884703a 	and	r2,r3,r2
  80f5d4:	1001703a 	wrctl	status,r2
  
  return context;
  80f5d8:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80f5dc:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f5e0:	e0bffc17 	ldw	r2,-16(fp)
  80f5e4:	10800117 	ldw	r2,4(r2)
  80f5e8:	10c11014 	ori	r3,r2,1088
  80f5ec:	e0bffc17 	ldw	r2,-16(fp)
  80f5f0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f5f4:	e0bffc17 	ldw	r2,-16(fp)
  80f5f8:	10800017 	ldw	r2,0(r2)
  80f5fc:	10800304 	addi	r2,r2,12
  80f600:	e0fffc17 	ldw	r3,-16(fp)
  80f604:	18c00117 	ldw	r3,4(r3)
  80f608:	10c00035 	stwio	r3,0(r2)
  80f60c:	e0bff717 	ldw	r2,-36(fp)
  80f610:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f614:	e0bffb17 	ldw	r2,-20(fp)
  80f618:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80f61c:	e0fffe17 	ldw	r3,-8(fp)
  80f620:	e0bff417 	ldw	r2,-48(fp)
  80f624:	1885c83a 	sub	r2,r3,r2
}
  80f628:	e037883a 	mov	sp,fp
  80f62c:	dfc00117 	ldw	ra,4(sp)
  80f630:	df000017 	ldw	fp,0(sp)
  80f634:	dec00204 	addi	sp,sp,8
  80f638:	f800283a 	ret

0080f63c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f63c:	defff504 	addi	sp,sp,-44
  80f640:	df000a15 	stw	fp,40(sp)
  80f644:	df000a04 	addi	fp,sp,40
  80f648:	e13ffc15 	stw	r4,-16(fp)
  80f64c:	e17ffd15 	stw	r5,-12(fp)
  80f650:	e1bffe15 	stw	r6,-8(fp)
  80f654:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f658:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f65c:	00802074 	movhi	r2,129
  80f660:	10928704 	addi	r2,r2,18972
  80f664:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80f668:	10003f26 	beq	r2,zero,80f768 <alt_alarm_start+0x12c>
  {
    if (alarm)
  80f66c:	e0bffc17 	ldw	r2,-16(fp)
  80f670:	10003b26 	beq	r2,zero,80f760 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  80f674:	e0bffc17 	ldw	r2,-16(fp)
  80f678:	e0fffe17 	ldw	r3,-8(fp)
  80f67c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f680:	e0bffc17 	ldw	r2,-16(fp)
  80f684:	e0ffff17 	ldw	r3,-4(fp)
  80f688:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f68c:	0005303a 	rdctl	r2,status
  80f690:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f694:	e0fff817 	ldw	r3,-32(fp)
  80f698:	00bfff84 	movi	r2,-2
  80f69c:	1884703a 	and	r2,r3,r2
  80f6a0:	1001703a 	wrctl	status,r2
  
  return context;
  80f6a4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80f6a8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f6ac:	00802074 	movhi	r2,129
  80f6b0:	10928804 	addi	r2,r2,18976
  80f6b4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80f6b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f6bc:	e0fffd17 	ldw	r3,-12(fp)
  80f6c0:	e0bff617 	ldw	r2,-40(fp)
  80f6c4:	1885883a 	add	r2,r3,r2
  80f6c8:	10c00044 	addi	r3,r2,1
  80f6cc:	e0bffc17 	ldw	r2,-16(fp)
  80f6d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f6d4:	e0bffc17 	ldw	r2,-16(fp)
  80f6d8:	10c00217 	ldw	r3,8(r2)
  80f6dc:	e0bff617 	ldw	r2,-40(fp)
  80f6e0:	1880042e 	bgeu	r3,r2,80f6f4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  80f6e4:	e0bffc17 	ldw	r2,-16(fp)
  80f6e8:	00c00044 	movi	r3,1
  80f6ec:	10c00405 	stb	r3,16(r2)
  80f6f0:	00000206 	br	80f6fc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  80f6f4:	e0bffc17 	ldw	r2,-16(fp)
  80f6f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f6fc:	e0fffc17 	ldw	r3,-16(fp)
  80f700:	00802074 	movhi	r2,129
  80f704:	108b2a04 	addi	r2,r2,11432
  80f708:	e0bff915 	stw	r2,-28(fp)
  80f70c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f710:	e0bffa17 	ldw	r2,-24(fp)
  80f714:	e0fff917 	ldw	r3,-28(fp)
  80f718:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f71c:	e0bff917 	ldw	r2,-28(fp)
  80f720:	10c00017 	ldw	r3,0(r2)
  80f724:	e0bffa17 	ldw	r2,-24(fp)
  80f728:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f72c:	e0bff917 	ldw	r2,-28(fp)
  80f730:	10800017 	ldw	r2,0(r2)
  80f734:	e0fffa17 	ldw	r3,-24(fp)
  80f738:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f73c:	e0bff917 	ldw	r2,-28(fp)
  80f740:	e0fffa17 	ldw	r3,-24(fp)
  80f744:	10c00015 	stw	r3,0(r2)
  80f748:	e0bff717 	ldw	r2,-36(fp)
  80f74c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f750:	e0bffb17 	ldw	r2,-20(fp)
  80f754:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f758:	0005883a 	mov	r2,zero
  80f75c:	00000306 	br	80f76c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  80f760:	00bffa84 	movi	r2,-22
  80f764:	00000106 	br	80f76c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  80f768:	00bfde84 	movi	r2,-134
  }
}
  80f76c:	e037883a 	mov	sp,fp
  80f770:	df000017 	ldw	fp,0(sp)
  80f774:	dec00104 	addi	sp,sp,4
  80f778:	f800283a 	ret

0080f77c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80f77c:	defffe04 	addi	sp,sp,-8
  80f780:	df000115 	stw	fp,4(sp)
  80f784:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f788:	e03fff15 	stw	zero,-4(fp)
  80f78c:	00000506 	br	80f7a4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80f790:	e0bfff17 	ldw	r2,-4(fp)
  80f794:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f798:	e0bfff17 	ldw	r2,-4(fp)
  80f79c:	10800804 	addi	r2,r2,32
  80f7a0:	e0bfff15 	stw	r2,-4(fp)
  80f7a4:	e0bfff17 	ldw	r2,-4(fp)
  80f7a8:	10820030 	cmpltui	r2,r2,2048
  80f7ac:	103ff81e 	bne	r2,zero,80f790 <__alt_data_end+0xff80f790>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80f7b0:	e037883a 	mov	sp,fp
  80f7b4:	df000017 	ldw	fp,0(sp)
  80f7b8:	dec00104 	addi	sp,sp,4
  80f7bc:	f800283a 	ret

0080f7c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f7c0:	defffe04 	addi	sp,sp,-8
  80f7c4:	dfc00115 	stw	ra,4(sp)
  80f7c8:	df000015 	stw	fp,0(sp)
  80f7cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f7d0:	00802074 	movhi	r2,129
  80f7d4:	108b2604 	addi	r2,r2,11416
  80f7d8:	10800017 	ldw	r2,0(r2)
  80f7dc:	10000526 	beq	r2,zero,80f7f4 <alt_get_errno+0x34>
  80f7e0:	00802074 	movhi	r2,129
  80f7e4:	108b2604 	addi	r2,r2,11416
  80f7e8:	10800017 	ldw	r2,0(r2)
  80f7ec:	103ee83a 	callr	r2
  80f7f0:	00000206 	br	80f7fc <alt_get_errno+0x3c>
  80f7f4:	00802074 	movhi	r2,129
  80f7f8:	10928204 	addi	r2,r2,18952
}
  80f7fc:	e037883a 	mov	sp,fp
  80f800:	dfc00117 	ldw	ra,4(sp)
  80f804:	df000017 	ldw	fp,0(sp)
  80f808:	dec00204 	addi	sp,sp,8
  80f80c:	f800283a 	ret

0080f810 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80f810:	defffa04 	addi	sp,sp,-24
  80f814:	dfc00515 	stw	ra,20(sp)
  80f818:	df000415 	stw	fp,16(sp)
  80f81c:	df000404 	addi	fp,sp,16
  80f820:	e13ffe15 	stw	r4,-8(fp)
  80f824:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80f828:	e0bffe17 	ldw	r2,-8(fp)
  80f82c:	10000326 	beq	r2,zero,80f83c <alt_dev_llist_insert+0x2c>
  80f830:	e0bffe17 	ldw	r2,-8(fp)
  80f834:	10800217 	ldw	r2,8(r2)
  80f838:	1000061e 	bne	r2,zero,80f854 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80f83c:	080f7c00 	call	80f7c0 <alt_get_errno>
  80f840:	1007883a 	mov	r3,r2
  80f844:	00800584 	movi	r2,22
  80f848:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80f84c:	00bffa84 	movi	r2,-22
  80f850:	00001306 	br	80f8a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80f854:	e0bffe17 	ldw	r2,-8(fp)
  80f858:	e0ffff17 	ldw	r3,-4(fp)
  80f85c:	e0fffc15 	stw	r3,-16(fp)
  80f860:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f864:	e0bffd17 	ldw	r2,-12(fp)
  80f868:	e0fffc17 	ldw	r3,-16(fp)
  80f86c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f870:	e0bffc17 	ldw	r2,-16(fp)
  80f874:	10c00017 	ldw	r3,0(r2)
  80f878:	e0bffd17 	ldw	r2,-12(fp)
  80f87c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f880:	e0bffc17 	ldw	r2,-16(fp)
  80f884:	10800017 	ldw	r2,0(r2)
  80f888:	e0fffd17 	ldw	r3,-12(fp)
  80f88c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f890:	e0bffc17 	ldw	r2,-16(fp)
  80f894:	e0fffd17 	ldw	r3,-12(fp)
  80f898:	10c00015 	stw	r3,0(r2)

  return 0;  
  80f89c:	0005883a 	mov	r2,zero
}
  80f8a0:	e037883a 	mov	sp,fp
  80f8a4:	dfc00117 	ldw	ra,4(sp)
  80f8a8:	df000017 	ldw	fp,0(sp)
  80f8ac:	dec00204 	addi	sp,sp,8
  80f8b0:	f800283a 	ret

0080f8b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80f8b4:	defffd04 	addi	sp,sp,-12
  80f8b8:	dfc00215 	stw	ra,8(sp)
  80f8bc:	df000115 	stw	fp,4(sp)
  80f8c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f8c4:	00802074 	movhi	r2,129
  80f8c8:	10825704 	addi	r2,r2,2396
  80f8cc:	e0bfff15 	stw	r2,-4(fp)
  80f8d0:	00000606 	br	80f8ec <_do_ctors+0x38>
        (*ctor) (); 
  80f8d4:	e0bfff17 	ldw	r2,-4(fp)
  80f8d8:	10800017 	ldw	r2,0(r2)
  80f8dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f8e0:	e0bfff17 	ldw	r2,-4(fp)
  80f8e4:	10bfff04 	addi	r2,r2,-4
  80f8e8:	e0bfff15 	stw	r2,-4(fp)
  80f8ec:	e0ffff17 	ldw	r3,-4(fp)
  80f8f0:	00802074 	movhi	r2,129
  80f8f4:	10825804 	addi	r2,r2,2400
  80f8f8:	18bff62e 	bgeu	r3,r2,80f8d4 <__alt_data_end+0xff80f8d4>
        (*ctor) (); 
}
  80f8fc:	e037883a 	mov	sp,fp
  80f900:	dfc00117 	ldw	ra,4(sp)
  80f904:	df000017 	ldw	fp,0(sp)
  80f908:	dec00204 	addi	sp,sp,8
  80f90c:	f800283a 	ret

0080f910 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80f910:	defffd04 	addi	sp,sp,-12
  80f914:	dfc00215 	stw	ra,8(sp)
  80f918:	df000115 	stw	fp,4(sp)
  80f91c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f920:	00802074 	movhi	r2,129
  80f924:	10825704 	addi	r2,r2,2396
  80f928:	e0bfff15 	stw	r2,-4(fp)
  80f92c:	00000606 	br	80f948 <_do_dtors+0x38>
        (*dtor) (); 
  80f930:	e0bfff17 	ldw	r2,-4(fp)
  80f934:	10800017 	ldw	r2,0(r2)
  80f938:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f93c:	e0bfff17 	ldw	r2,-4(fp)
  80f940:	10bfff04 	addi	r2,r2,-4
  80f944:	e0bfff15 	stw	r2,-4(fp)
  80f948:	e0ffff17 	ldw	r3,-4(fp)
  80f94c:	00802074 	movhi	r2,129
  80f950:	10825804 	addi	r2,r2,2400
  80f954:	18bff62e 	bgeu	r3,r2,80f930 <__alt_data_end+0xff80f930>
        (*dtor) (); 
}
  80f958:	e037883a 	mov	sp,fp
  80f95c:	dfc00117 	ldw	ra,4(sp)
  80f960:	df000017 	ldw	fp,0(sp)
  80f964:	dec00204 	addi	sp,sp,8
  80f968:	f800283a 	ret

0080f96c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f96c:	defffe04 	addi	sp,sp,-8
  80f970:	dfc00115 	stw	ra,4(sp)
  80f974:	df000015 	stw	fp,0(sp)
  80f978:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80f97c:	0009883a 	mov	r4,zero
  80f980:	01440004 	movi	r5,4096
  80f984:	08104940 	call	810494 <alt_icache_flush>
#endif
}
  80f988:	e037883a 	mov	sp,fp
  80f98c:	dfc00117 	ldw	ra,4(sp)
  80f990:	df000017 	ldw	fp,0(sp)
  80f994:	dec00204 	addi	sp,sp,8
  80f998:	f800283a 	ret

0080f99c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f99c:	defff904 	addi	sp,sp,-28
  80f9a0:	dfc00615 	stw	ra,24(sp)
  80f9a4:	df000515 	stw	fp,20(sp)
  80f9a8:	df000504 	addi	fp,sp,20
  80f9ac:	e13ffc15 	stw	r4,-16(fp)
  80f9b0:	e17ffd15 	stw	r5,-12(fp)
  80f9b4:	e1bffe15 	stw	r6,-8(fp)
  80f9b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80f9bc:	e13ffd17 	ldw	r4,-12(fp)
  80f9c0:	e17ffe17 	ldw	r5,-8(fp)
  80f9c4:	e1bfff17 	ldw	r6,-4(fp)
  80f9c8:	080fda00 	call	80fda0 <open>
  80f9cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80f9d0:	e0bffb17 	ldw	r2,-20(fp)
  80f9d4:	10001c16 	blt	r2,zero,80fa48 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f9d8:	00802074 	movhi	r2,129
  80f9dc:	10861204 	addi	r2,r2,6216
  80f9e0:	e0fffb17 	ldw	r3,-20(fp)
  80f9e4:	18c00324 	muli	r3,r3,12
  80f9e8:	10c5883a 	add	r2,r2,r3
  80f9ec:	10c00017 	ldw	r3,0(r2)
  80f9f0:	e0bffc17 	ldw	r2,-16(fp)
  80f9f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80f9f8:	00802074 	movhi	r2,129
  80f9fc:	10861204 	addi	r2,r2,6216
  80fa00:	e0fffb17 	ldw	r3,-20(fp)
  80fa04:	18c00324 	muli	r3,r3,12
  80fa08:	18c00104 	addi	r3,r3,4
  80fa0c:	10c5883a 	add	r2,r2,r3
  80fa10:	10c00017 	ldw	r3,0(r2)
  80fa14:	e0bffc17 	ldw	r2,-16(fp)
  80fa18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80fa1c:	00802074 	movhi	r2,129
  80fa20:	10861204 	addi	r2,r2,6216
  80fa24:	e0fffb17 	ldw	r3,-20(fp)
  80fa28:	18c00324 	muli	r3,r3,12
  80fa2c:	18c00204 	addi	r3,r3,8
  80fa30:	10c5883a 	add	r2,r2,r3
  80fa34:	10c00017 	ldw	r3,0(r2)
  80fa38:	e0bffc17 	ldw	r2,-16(fp)
  80fa3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80fa40:	e13ffb17 	ldw	r4,-20(fp)
  80fa44:	080cfd00 	call	80cfd0 <alt_release_fd>
  }
} 
  80fa48:	e037883a 	mov	sp,fp
  80fa4c:	dfc00117 	ldw	ra,4(sp)
  80fa50:	df000017 	ldw	fp,0(sp)
  80fa54:	dec00204 	addi	sp,sp,8
  80fa58:	f800283a 	ret

0080fa5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80fa5c:	defffb04 	addi	sp,sp,-20
  80fa60:	dfc00415 	stw	ra,16(sp)
  80fa64:	df000315 	stw	fp,12(sp)
  80fa68:	df000304 	addi	fp,sp,12
  80fa6c:	e13ffd15 	stw	r4,-12(fp)
  80fa70:	e17ffe15 	stw	r5,-8(fp)
  80fa74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80fa78:	01002074 	movhi	r4,129
  80fa7c:	21061504 	addi	r4,r4,6228
  80fa80:	e17ffd17 	ldw	r5,-12(fp)
  80fa84:	01800044 	movi	r6,1
  80fa88:	01c07fc4 	movi	r7,511
  80fa8c:	080f99c0 	call	80f99c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80fa90:	01002074 	movhi	r4,129
  80fa94:	21061204 	addi	r4,r4,6216
  80fa98:	e17ffe17 	ldw	r5,-8(fp)
  80fa9c:	000d883a 	mov	r6,zero
  80faa0:	01c07fc4 	movi	r7,511
  80faa4:	080f99c0 	call	80f99c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80faa8:	01002074 	movhi	r4,129
  80faac:	21061804 	addi	r4,r4,6240
  80fab0:	e17fff17 	ldw	r5,-4(fp)
  80fab4:	01800044 	movi	r6,1
  80fab8:	01c07fc4 	movi	r7,511
  80fabc:	080f99c0 	call	80f99c <alt_open_fd>
}  
  80fac0:	e037883a 	mov	sp,fp
  80fac4:	dfc00117 	ldw	ra,4(sp)
  80fac8:	df000017 	ldw	fp,0(sp)
  80facc:	dec00204 	addi	sp,sp,8
  80fad0:	f800283a 	ret

0080fad4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80fad4:	defff004 	addi	sp,sp,-64
  80fad8:	df000f15 	stw	fp,60(sp)
  80fadc:	df000f04 	addi	fp,sp,60
  80fae0:	e13ffd15 	stw	r4,-12(fp)
  80fae4:	e17ffe15 	stw	r5,-8(fp)
  80fae8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80faec:	00bffa84 	movi	r2,-22
  80faf0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80faf4:	e0bffd17 	ldw	r2,-12(fp)
  80faf8:	10800828 	cmpgeui	r2,r2,32
  80fafc:	10005c1e 	bne	r2,zero,80fc70 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb00:	0005303a 	rdctl	r2,status
  80fb04:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb08:	e0fff317 	ldw	r3,-52(fp)
  80fb0c:	00bfff84 	movi	r2,-2
  80fb10:	1884703a 	and	r2,r3,r2
  80fb14:	1001703a 	wrctl	status,r2
  
  return context;
  80fb18:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80fb1c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  80fb20:	00802074 	movhi	r2,129
  80fb24:	10929404 	addi	r2,r2,19024
  80fb28:	e0fffd17 	ldw	r3,-12(fp)
  80fb2c:	180690fa 	slli	r3,r3,3
  80fb30:	10c5883a 	add	r2,r2,r3
  80fb34:	e0ffff17 	ldw	r3,-4(fp)
  80fb38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80fb3c:	00802074 	movhi	r2,129
  80fb40:	10929404 	addi	r2,r2,19024
  80fb44:	e0fffd17 	ldw	r3,-12(fp)
  80fb48:	180690fa 	slli	r3,r3,3
  80fb4c:	18c00104 	addi	r3,r3,4
  80fb50:	10c5883a 	add	r2,r2,r3
  80fb54:	e0fffe17 	ldw	r3,-8(fp)
  80fb58:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80fb5c:	e0bfff17 	ldw	r2,-4(fp)
  80fb60:	10001f26 	beq	r2,zero,80fbe0 <alt_irq_register+0x10c>
  80fb64:	e0bffd17 	ldw	r2,-12(fp)
  80fb68:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb6c:	0005303a 	rdctl	r2,status
  80fb70:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb74:	e0fff517 	ldw	r3,-44(fp)
  80fb78:	00bfff84 	movi	r2,-2
  80fb7c:	1884703a 	and	r2,r3,r2
  80fb80:	1001703a 	wrctl	status,r2
  
  return context;
  80fb84:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fb88:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  80fb8c:	e0bff417 	ldw	r2,-48(fp)
  80fb90:	00c00044 	movi	r3,1
  80fb94:	1884983a 	sll	r2,r3,r2
  80fb98:	1007883a 	mov	r3,r2
  80fb9c:	00802074 	movhi	r2,129
  80fba0:	10928604 	addi	r2,r2,18968
  80fba4:	10800017 	ldw	r2,0(r2)
  80fba8:	1886b03a 	or	r3,r3,r2
  80fbac:	00802074 	movhi	r2,129
  80fbb0:	10928604 	addi	r2,r2,18968
  80fbb4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fbb8:	00802074 	movhi	r2,129
  80fbbc:	10928604 	addi	r2,r2,18968
  80fbc0:	10800017 	ldw	r2,0(r2)
  80fbc4:	100170fa 	wrctl	ienable,r2
  80fbc8:	e0bff617 	ldw	r2,-40(fp)
  80fbcc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbd0:	e0bff717 	ldw	r2,-36(fp)
  80fbd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fbd8:	0005883a 	mov	r2,zero
  80fbdc:	00001f06 	br	80fc5c <alt_irq_register+0x188>
  80fbe0:	e0bffd17 	ldw	r2,-12(fp)
  80fbe4:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fbe8:	0005303a 	rdctl	r2,status
  80fbec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fbf0:	e0fff917 	ldw	r3,-28(fp)
  80fbf4:	00bfff84 	movi	r2,-2
  80fbf8:	1884703a 	and	r2,r3,r2
  80fbfc:	1001703a 	wrctl	status,r2
  
  return context;
  80fc00:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fc04:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  80fc08:	e0bff817 	ldw	r2,-32(fp)
  80fc0c:	00c00044 	movi	r3,1
  80fc10:	1884983a 	sll	r2,r3,r2
  80fc14:	0084303a 	nor	r2,zero,r2
  80fc18:	1007883a 	mov	r3,r2
  80fc1c:	00802074 	movhi	r2,129
  80fc20:	10928604 	addi	r2,r2,18968
  80fc24:	10800017 	ldw	r2,0(r2)
  80fc28:	1886703a 	and	r3,r3,r2
  80fc2c:	00802074 	movhi	r2,129
  80fc30:	10928604 	addi	r2,r2,18968
  80fc34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fc38:	00802074 	movhi	r2,129
  80fc3c:	10928604 	addi	r2,r2,18968
  80fc40:	10800017 	ldw	r2,0(r2)
  80fc44:	100170fa 	wrctl	ienable,r2
  80fc48:	e0bffa17 	ldw	r2,-24(fp)
  80fc4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc50:	e0bffb17 	ldw	r2,-20(fp)
  80fc54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fc58:	0005883a 	mov	r2,zero
  80fc5c:	e0bff115 	stw	r2,-60(fp)
  80fc60:	e0bff217 	ldw	r2,-56(fp)
  80fc64:	e0bffc15 	stw	r2,-16(fp)
  80fc68:	e0bffc17 	ldw	r2,-16(fp)
  80fc6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80fc70:	e0bff117 	ldw	r2,-60(fp)
}
  80fc74:	e037883a 	mov	sp,fp
  80fc78:	df000017 	ldw	fp,0(sp)
  80fc7c:	dec00104 	addi	sp,sp,4
  80fc80:	f800283a 	ret

0080fc84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fc84:	defffe04 	addi	sp,sp,-8
  80fc88:	dfc00115 	stw	ra,4(sp)
  80fc8c:	df000015 	stw	fp,0(sp)
  80fc90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fc94:	00802074 	movhi	r2,129
  80fc98:	108b2604 	addi	r2,r2,11416
  80fc9c:	10800017 	ldw	r2,0(r2)
  80fca0:	10000526 	beq	r2,zero,80fcb8 <alt_get_errno+0x34>
  80fca4:	00802074 	movhi	r2,129
  80fca8:	108b2604 	addi	r2,r2,11416
  80fcac:	10800017 	ldw	r2,0(r2)
  80fcb0:	103ee83a 	callr	r2
  80fcb4:	00000206 	br	80fcc0 <alt_get_errno+0x3c>
  80fcb8:	00802074 	movhi	r2,129
  80fcbc:	10928204 	addi	r2,r2,18952
}
  80fcc0:	e037883a 	mov	sp,fp
  80fcc4:	dfc00117 	ldw	ra,4(sp)
  80fcc8:	df000017 	ldw	fp,0(sp)
  80fccc:	dec00204 	addi	sp,sp,8
  80fcd0:	f800283a 	ret

0080fcd4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80fcd4:	defffd04 	addi	sp,sp,-12
  80fcd8:	df000215 	stw	fp,8(sp)
  80fcdc:	df000204 	addi	fp,sp,8
  80fce0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80fce4:	e0bfff17 	ldw	r2,-4(fp)
  80fce8:	10800217 	ldw	r2,8(r2)
  80fcec:	10d00034 	orhi	r3,r2,16384
  80fcf0:	e0bfff17 	ldw	r2,-4(fp)
  80fcf4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80fcf8:	e03ffe15 	stw	zero,-8(fp)
  80fcfc:	00001d06 	br	80fd74 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80fd00:	00802074 	movhi	r2,129
  80fd04:	10861204 	addi	r2,r2,6216
  80fd08:	e0fffe17 	ldw	r3,-8(fp)
  80fd0c:	18c00324 	muli	r3,r3,12
  80fd10:	10c5883a 	add	r2,r2,r3
  80fd14:	10c00017 	ldw	r3,0(r2)
  80fd18:	e0bfff17 	ldw	r2,-4(fp)
  80fd1c:	10800017 	ldw	r2,0(r2)
  80fd20:	1880111e 	bne	r3,r2,80fd68 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80fd24:	00802074 	movhi	r2,129
  80fd28:	10861204 	addi	r2,r2,6216
  80fd2c:	e0fffe17 	ldw	r3,-8(fp)
  80fd30:	18c00324 	muli	r3,r3,12
  80fd34:	18c00204 	addi	r3,r3,8
  80fd38:	10c5883a 	add	r2,r2,r3
  80fd3c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80fd40:	1000090e 	bge	r2,zero,80fd68 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80fd44:	e0bffe17 	ldw	r2,-8(fp)
  80fd48:	10c00324 	muli	r3,r2,12
  80fd4c:	00802074 	movhi	r2,129
  80fd50:	10861204 	addi	r2,r2,6216
  80fd54:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80fd58:	e0bfff17 	ldw	r2,-4(fp)
  80fd5c:	18800226 	beq	r3,r2,80fd68 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80fd60:	00bffcc4 	movi	r2,-13
  80fd64:	00000a06 	br	80fd90 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80fd68:	e0bffe17 	ldw	r2,-8(fp)
  80fd6c:	10800044 	addi	r2,r2,1
  80fd70:	e0bffe15 	stw	r2,-8(fp)
  80fd74:	00802074 	movhi	r2,129
  80fd78:	108b2504 	addi	r2,r2,11412
  80fd7c:	10800017 	ldw	r2,0(r2)
  80fd80:	1007883a 	mov	r3,r2
  80fd84:	e0bffe17 	ldw	r2,-8(fp)
  80fd88:	18bfdd2e 	bgeu	r3,r2,80fd00 <__alt_data_end+0xff80fd00>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80fd8c:	0005883a 	mov	r2,zero
}
  80fd90:	e037883a 	mov	sp,fp
  80fd94:	df000017 	ldw	fp,0(sp)
  80fd98:	dec00104 	addi	sp,sp,4
  80fd9c:	f800283a 	ret

0080fda0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80fda0:	defff604 	addi	sp,sp,-40
  80fda4:	dfc00915 	stw	ra,36(sp)
  80fda8:	df000815 	stw	fp,32(sp)
  80fdac:	df000804 	addi	fp,sp,32
  80fdb0:	e13ffd15 	stw	r4,-12(fp)
  80fdb4:	e17ffe15 	stw	r5,-8(fp)
  80fdb8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80fdbc:	00bfffc4 	movi	r2,-1
  80fdc0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80fdc4:	00bffb44 	movi	r2,-19
  80fdc8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80fdcc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80fdd0:	e13ffd17 	ldw	r4,-12(fp)
  80fdd4:	01402074 	movhi	r5,129
  80fdd8:	294b2304 	addi	r5,r5,11404
  80fddc:	081023c0 	call	81023c <alt_find_dev>
  80fde0:	e0bff815 	stw	r2,-32(fp)
  80fde4:	e0bff817 	ldw	r2,-32(fp)
  80fde8:	1000051e 	bne	r2,zero,80fe00 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80fdec:	e13ffd17 	ldw	r4,-12(fp)
  80fdf0:	08102cc0 	call	8102cc <alt_find_file>
  80fdf4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80fdf8:	00800044 	movi	r2,1
  80fdfc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80fe00:	e0bff817 	ldw	r2,-32(fp)
  80fe04:	10002926 	beq	r2,zero,80feac <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80fe08:	e13ff817 	ldw	r4,-32(fp)
  80fe0c:	08103e00 	call	8103e0 <alt_get_fd>
  80fe10:	e0bff915 	stw	r2,-28(fp)
  80fe14:	e0bff917 	ldw	r2,-28(fp)
  80fe18:	1000030e 	bge	r2,zero,80fe28 <open+0x88>
    {
      status = index;
  80fe1c:	e0bff917 	ldw	r2,-28(fp)
  80fe20:	e0bffa15 	stw	r2,-24(fp)
  80fe24:	00002306 	br	80feb4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  80fe28:	e0bff917 	ldw	r2,-28(fp)
  80fe2c:	10c00324 	muli	r3,r2,12
  80fe30:	00802074 	movhi	r2,129
  80fe34:	10861204 	addi	r2,r2,6216
  80fe38:	1885883a 	add	r2,r3,r2
  80fe3c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80fe40:	e0fffe17 	ldw	r3,-8(fp)
  80fe44:	00900034 	movhi	r2,16384
  80fe48:	10bfffc4 	addi	r2,r2,-1
  80fe4c:	1886703a 	and	r3,r3,r2
  80fe50:	e0bffc17 	ldw	r2,-16(fp)
  80fe54:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80fe58:	e0bffb17 	ldw	r2,-20(fp)
  80fe5c:	1000051e 	bne	r2,zero,80fe74 <open+0xd4>
  80fe60:	e13ffc17 	ldw	r4,-16(fp)
  80fe64:	080fcd40 	call	80fcd4 <alt_file_locked>
  80fe68:	e0bffa15 	stw	r2,-24(fp)
  80fe6c:	e0bffa17 	ldw	r2,-24(fp)
  80fe70:	10001016 	blt	r2,zero,80feb4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80fe74:	e0bff817 	ldw	r2,-32(fp)
  80fe78:	10800317 	ldw	r2,12(r2)
  80fe7c:	10000826 	beq	r2,zero,80fea0 <open+0x100>
  80fe80:	e0bff817 	ldw	r2,-32(fp)
  80fe84:	10800317 	ldw	r2,12(r2)
  80fe88:	e13ffc17 	ldw	r4,-16(fp)
  80fe8c:	e17ffd17 	ldw	r5,-12(fp)
  80fe90:	e1bffe17 	ldw	r6,-8(fp)
  80fe94:	e1ffff17 	ldw	r7,-4(fp)
  80fe98:	103ee83a 	callr	r2
  80fe9c:	00000106 	br	80fea4 <open+0x104>
  80fea0:	0005883a 	mov	r2,zero
  80fea4:	e0bffa15 	stw	r2,-24(fp)
  80fea8:	00000206 	br	80feb4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80feac:	00bffb44 	movi	r2,-19
  80feb0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80feb4:	e0bffa17 	ldw	r2,-24(fp)
  80feb8:	1000090e 	bge	r2,zero,80fee0 <open+0x140>
  {
    alt_release_fd (index);  
  80febc:	e13ff917 	ldw	r4,-28(fp)
  80fec0:	080cfd00 	call	80cfd0 <alt_release_fd>
    ALT_ERRNO = -status;
  80fec4:	080fc840 	call	80fc84 <alt_get_errno>
  80fec8:	1007883a 	mov	r3,r2
  80fecc:	e0bffa17 	ldw	r2,-24(fp)
  80fed0:	0085c83a 	sub	r2,zero,r2
  80fed4:	18800015 	stw	r2,0(r3)
    return -1;
  80fed8:	00bfffc4 	movi	r2,-1
  80fedc:	00000106 	br	80fee4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  80fee0:	e0bff917 	ldw	r2,-28(fp)
}
  80fee4:	e037883a 	mov	sp,fp
  80fee8:	dfc00117 	ldw	ra,4(sp)
  80feec:	df000017 	ldw	fp,0(sp)
  80fef0:	dec00204 	addi	sp,sp,8
  80fef4:	f800283a 	ret

0080fef8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80fef8:	defffa04 	addi	sp,sp,-24
  80fefc:	df000515 	stw	fp,20(sp)
  80ff00:	df000504 	addi	fp,sp,20
  80ff04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff08:	0005303a 	rdctl	r2,status
  80ff0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff10:	e0fffc17 	ldw	r3,-16(fp)
  80ff14:	00bfff84 	movi	r2,-2
  80ff18:	1884703a 	and	r2,r3,r2
  80ff1c:	1001703a 	wrctl	status,r2
  
  return context;
  80ff20:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80ff24:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80ff28:	e0bfff17 	ldw	r2,-4(fp)
  80ff2c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80ff30:	e0bffd17 	ldw	r2,-12(fp)
  80ff34:	10800017 	ldw	r2,0(r2)
  80ff38:	e0fffd17 	ldw	r3,-12(fp)
  80ff3c:	18c00117 	ldw	r3,4(r3)
  80ff40:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80ff44:	e0bffd17 	ldw	r2,-12(fp)
  80ff48:	10800117 	ldw	r2,4(r2)
  80ff4c:	e0fffd17 	ldw	r3,-12(fp)
  80ff50:	18c00017 	ldw	r3,0(r3)
  80ff54:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80ff58:	e0bffd17 	ldw	r2,-12(fp)
  80ff5c:	e0fffd17 	ldw	r3,-12(fp)
  80ff60:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80ff64:	e0bffd17 	ldw	r2,-12(fp)
  80ff68:	e0fffd17 	ldw	r3,-12(fp)
  80ff6c:	10c00015 	stw	r3,0(r2)
  80ff70:	e0bffb17 	ldw	r2,-20(fp)
  80ff74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff78:	e0bffe17 	ldw	r2,-8(fp)
  80ff7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80ff80:	e037883a 	mov	sp,fp
  80ff84:	df000017 	ldw	fp,0(sp)
  80ff88:	dec00104 	addi	sp,sp,4
  80ff8c:	f800283a 	ret

0080ff90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80ff90:	defffb04 	addi	sp,sp,-20
  80ff94:	dfc00415 	stw	ra,16(sp)
  80ff98:	df000315 	stw	fp,12(sp)
  80ff9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80ffa0:	d0a00f17 	ldw	r2,-32708(gp)
  80ffa4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80ffa8:	d0a76d17 	ldw	r2,-25164(gp)
  80ffac:	10800044 	addi	r2,r2,1
  80ffb0:	d0a76d15 	stw	r2,-25164(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ffb4:	00002e06 	br	810070 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80ffb8:	e0bffd17 	ldw	r2,-12(fp)
  80ffbc:	10800017 	ldw	r2,0(r2)
  80ffc0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80ffc4:	e0bffd17 	ldw	r2,-12(fp)
  80ffc8:	10800403 	ldbu	r2,16(r2)
  80ffcc:	10803fcc 	andi	r2,r2,255
  80ffd0:	10000426 	beq	r2,zero,80ffe4 <alt_tick+0x54>
  80ffd4:	d0a76d17 	ldw	r2,-25164(gp)
  80ffd8:	1000021e 	bne	r2,zero,80ffe4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80ffdc:	e0bffd17 	ldw	r2,-12(fp)
  80ffe0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80ffe4:	e0bffd17 	ldw	r2,-12(fp)
  80ffe8:	10800217 	ldw	r2,8(r2)
  80ffec:	d0e76d17 	ldw	r3,-25164(gp)
  80fff0:	18801d36 	bltu	r3,r2,810068 <alt_tick+0xd8>
  80fff4:	e0bffd17 	ldw	r2,-12(fp)
  80fff8:	10800403 	ldbu	r2,16(r2)
  80fffc:	10803fcc 	andi	r2,r2,255
  810000:	1000191e 	bne	r2,zero,810068 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  810004:	e0bffd17 	ldw	r2,-12(fp)
  810008:	10800317 	ldw	r2,12(r2)
  81000c:	e0fffd17 	ldw	r3,-12(fp)
  810010:	18c00517 	ldw	r3,20(r3)
  810014:	1809883a 	mov	r4,r3
  810018:	103ee83a 	callr	r2
  81001c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  810020:	e0bfff17 	ldw	r2,-4(fp)
  810024:	1000031e 	bne	r2,zero,810034 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  810028:	e13ffd17 	ldw	r4,-12(fp)
  81002c:	080fef80 	call	80fef8 <alt_alarm_stop>
  810030:	00000d06 	br	810068 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  810034:	e0bffd17 	ldw	r2,-12(fp)
  810038:	10c00217 	ldw	r3,8(r2)
  81003c:	e0bfff17 	ldw	r2,-4(fp)
  810040:	1887883a 	add	r3,r3,r2
  810044:	e0bffd17 	ldw	r2,-12(fp)
  810048:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81004c:	e0bffd17 	ldw	r2,-12(fp)
  810050:	10c00217 	ldw	r3,8(r2)
  810054:	d0a76d17 	ldw	r2,-25164(gp)
  810058:	1880032e 	bgeu	r3,r2,810068 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81005c:	e0bffd17 	ldw	r2,-12(fp)
  810060:	00c00044 	movi	r3,1
  810064:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810068:	e0bffe17 	ldw	r2,-8(fp)
  81006c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810070:	e0fffd17 	ldw	r3,-12(fp)
  810074:	d0a00f04 	addi	r2,gp,-32708
  810078:	18bfcf1e 	bne	r3,r2,80ffb8 <__alt_data_end+0xff80ffb8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81007c:	0001883a 	nop
}
  810080:	e037883a 	mov	sp,fp
  810084:	dfc00117 	ldw	ra,4(sp)
  810088:	df000017 	ldw	fp,0(sp)
  81008c:	dec00204 	addi	sp,sp,8
  810090:	f800283a 	ret

00810094 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  810094:	defffd04 	addi	sp,sp,-12
  810098:	dfc00215 	stw	ra,8(sp)
  81009c:	df000115 	stw	fp,4(sp)
  8100a0:	df000104 	addi	fp,sp,4
  8100a4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8100a8:	e13fff17 	ldw	r4,-4(fp)
  8100ac:	08100e40 	call	8100e4 <alt_busy_sleep>
}
  8100b0:	e037883a 	mov	sp,fp
  8100b4:	dfc00117 	ldw	ra,4(sp)
  8100b8:	df000017 	ldw	fp,0(sp)
  8100bc:	dec00204 	addi	sp,sp,8
  8100c0:	f800283a 	ret

008100c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8100c4:	deffff04 	addi	sp,sp,-4
  8100c8:	df000015 	stw	fp,0(sp)
  8100cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8100d0:	000170fa 	wrctl	ienable,zero
}
  8100d4:	e037883a 	mov	sp,fp
  8100d8:	df000017 	ldw	fp,0(sp)
  8100dc:	dec00104 	addi	sp,sp,4
  8100e0:	f800283a 	ret

008100e4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8100e4:	defffa04 	addi	sp,sp,-24
  8100e8:	dfc00515 	stw	ra,20(sp)
  8100ec:	df000415 	stw	fp,16(sp)
  8100f0:	df000404 	addi	fp,sp,16
  8100f4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8100f8:	008000c4 	movi	r2,3
  8100fc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  810100:	e0fffd17 	ldw	r3,-12(fp)
  810104:	008003f4 	movhi	r2,15
  810108:	10909004 	addi	r2,r2,16960
  81010c:	1885383a 	mul	r2,r3,r2
  810110:	0100bef4 	movhi	r4,763
  810114:	213c2004 	addi	r4,r4,-3968
  810118:	100b883a 	mov	r5,r2
  81011c:	080a2740 	call	80a274 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  810120:	01200034 	movhi	r4,32768
  810124:	213fffc4 	addi	r4,r4,-1
  810128:	100b883a 	mov	r5,r2
  81012c:	080a2740 	call	80a274 <__udivsi3>
  810130:	e13fff17 	ldw	r4,-4(fp)
  810134:	100b883a 	mov	r5,r2
  810138:	080a2740 	call	80a274 <__udivsi3>
  81013c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  810140:	e0bffe17 	ldw	r2,-8(fp)
  810144:	10002a26 	beq	r2,zero,8101f0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  810148:	e03ffc15 	stw	zero,-16(fp)
  81014c:	00001706 	br	8101ac <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  810150:	00a00034 	movhi	r2,32768
  810154:	10bfffc4 	addi	r2,r2,-1
  810158:	10bfffc4 	addi	r2,r2,-1
  81015c:	103ffe1e 	bne	r2,zero,810158 <__alt_data_end+0xff810158>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  810160:	e0fffd17 	ldw	r3,-12(fp)
  810164:	008003f4 	movhi	r2,15
  810168:	10909004 	addi	r2,r2,16960
  81016c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  810170:	0100bef4 	movhi	r4,763
  810174:	213c2004 	addi	r4,r4,-3968
  810178:	100b883a 	mov	r5,r2
  81017c:	080a2740 	call	80a274 <__udivsi3>
  810180:	01200034 	movhi	r4,32768
  810184:	213fffc4 	addi	r4,r4,-1
  810188:	100b883a 	mov	r5,r2
  81018c:	080a2740 	call	80a274 <__udivsi3>
  810190:	1007883a 	mov	r3,r2
  810194:	e0bfff17 	ldw	r2,-4(fp)
  810198:	10c5c83a 	sub	r2,r2,r3
  81019c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8101a0:	e0bffc17 	ldw	r2,-16(fp)
  8101a4:	10800044 	addi	r2,r2,1
  8101a8:	e0bffc15 	stw	r2,-16(fp)
  8101ac:	e0fffc17 	ldw	r3,-16(fp)
  8101b0:	e0bffe17 	ldw	r2,-8(fp)
  8101b4:	18bfe616 	blt	r3,r2,810150 <__alt_data_end+0xff810150>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8101b8:	e0fffd17 	ldw	r3,-12(fp)
  8101bc:	008003f4 	movhi	r2,15
  8101c0:	10909004 	addi	r2,r2,16960
  8101c4:	1885383a 	mul	r2,r3,r2
  8101c8:	0100bef4 	movhi	r4,763
  8101cc:	213c2004 	addi	r4,r4,-3968
  8101d0:	100b883a 	mov	r5,r2
  8101d4:	080a2740 	call	80a274 <__udivsi3>
  8101d8:	1007883a 	mov	r3,r2
  8101dc:	e0bfff17 	ldw	r2,-4(fp)
  8101e0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8101e4:	10bfffc4 	addi	r2,r2,-1
  8101e8:	103ffe1e 	bne	r2,zero,8101e4 <__alt_data_end+0xff8101e4>
  8101ec:	00000d06 	br	810224 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8101f0:	e0fffd17 	ldw	r3,-12(fp)
  8101f4:	008003f4 	movhi	r2,15
  8101f8:	10909004 	addi	r2,r2,16960
  8101fc:	1885383a 	mul	r2,r3,r2
  810200:	0100bef4 	movhi	r4,763
  810204:	213c2004 	addi	r4,r4,-3968
  810208:	100b883a 	mov	r5,r2
  81020c:	080a2740 	call	80a274 <__udivsi3>
  810210:	1007883a 	mov	r3,r2
  810214:	e0bfff17 	ldw	r2,-4(fp)
  810218:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81021c:	10bfffc4 	addi	r2,r2,-1
  810220:	00bffe16 	blt	zero,r2,81021c <__alt_data_end+0xff81021c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  810224:	0005883a 	mov	r2,zero
}
  810228:	e037883a 	mov	sp,fp
  81022c:	dfc00117 	ldw	ra,4(sp)
  810230:	df000017 	ldw	fp,0(sp)
  810234:	dec00204 	addi	sp,sp,8
  810238:	f800283a 	ret

0081023c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81023c:	defffa04 	addi	sp,sp,-24
  810240:	dfc00515 	stw	ra,20(sp)
  810244:	df000415 	stw	fp,16(sp)
  810248:	df000404 	addi	fp,sp,16
  81024c:	e13ffe15 	stw	r4,-8(fp)
  810250:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  810254:	e0bfff17 	ldw	r2,-4(fp)
  810258:	10800017 	ldw	r2,0(r2)
  81025c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  810260:	e13ffe17 	ldw	r4,-8(fp)
  810264:	0806c300 	call	806c30 <strlen>
  810268:	10800044 	addi	r2,r2,1
  81026c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810270:	00000d06 	br	8102a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  810274:	e0bffc17 	ldw	r2,-16(fp)
  810278:	10c00217 	ldw	r3,8(r2)
  81027c:	e0bffd17 	ldw	r2,-12(fp)
  810280:	1809883a 	mov	r4,r3
  810284:	e17ffe17 	ldw	r5,-8(fp)
  810288:	100d883a 	mov	r6,r2
  81028c:	08106080 	call	810608 <memcmp>
  810290:	1000021e 	bne	r2,zero,81029c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810294:	e0bffc17 	ldw	r2,-16(fp)
  810298:	00000706 	br	8102b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81029c:	e0bffc17 	ldw	r2,-16(fp)
  8102a0:	10800017 	ldw	r2,0(r2)
  8102a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8102a8:	e0fffc17 	ldw	r3,-16(fp)
  8102ac:	e0bfff17 	ldw	r2,-4(fp)
  8102b0:	18bff01e 	bne	r3,r2,810274 <__alt_data_end+0xff810274>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8102b4:	0005883a 	mov	r2,zero
}
  8102b8:	e037883a 	mov	sp,fp
  8102bc:	dfc00117 	ldw	ra,4(sp)
  8102c0:	df000017 	ldw	fp,0(sp)
  8102c4:	dec00204 	addi	sp,sp,8
  8102c8:	f800283a 	ret

008102cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8102cc:	defffb04 	addi	sp,sp,-20
  8102d0:	dfc00415 	stw	ra,16(sp)
  8102d4:	df000315 	stw	fp,12(sp)
  8102d8:	df000304 	addi	fp,sp,12
  8102dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8102e0:	00802074 	movhi	r2,129
  8102e4:	108b2104 	addi	r2,r2,11396
  8102e8:	10800017 	ldw	r2,0(r2)
  8102ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8102f0:	00003106 	br	8103b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  8102f4:	e0bffd17 	ldw	r2,-12(fp)
  8102f8:	10800217 	ldw	r2,8(r2)
  8102fc:	1009883a 	mov	r4,r2
  810300:	0806c300 	call	806c30 <strlen>
  810304:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  810308:	e0bffd17 	ldw	r2,-12(fp)
  81030c:	10c00217 	ldw	r3,8(r2)
  810310:	e0bffe17 	ldw	r2,-8(fp)
  810314:	10bfffc4 	addi	r2,r2,-1
  810318:	1885883a 	add	r2,r3,r2
  81031c:	10800003 	ldbu	r2,0(r2)
  810320:	10803fcc 	andi	r2,r2,255
  810324:	1080201c 	xori	r2,r2,128
  810328:	10bfe004 	addi	r2,r2,-128
  81032c:	10800bd8 	cmpnei	r2,r2,47
  810330:	1000031e 	bne	r2,zero,810340 <alt_find_file+0x74>
    {
      len -= 1;
  810334:	e0bffe17 	ldw	r2,-8(fp)
  810338:	10bfffc4 	addi	r2,r2,-1
  81033c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810340:	e0bffe17 	ldw	r2,-8(fp)
  810344:	e0ffff17 	ldw	r3,-4(fp)
  810348:	1885883a 	add	r2,r3,r2
  81034c:	10800003 	ldbu	r2,0(r2)
  810350:	10803fcc 	andi	r2,r2,255
  810354:	1080201c 	xori	r2,r2,128
  810358:	10bfe004 	addi	r2,r2,-128
  81035c:	10800be0 	cmpeqi	r2,r2,47
  810360:	1000081e 	bne	r2,zero,810384 <alt_find_file+0xb8>
  810364:	e0bffe17 	ldw	r2,-8(fp)
  810368:	e0ffff17 	ldw	r3,-4(fp)
  81036c:	1885883a 	add	r2,r3,r2
  810370:	10800003 	ldbu	r2,0(r2)
  810374:	10803fcc 	andi	r2,r2,255
  810378:	1080201c 	xori	r2,r2,128
  81037c:	10bfe004 	addi	r2,r2,-128
  810380:	10000a1e 	bne	r2,zero,8103ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  810384:	e0bffd17 	ldw	r2,-12(fp)
  810388:	10c00217 	ldw	r3,8(r2)
  81038c:	e0bffe17 	ldw	r2,-8(fp)
  810390:	1809883a 	mov	r4,r3
  810394:	e17fff17 	ldw	r5,-4(fp)
  810398:	100d883a 	mov	r6,r2
  81039c:	08106080 	call	810608 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8103a0:	1000021e 	bne	r2,zero,8103ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8103a4:	e0bffd17 	ldw	r2,-12(fp)
  8103a8:	00000806 	br	8103cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  8103ac:	e0bffd17 	ldw	r2,-12(fp)
  8103b0:	10800017 	ldw	r2,0(r2)
  8103b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8103b8:	e0fffd17 	ldw	r3,-12(fp)
  8103bc:	00802074 	movhi	r2,129
  8103c0:	108b2104 	addi	r2,r2,11396
  8103c4:	18bfcb1e 	bne	r3,r2,8102f4 <__alt_data_end+0xff8102f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8103c8:	0005883a 	mov	r2,zero
}
  8103cc:	e037883a 	mov	sp,fp
  8103d0:	dfc00117 	ldw	ra,4(sp)
  8103d4:	df000017 	ldw	fp,0(sp)
  8103d8:	dec00204 	addi	sp,sp,8
  8103dc:	f800283a 	ret

008103e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8103e0:	defffc04 	addi	sp,sp,-16
  8103e4:	df000315 	stw	fp,12(sp)
  8103e8:	df000304 	addi	fp,sp,12
  8103ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8103f0:	00bffa04 	movi	r2,-24
  8103f4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8103f8:	e03ffd15 	stw	zero,-12(fp)
  8103fc:	00001d06 	br	810474 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  810400:	00802074 	movhi	r2,129
  810404:	10861204 	addi	r2,r2,6216
  810408:	e0fffd17 	ldw	r3,-12(fp)
  81040c:	18c00324 	muli	r3,r3,12
  810410:	10c5883a 	add	r2,r2,r3
  810414:	10800017 	ldw	r2,0(r2)
  810418:	1000131e 	bne	r2,zero,810468 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  81041c:	00802074 	movhi	r2,129
  810420:	10861204 	addi	r2,r2,6216
  810424:	e0fffd17 	ldw	r3,-12(fp)
  810428:	18c00324 	muli	r3,r3,12
  81042c:	10c5883a 	add	r2,r2,r3
  810430:	e0ffff17 	ldw	r3,-4(fp)
  810434:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  810438:	00802074 	movhi	r2,129
  81043c:	108b2504 	addi	r2,r2,11412
  810440:	10c00017 	ldw	r3,0(r2)
  810444:	e0bffd17 	ldw	r2,-12(fp)
  810448:	1880040e 	bge	r3,r2,81045c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  81044c:	00802074 	movhi	r2,129
  810450:	108b2504 	addi	r2,r2,11412
  810454:	e0fffd17 	ldw	r3,-12(fp)
  810458:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  81045c:	e0bffd17 	ldw	r2,-12(fp)
  810460:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  810464:	00000606 	br	810480 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810468:	e0bffd17 	ldw	r2,-12(fp)
  81046c:	10800044 	addi	r2,r2,1
  810470:	e0bffd15 	stw	r2,-12(fp)
  810474:	e0bffd17 	ldw	r2,-12(fp)
  810478:	10800810 	cmplti	r2,r2,32
  81047c:	103fe01e 	bne	r2,zero,810400 <__alt_data_end+0xff810400>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  810480:	e0bffe17 	ldw	r2,-8(fp)
}
  810484:	e037883a 	mov	sp,fp
  810488:	df000017 	ldw	fp,0(sp)
  81048c:	dec00104 	addi	sp,sp,4
  810490:	f800283a 	ret

00810494 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  810494:	defffb04 	addi	sp,sp,-20
  810498:	df000415 	stw	fp,16(sp)
  81049c:	df000404 	addi	fp,sp,16
  8104a0:	e13ffe15 	stw	r4,-8(fp)
  8104a4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8104a8:	e0bfff17 	ldw	r2,-4(fp)
  8104ac:	10840070 	cmpltui	r2,r2,4097
  8104b0:	1000021e 	bne	r2,zero,8104bc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8104b4:	00840004 	movi	r2,4096
  8104b8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8104bc:	e0fffe17 	ldw	r3,-8(fp)
  8104c0:	e0bfff17 	ldw	r2,-4(fp)
  8104c4:	1885883a 	add	r2,r3,r2
  8104c8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8104cc:	e0bffe17 	ldw	r2,-8(fp)
  8104d0:	e0bffc15 	stw	r2,-16(fp)
  8104d4:	00000506 	br	8104ec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8104d8:	e0bffc17 	ldw	r2,-16(fp)
  8104dc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8104e0:	e0bffc17 	ldw	r2,-16(fp)
  8104e4:	10800804 	addi	r2,r2,32
  8104e8:	e0bffc15 	stw	r2,-16(fp)
  8104ec:	e0fffc17 	ldw	r3,-16(fp)
  8104f0:	e0bffd17 	ldw	r2,-12(fp)
  8104f4:	18bff836 	bltu	r3,r2,8104d8 <__alt_data_end+0xff8104d8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8104f8:	e0bffe17 	ldw	r2,-8(fp)
  8104fc:	108007cc 	andi	r2,r2,31
  810500:	10000226 	beq	r2,zero,81050c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  810504:	e0bffc17 	ldw	r2,-16(fp)
  810508:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81050c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  810510:	e037883a 	mov	sp,fp
  810514:	df000017 	ldw	fp,0(sp)
  810518:	dec00104 	addi	sp,sp,4
  81051c:	f800283a 	ret

00810520 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  810520:	defffe04 	addi	sp,sp,-8
  810524:	df000115 	stw	fp,4(sp)
  810528:	df000104 	addi	fp,sp,4
  81052c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  810530:	e0bfff17 	ldw	r2,-4(fp)
  810534:	10bffe84 	addi	r2,r2,-6
  810538:	10c00428 	cmpgeui	r3,r2,16
  81053c:	18001a1e 	bne	r3,zero,8105a8 <alt_exception_cause_generated_bad_addr+0x88>
  810540:	100690ba 	slli	r3,r2,2
  810544:	00802074 	movhi	r2,129
  810548:	10815604 	addi	r2,r2,1368
  81054c:	1885883a 	add	r2,r3,r2
  810550:	10800017 	ldw	r2,0(r2)
  810554:	1000683a 	jmp	r2
  810558:	00810598 	cmpnei	r2,zero,1046
  81055c:	00810598 	cmpnei	r2,zero,1046
  810560:	008105a8 	cmpgeui	r2,zero,1046
  810564:	008105a8 	cmpgeui	r2,zero,1046
  810568:	008105a8 	cmpgeui	r2,zero,1046
  81056c:	00810598 	cmpnei	r2,zero,1046
  810570:	008105a0 	cmpeqi	r2,zero,1046
  810574:	008105a8 	cmpgeui	r2,zero,1046
  810578:	00810598 	cmpnei	r2,zero,1046
  81057c:	00810598 	cmpnei	r2,zero,1046
  810580:	008105a8 	cmpgeui	r2,zero,1046
  810584:	00810598 	cmpnei	r2,zero,1046
  810588:	008105a0 	cmpeqi	r2,zero,1046
  81058c:	008105a8 	cmpgeui	r2,zero,1046
  810590:	008105a8 	cmpgeui	r2,zero,1046
  810594:	00810598 	cmpnei	r2,zero,1046
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  810598:	00800044 	movi	r2,1
  81059c:	00000306 	br	8105ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8105a0:	0005883a 	mov	r2,zero
  8105a4:	00000106 	br	8105ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8105a8:	0005883a 	mov	r2,zero
  }
}
  8105ac:	e037883a 	mov	sp,fp
  8105b0:	df000017 	ldw	fp,0(sp)
  8105b4:	dec00104 	addi	sp,sp,4
  8105b8:	f800283a 	ret

008105bc <atexit>:
  8105bc:	200b883a 	mov	r5,r4
  8105c0:	000d883a 	mov	r6,zero
  8105c4:	0009883a 	mov	r4,zero
  8105c8:	000f883a 	mov	r7,zero
  8105cc:	08106841 	jmpi	810684 <__register_exitproc>

008105d0 <exit>:
  8105d0:	defffe04 	addi	sp,sp,-8
  8105d4:	000b883a 	mov	r5,zero
  8105d8:	dc000015 	stw	r16,0(sp)
  8105dc:	dfc00115 	stw	ra,4(sp)
  8105e0:	2021883a 	mov	r16,r4
  8105e4:	08107980 	call	810798 <__call_exitprocs>
  8105e8:	00802074 	movhi	r2,129
  8105ec:	108b1b04 	addi	r2,r2,11372
  8105f0:	11000017 	ldw	r4,0(r2)
  8105f4:	20800f17 	ldw	r2,60(r4)
  8105f8:	10000126 	beq	r2,zero,810600 <exit+0x30>
  8105fc:	103ee83a 	callr	r2
  810600:	8009883a 	mov	r4,r16
  810604:	081092c0 	call	81092c <_exit>

00810608 <memcmp>:
  810608:	01c000c4 	movi	r7,3
  81060c:	3980192e 	bgeu	r7,r6,810674 <memcmp+0x6c>
  810610:	2144b03a 	or	r2,r4,r5
  810614:	11c4703a 	and	r2,r2,r7
  810618:	10000f26 	beq	r2,zero,810658 <memcmp+0x50>
  81061c:	20800003 	ldbu	r2,0(r4)
  810620:	28c00003 	ldbu	r3,0(r5)
  810624:	10c0151e 	bne	r2,r3,81067c <memcmp+0x74>
  810628:	31bfff84 	addi	r6,r6,-2
  81062c:	01ffffc4 	movi	r7,-1
  810630:	00000406 	br	810644 <memcmp+0x3c>
  810634:	20800003 	ldbu	r2,0(r4)
  810638:	28c00003 	ldbu	r3,0(r5)
  81063c:	31bfffc4 	addi	r6,r6,-1
  810640:	10c00e1e 	bne	r2,r3,81067c <memcmp+0x74>
  810644:	21000044 	addi	r4,r4,1
  810648:	29400044 	addi	r5,r5,1
  81064c:	31fff91e 	bne	r6,r7,810634 <__alt_data_end+0xff810634>
  810650:	0005883a 	mov	r2,zero
  810654:	f800283a 	ret
  810658:	20c00017 	ldw	r3,0(r4)
  81065c:	28800017 	ldw	r2,0(r5)
  810660:	1880041e 	bne	r3,r2,810674 <memcmp+0x6c>
  810664:	31bfff04 	addi	r6,r6,-4
  810668:	21000104 	addi	r4,r4,4
  81066c:	29400104 	addi	r5,r5,4
  810670:	39bff936 	bltu	r7,r6,810658 <__alt_data_end+0xff810658>
  810674:	303fe91e 	bne	r6,zero,81061c <__alt_data_end+0xff81061c>
  810678:	003ff506 	br	810650 <__alt_data_end+0xff810650>
  81067c:	10c5c83a 	sub	r2,r2,r3
  810680:	f800283a 	ret

00810684 <__register_exitproc>:
  810684:	00802074 	movhi	r2,129
  810688:	defffa04 	addi	sp,sp,-24
  81068c:	108b1b04 	addi	r2,r2,11372
  810690:	dc000315 	stw	r16,12(sp)
  810694:	14000017 	ldw	r16,0(r2)
  810698:	dc400415 	stw	r17,16(sp)
  81069c:	dfc00515 	stw	ra,20(sp)
  8106a0:	80805217 	ldw	r2,328(r16)
  8106a4:	2023883a 	mov	r17,r4
  8106a8:	10003626 	beq	r2,zero,810784 <__register_exitproc+0x100>
  8106ac:	10c00117 	ldw	r3,4(r2)
  8106b0:	010007c4 	movi	r4,31
  8106b4:	20c00e16 	blt	r4,r3,8106f0 <__register_exitproc+0x6c>
  8106b8:	1a400044 	addi	r9,r3,1
  8106bc:	8800211e 	bne	r17,zero,810744 <__register_exitproc+0xc0>
  8106c0:	18c00084 	addi	r3,r3,2
  8106c4:	18c7883a 	add	r3,r3,r3
  8106c8:	18c7883a 	add	r3,r3,r3
  8106cc:	12400115 	stw	r9,4(r2)
  8106d0:	10c7883a 	add	r3,r2,r3
  8106d4:	19400015 	stw	r5,0(r3)
  8106d8:	0005883a 	mov	r2,zero
  8106dc:	dfc00517 	ldw	ra,20(sp)
  8106e0:	dc400417 	ldw	r17,16(sp)
  8106e4:	dc000317 	ldw	r16,12(sp)
  8106e8:	dec00604 	addi	sp,sp,24
  8106ec:	f800283a 	ret
  8106f0:	00800034 	movhi	r2,0
  8106f4:	10800004 	addi	r2,r2,0
  8106f8:	10002526 	beq	r2,zero,810790 <__register_exitproc+0x10c>
  8106fc:	01006404 	movi	r4,400
  810700:	d9400015 	stw	r5,0(sp)
  810704:	d9800115 	stw	r6,4(sp)
  810708:	d9c00215 	stw	r7,8(sp)
  81070c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  810710:	d9400017 	ldw	r5,0(sp)
  810714:	d9800117 	ldw	r6,4(sp)
  810718:	d9c00217 	ldw	r7,8(sp)
  81071c:	10001c26 	beq	r2,zero,810790 <__register_exitproc+0x10c>
  810720:	80c05217 	ldw	r3,328(r16)
  810724:	10000115 	stw	zero,4(r2)
  810728:	02400044 	movi	r9,1
  81072c:	10c00015 	stw	r3,0(r2)
  810730:	80805215 	stw	r2,328(r16)
  810734:	10006215 	stw	zero,392(r2)
  810738:	10006315 	stw	zero,396(r2)
  81073c:	0007883a 	mov	r3,zero
  810740:	883fdf26 	beq	r17,zero,8106c0 <__alt_data_end+0xff8106c0>
  810744:	18d1883a 	add	r8,r3,r3
  810748:	4211883a 	add	r8,r8,r8
  81074c:	1211883a 	add	r8,r2,r8
  810750:	41802215 	stw	r6,136(r8)
  810754:	01000044 	movi	r4,1
  810758:	11806217 	ldw	r6,392(r2)
  81075c:	20c8983a 	sll	r4,r4,r3
  810760:	310cb03a 	or	r6,r6,r4
  810764:	11806215 	stw	r6,392(r2)
  810768:	41c04215 	stw	r7,264(r8)
  81076c:	01800084 	movi	r6,2
  810770:	89bfd31e 	bne	r17,r6,8106c0 <__alt_data_end+0xff8106c0>
  810774:	11806317 	ldw	r6,396(r2)
  810778:	3108b03a 	or	r4,r6,r4
  81077c:	11006315 	stw	r4,396(r2)
  810780:	003fcf06 	br	8106c0 <__alt_data_end+0xff8106c0>
  810784:	80805304 	addi	r2,r16,332
  810788:	80805215 	stw	r2,328(r16)
  81078c:	003fc706 	br	8106ac <__alt_data_end+0xff8106ac>
  810790:	00bfffc4 	movi	r2,-1
  810794:	003fd106 	br	8106dc <__alt_data_end+0xff8106dc>

00810798 <__call_exitprocs>:
  810798:	00802074 	movhi	r2,129
  81079c:	108b1b04 	addi	r2,r2,11372
  8107a0:	10800017 	ldw	r2,0(r2)
  8107a4:	defff404 	addi	sp,sp,-48
  8107a8:	dd800815 	stw	r22,32(sp)
  8107ac:	d8800015 	stw	r2,0(sp)
  8107b0:	10805204 	addi	r2,r2,328
  8107b4:	dd000615 	stw	r20,24(sp)
  8107b8:	dc800415 	stw	r18,16(sp)
  8107bc:	dfc00b15 	stw	ra,44(sp)
  8107c0:	df000a15 	stw	fp,40(sp)
  8107c4:	ddc00915 	stw	r23,36(sp)
  8107c8:	dd400715 	stw	r21,28(sp)
  8107cc:	dcc00515 	stw	r19,20(sp)
  8107d0:	dc400315 	stw	r17,12(sp)
  8107d4:	dc000215 	stw	r16,8(sp)
  8107d8:	2025883a 	mov	r18,r4
  8107dc:	2829883a 	mov	r20,r5
  8107e0:	d8800115 	stw	r2,4(sp)
  8107e4:	05bfffc4 	movi	r22,-1
  8107e8:	d8800017 	ldw	r2,0(sp)
  8107ec:	14c05217 	ldw	r19,328(r2)
  8107f0:	98001d26 	beq	r19,zero,810868 <__call_exitprocs+0xd0>
  8107f4:	dd400117 	ldw	r21,4(sp)
  8107f8:	98800117 	ldw	r2,4(r19)
  8107fc:	173fffc4 	addi	fp,r2,-1
  810800:	e0000d16 	blt	fp,zero,810838 <__call_exitprocs+0xa0>
  810804:	14000044 	addi	r16,r2,1
  810808:	8421883a 	add	r16,r16,r16
  81080c:	8421883a 	add	r16,r16,r16
  810810:	84402004 	addi	r17,r16,128
  810814:	9c63883a 	add	r17,r19,r17
  810818:	9c21883a 	add	r16,r19,r16
  81081c:	a0001e26 	beq	r20,zero,810898 <__call_exitprocs+0x100>
  810820:	80804017 	ldw	r2,256(r16)
  810824:	15001c26 	beq	r2,r20,810898 <__call_exitprocs+0x100>
  810828:	e73fffc4 	addi	fp,fp,-1
  81082c:	843fff04 	addi	r16,r16,-4
  810830:	8c7fff04 	addi	r17,r17,-4
  810834:	e5bff91e 	bne	fp,r22,81081c <__alt_data_end+0xff81081c>
  810838:	00800034 	movhi	r2,0
  81083c:	10800004 	addi	r2,r2,0
  810840:	10000926 	beq	r2,zero,810868 <__call_exitprocs+0xd0>
  810844:	98800117 	ldw	r2,4(r19)
  810848:	1000311e 	bne	r2,zero,810910 <__call_exitprocs+0x178>
  81084c:	98800017 	ldw	r2,0(r19)
  810850:	10003426 	beq	r2,zero,810924 <__call_exitprocs+0x18c>
  810854:	9809883a 	mov	r4,r19
  810858:	a8800015 	stw	r2,0(r21)
  81085c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  810860:	acc00017 	ldw	r19,0(r21)
  810864:	983fe41e 	bne	r19,zero,8107f8 <__alt_data_end+0xff8107f8>
  810868:	dfc00b17 	ldw	ra,44(sp)
  81086c:	df000a17 	ldw	fp,40(sp)
  810870:	ddc00917 	ldw	r23,36(sp)
  810874:	dd800817 	ldw	r22,32(sp)
  810878:	dd400717 	ldw	r21,28(sp)
  81087c:	dd000617 	ldw	r20,24(sp)
  810880:	dcc00517 	ldw	r19,20(sp)
  810884:	dc800417 	ldw	r18,16(sp)
  810888:	dc400317 	ldw	r17,12(sp)
  81088c:	dc000217 	ldw	r16,8(sp)
  810890:	dec00c04 	addi	sp,sp,48
  810894:	f800283a 	ret
  810898:	98800117 	ldw	r2,4(r19)
  81089c:	80c00017 	ldw	r3,0(r16)
  8108a0:	10bfffc4 	addi	r2,r2,-1
  8108a4:	17001526 	beq	r2,fp,8108fc <__call_exitprocs+0x164>
  8108a8:	80000015 	stw	zero,0(r16)
  8108ac:	183fde26 	beq	r3,zero,810828 <__alt_data_end+0xff810828>
  8108b0:	00800044 	movi	r2,1
  8108b4:	1708983a 	sll	r4,r2,fp
  8108b8:	98806217 	ldw	r2,392(r19)
  8108bc:	9dc00117 	ldw	r23,4(r19)
  8108c0:	2084703a 	and	r2,r4,r2
  8108c4:	1000061e 	bne	r2,zero,8108e0 <__call_exitprocs+0x148>
  8108c8:	183ee83a 	callr	r3
  8108cc:	98800117 	ldw	r2,4(r19)
  8108d0:	15ffc51e 	bne	r2,r23,8107e8 <__alt_data_end+0xff8107e8>
  8108d4:	a8800017 	ldw	r2,0(r21)
  8108d8:	14ffd326 	beq	r2,r19,810828 <__alt_data_end+0xff810828>
  8108dc:	003fc206 	br	8107e8 <__alt_data_end+0xff8107e8>
  8108e0:	98806317 	ldw	r2,396(r19)
  8108e4:	2084703a 	and	r2,r4,r2
  8108e8:	1000061e 	bne	r2,zero,810904 <__call_exitprocs+0x16c>
  8108ec:	89400017 	ldw	r5,0(r17)
  8108f0:	9009883a 	mov	r4,r18
  8108f4:	183ee83a 	callr	r3
  8108f8:	003ff406 	br	8108cc <__alt_data_end+0xff8108cc>
  8108fc:	9f000115 	stw	fp,4(r19)
  810900:	003fea06 	br	8108ac <__alt_data_end+0xff8108ac>
  810904:	89000017 	ldw	r4,0(r17)
  810908:	183ee83a 	callr	r3
  81090c:	003fef06 	br	8108cc <__alt_data_end+0xff8108cc>
  810910:	98800017 	ldw	r2,0(r19)
  810914:	982b883a 	mov	r21,r19
  810918:	1027883a 	mov	r19,r2
  81091c:	983fb61e 	bne	r19,zero,8107f8 <__alt_data_end+0xff8107f8>
  810920:	003fd106 	br	810868 <__alt_data_end+0xff810868>
  810924:	0005883a 	mov	r2,zero
  810928:	003ffa06 	br	810914 <__alt_data_end+0xff810914>

0081092c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81092c:	defffd04 	addi	sp,sp,-12
  810930:	df000215 	stw	fp,8(sp)
  810934:	df000204 	addi	fp,sp,8
  810938:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81093c:	0001883a 	nop
  810940:	e0bfff17 	ldw	r2,-4(fp)
  810944:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  810948:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81094c:	10000226 	beq	r2,zero,810958 <_exit+0x2c>
    ALT_SIM_FAIL();
  810950:	002af070 	cmpltui	zero,zero,43969
  810954:	00000106 	br	81095c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  810958:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81095c:	003fff06 	br	81095c <__alt_data_end+0xff81095c>
